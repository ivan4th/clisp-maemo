.TH CLISP 1 "19 June 1994"
.SH NAME
clisp \- Common Lisp language interpreter and compiler
.SH SYNOPSIS
.B clisp
[
.B -h
]
[
.B -m
.I memsize
]
[
.B -s
.I stacksize
]
[
.B -M
.I memfile
]
[
.B -L
.I language
]
[
.B -q
]
[
.B -I
]
[
.B -i
.IR initfile " ..."
]
[
.B -c
[
.B -l
]
.IR lispfile " ..."
]
[
.B -x
.I expression
]
.SH DESCRIPTION
Invokes the common lisp interpreter and compiler.
Invoked without arguments, executes a read-eval-print loop,
in which expressions are in turn read from standard input, evaluated
by the lisp interpreter, and their results output to standard output.
Invoked with
.BR \-c ,
the specified lisp files are compiled to a bytecode that can be
executed more efficiently.
.SH OPTIONS
.TP
.B -h
Displays a help message on how to use
.BR clisp .
.TP
.BI "-m " memsize
Sets the amount of memory
.B clisp
tries to grab on startup.
The amount may be given as
.I nnnnnnn
(measured in bytes),
.IB nnnn K
or
.IB nnnn KB
(measured in kilobytes) or
.IB n M
or
.IB n MB
(measured in megabytes).
Default is 2 megabytes.
The argument is constrained between 100 KB and 16 MB.
-- This version of
.I clisp
allocates memory dynamically.
.I memsize
is essentially ignored.
.TP
.BI "-s " stacksize
Sets the size of the stack
.B clisp
allocates for itself. The syntax is the same as for
.IR memsize .
Default is one eighth of
.IR memsize .
The argument is constrained between 40 KB and 8 MB.
.TP
.BI "-M " memfile
Specifies the initial memory image.
This must be a memory dump produced by the
.I saveinitmem
function.
.TP
.BI "-L " language
Specifies the language
.B clisp
uses to communicate with the user. This may be
.BR english ", " deutsch ", " francais .
.TP
.B -q
Quiet:
.B clisp
displays no banner at startup and no good-bye message when quitting.
.TP
.B -I
ILISP friendly:
.B clisp
interacts in a way that ILISP (a popular Emacs LISP interface) can deal with.
Currently the only effect of this is that unnecessary prompts are not
suppressed.
.TP
.BI "-i " "initfile ..."
Specifies initialization files to be
.IR load ed
at startup. These should be lisp files (source or compiled).
.TP
.BI "-c " "lispfile ..."
Compiles the specified lispfiles to bytecode. The compiled files
can then be
.IR load ed
instead of the sources to gain efficiency.
.TP
.B -l
A bytecode listing of the files being compiled will be produced.
Useful only for debugging purposes.
.TP
.BI "-x " expressions
Executes a series of arbitrary expressions instead of a read-eval-print loop.
The values of the expressions will be output to standard output.
Due to the argument processing done by the shell, the
.I expressions
must be enclosed in single quotes, and double quotes and backslashes must
be preceded by backslashes.
.PP
.SH REFERENCE
The language implemented conforms to
.RS 1
      Guy L. Steele Jr.: Common Lisp - The Language.
      Digital Press. 1st edition 1984, 465 pages.
      ("CLtL1" for short)
.RE
and to the older parts of
.RS 1
      Guy L. Steele Jr.: Common Lisp - The Language.
      Digital Press. 2nd edition 1990, 1032 pages.
      ("CLtL2" for short)
.RE
.SH USE
.TP
.B help
to get some on-line help.
.TP
.BI "(apropos " name ")"
lists the symbols relating to
.IR name .
.TP
.BR "(exit)" " or " "(quit)" " or " "(bye)"
to quit
.BR clisp .
.TP
EOF (Ctrl-Z)
to leave the current read-eval-print loop.
.TP
arrow keys
for editing and viewing the input history.
.TP
Tab key
to complete the symbol's name you are just typing.
.SH FILES
.TP
.I lisp.exe
main executable
.TP
.I lispinit.mem
initial memory image
.TP
.I config.lsp
site-dependent configuration
.TP
.I *.lsp
lisp source
.TP
.I *.fas
lisp code, compiled by
.B clisp
.TP
.I *.lib
lisp source library information, generated and used by the
.B clisp
compiler
.SH ENVIRONMENT
.TP
.B CLISP_LANGUAGE
specifies the language
.B clisp
uses to communicate with the user. The value may be
.BR english ", " deutsch ", " francais
and defaults to
.BR english .
The
.B -L
option can be used to override this environment variable.
.TP
.BR COMSPEC " (DOS, OS/2 implementations only)"
is used to find the command interpreter called by the function
.IR shell .
.SH "SEE ALSO"
.IR cmulisp (1),
.IR emacs (1).
.SH BUGS
.PP
The function
.I inspect
is not implemented.
.PP
Only very few extensions from CLtL2 are supported.
.PP
No on-line documentation beyond
.I apropos
and
.I describe
is available.
.SH PROJECTS
.PP
Writing on-line documentation.
.PP
Building a foreign function interface (ability to call C code directly).
.PP
Write
.IR inspect .
.PP
Enhance the compiler such that it can inline local functions.
.PP
Specify a portable set of window and graphics operations.
.SH AUTHORS
Bruno Haible
<haible@ma2s2.mathematik.uni-karlsruhe.de>
and Michael Stoll.
