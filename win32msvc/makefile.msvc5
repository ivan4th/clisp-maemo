# Makefile for the CLISP binaries
# DO NOT EDIT! GENERATED AUTOMATICALLY!
# This file was created on host delysid.gnu.org as the output of the command:
# ./makemake --with-dynamic-ffi win32msvc msvc5

# -------------- Start of configurable section --------------------

# Directories used by "make install":
prefix = 
exec_prefix = $(prefix)
bindir = $(exec_prefix)\bin
mandir = $(exec_prefix)\man
libdir = $(exec_prefix)\lib
lisplibdir = $(libdir)\clisp

# List of add-on modules:
# queens               the queens function as a separate module
# wildcard             wildcard matching
# regexp               Unix-style regular expression matching and searching
# clx/mit-clx          classical X11 interface
# If you change this after doing "make", you have to "rm -r full; make".
MODULES =  

# Programs used by "make":
CC = cl -G5 -Os -Oy -Ob1 -Gs -Gf -Gy
CFLAGS =  -DDYNAMIC_FFI -DNO_GETTEXT
CPP = ..\utils\gcc-cccp\cccp -U__GNUC__ -+ -D_MSC_VER=1100 -D_M_IX86=500 -D_WIN32 -D_INTEGRAL_MAX_BITS=64 -DDEBUG_OS_ERROR -I$(MSVCDIR)/include
CLFLAGS = 
LIBS = sigsegv.lib avcall.lib callback.lib  user32.lib wsock32.lib advapi32.lib ole32.lib
X_LIBS = 
MSVCDIR = d:/devstudio/vc

MAKE = nmake
RM = del
CP = copy
LN = copy
MV = ren
CAT = type
TOUCH = touch
GREP = grep
AR = ar
RANLIB = ranlib

# Programs used by "make install":
INSTALL = copy
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

# Programs used by "make distrib":

# formatter for manual page
ROFF_MAN = nroff -man # try "groff -Tascii -mandoc" or "nroff -man"
ROFF_DVI =  # try "groff -Tdvi -mandoc"

# -------------- End of configurable section --------------------

# 
#                       Requirements for add-on modules
#                       -------------------------------
# 
# The general layout of add-on modules is described in ../doc/module.txt.
# The requirements made there (i.e. the existence of a "link.sh" file
# which defines certain variables) make sure that such an add-on module
# can be distributed with CLISP.
# 
# If you want an add-on module to be _built_ automatically with CLISP,
# the following additional requirements have to be obeyed.
# 
#   1. The module must be located in a subdirectory of clisp's source
#      directory.
#      Examples: clisp/src/ wildcard/
#                clisp/src/ bindings/linuxlibc5/
# 
#   2. If the module contains a file called "configure", it is assumed
#      to be a GNU autoconf generated configuration file, and is called
#      with a "--cache-file=..." argument. It should generate platform
#      dependent header files, Makefiles and the like.
# 
#   3. The module should contain a Makefile (maybe generated by requirement 2),
#      which defines the following targets:
# 
#        clisp-module
# 
#           This target builds the file mentioned by the link.sh file.
#           The following makefile variables can be used:
#             CC                 the C compiler used to compile the CLISP source
#             CFLAGS             the C compiler flags
#             INCLUDES           a directory containing CLISP header files
#             LISPBIBL_INCLUDES  if you #include "lispbibl.c", put this onto
#                                the dependency line
#             CLFLAGS            the C compiler flags when linking an executable
#             LIBS               the libraries used when linking an executable
#             RANLIB             the name of the "ranlib" command
#             CLISP              a command which calls the already built
#                                "base" clisp.
#           Typically, you will have rules like this in your Makefile:
#               foo.o : foo.c
#                       $(CC) $(CFLAGS) -I$(INCLUDES) -c foo.c
#               foo.fas : foo.lsp
#                       $(CLISP) -c foo.lsp
# 
#        clisp-module-distrib
# 
#           This target copies the module into a temporary distribution
#           directory, on the same disk.
#           The following makefile variables can be used:
#             distribdir       the name of temporary distribution directory
#             LN               command to make hard links (works also for
#                              symbolic links)
#           Typically, this target will look like this:
#
#               DISTRIBFILES = <the NEW_FILES mentioned in link.sh> <doc files>
#               clisp-module-distrib : clisp-module force
#                       $(LN) $(DISTRIBFILES) $(distribdir)
# 
# If these requirements are obeyed, this Makefile will automatically build
# the add-on module and make it part of the "full" distribution -- all you
# need to do is to add its name to the MODULES definition line above.
# 

COMMENT5 = comment5
ANSIDECL = ansidecl
TXT2C = txt2c -I../

DFILES = \
spvw.d \
spvwtabf.d \
spvwtabs.d \
spvwtabo.d \
eval.d \
control.d \
encoding.d \
pathname.d \
stream.d \
socket.d \
io.d \
array.d \
hashtabl.d \
list.d \
package.d \
record.d \
sequence.d \
charstrg.d \
debug.d \
error.d \
misc.d \
time.d \
predtype.d \
symbol.d \
lisparit.d \
foreign.d \
win32aux.d \
lispbibl.d \
fsubr.d \
subr.d \
pseudofun.d \
constsym.d \
constobj.d \
win32.d \
xthread.d \
constpack.d \
avl.d \
sort.d \
subrkw.d \
bytecode.d \
spvw_module.d \
spvw_debug.d \
spvw_alloca.d \
spvw_mmap.d \
spvw_multimap.d \
spvw_singlemap.d \
spvw_page.d \
spvw_heap.d \
spvw_global.d \
spvw_gcstat.d \
spvw_space.d \
spvw_mark.d \
spvw_objsize.d \
spvw_update.d \
spvw_fault.d \
spvw_sigsegv.d \
spvw_sigcld.d \
spvw_sigint.d \
spvw_sigwinch.d \
spvw_garcol.d \
spvw_genera1.d \
spvw_genera2.d \
spvw_genera3.d \
spvw_allocate.d \
spvw_typealloc.d \
spvw_circ.d \
spvw_walk.d \
spvw_language.d \
spvw_memfile.d \
errwin32.d \
aridecl.d \
arilev0.d \
arilev1.d \
intelem.d \
intlog.d \
intplus.d \
intcomp.d \
intbyte.d \
intmal.d \
intdiv.d \
intgcd.d \
int2adic.d \
intsqrt.d \
intprint.d \
intread.d \
rational.d \
sfloat.d \
ffloat.d \
dfloat.d \
lfloat.d \
flo_konv.d \
flo_rest.d \
realelem.d \
realrand.d \
realtran.d \
compelem.d \
comptran.d \
arilev1c.d \
arilev1e.d \
arilev1i.d \
genclisph.d \
modules.d \
noreadline.d \
ari80386.d \
sp80386.d

CFILES = \
spvw.c \
spvwtabf.c \
spvwtabs.c \
spvwtabo.c \
eval.c \
control.c \
encoding.c \
pathname.c \
stream.c \
socket.c \
io.c \
array.c \
hashtabl.c \
list.c \
package.c \
record.c \
sequence.c \
charstrg.c \
debug.c \
error.c \
misc.c \
time.c \
predtype.c \
symbol.c \
lisparit.c \
foreign.c \
win32aux.c \
lispbibl.c \
fsubr.c \
subr.c \
pseudofun.c \
constsym.c \
constobj.c \
win32.c \
xthread.c \
constpack.c \
avl.c \
sort.c \
subrkw.c \
bytecode.c \
spvw_module.c \
spvw_debug.c \
spvw_alloca.c \
spvw_mmap.c \
spvw_multimap.c \
spvw_singlemap.c \
spvw_page.c \
spvw_heap.c \
spvw_global.c \
spvw_gcstat.c \
spvw_space.c \
spvw_mark.c \
spvw_objsize.c \
spvw_update.c \
spvw_fault.c \
spvw_sigsegv.c \
spvw_sigcld.c \
spvw_sigint.c \
spvw_sigwinch.c \
spvw_garcol.c \
spvw_genera1.c \
spvw_genera2.c \
spvw_genera3.c \
spvw_allocate.c \
spvw_typealloc.c \
spvw_circ.c \
spvw_walk.c \
spvw_language.c \
spvw_memfile.c \
errwin32.c \
aridecl.c \
arilev0.c \
arilev1.c \
intelem.c \
intlog.c \
intplus.c \
intcomp.c \
intbyte.c \
intmal.c \
intdiv.c \
intgcd.c \
int2adic.c \
intsqrt.c \
intprint.c \
intread.c \
rational.c \
sfloat.c \
ffloat.c \
dfloat.c \
lfloat.c \
flo_konv.c \
flo_rest.c \
realelem.c \
realrand.c \
realtran.c \
compelem.c \
comptran.c \
arilev1c.c \
arilev1e.c \
arilev1i.c \
genclisph.c \
modules.c \
noreadline.c \
ari80386.c \
sp80386.c

OBJECTS = \
spvw.obj \
spvwtabf.obj \
spvwtabs.obj \
spvwtabo.obj \
eval.obj \
control.obj \
encoding.obj \
pathname.obj \
stream.obj \
socket.obj \
io.obj \
array.obj \
hashtabl.obj \
list.obj \
package.obj \
record.obj \
sequence.obj \
charstrg.obj \
debug.obj \
error.obj \
misc.obj \
time.obj \
predtype.obj \
symbol.obj \
lisparit.obj \
foreign.obj \
win32aux.obj \
ari80386.obj \
sp80386.obj

LSPFILES = \
init.lsp \
defseq.lsp \
backquot.lsp \
defmacro.lsp \
macros1.lsp \
macros2.lsp \
defs1.lsp \
timezone.lsp \
places.lsp \
floatpri.lsp \
type.lsp \
defstruc.lsp \
format.lsp \
savemem.lsp \
trace.lsp \
compiler.lsp \
disassem.lsp \
defs2.lsp \
loop.lsp \
clos.lsp \
conditio.lsp \
gstream.lsp \
xcharin.lsp \
keyboard.lsp \
screen.lsp \
runprog.lsp \
query.lsp \
reploop.lsp \
dribble.lsp \
complete.lsp \
describe.lsp \
room.lsp \
edit.lsp \
macros3.lsp \
foreign1.lsp \
defs3.lsp \
spanish.lsp \
config.lsp

FASFILES = \
init.fas \
defseq.fas \
backquot.fas \
defmacro.fas \
macros1.fas \
macros2.fas \
defs1.fas \
timezone.fas \
places.fas \
floatpri.fas \
type.fas \
defstruc.fas \
format.fas \
savemem.fas \
trace.fas \
compiler.fas \
disassem.fas \
defs2.fas \
loop.fas \
clos.fas \
conditio.fas \
gstream.fas \
xcharin.fas \
keyboard.fas \
screen.fas \
runprog.fas \
query.fas \
reploop.fas \
dribble.fas \
complete.fas \
describe.fas \
room.fas \
edit.fas \
macros3.fas \
foreign1.fas \
defs3.fas \
spanish.fas \
config.fas

TXTFILES = \
LISP-tutorial.txt \
CLOS-guide.txt \
editors.txt

TESTLSPFILES = \
stage\init.lsp \
stage\defseq.lsp \
stage\backquot.lsp \
stage\defmacro.lsp \
stage\macros1.lsp \
stage\macros2.lsp \
stage\defs1.lsp \
stage\timezone.lsp \
stage\places.lsp \
stage\floatpri.lsp \
stage\type.lsp \
stage\defstruc.lsp \
stage\format.lsp \
stage\savemem.lsp \
stage\trace.lsp \
stage\compiler.lsp \
stage\disassem.lsp \
stage\defs2.lsp \
stage\loop.lsp \
stage\clos.lsp \
stage\conditio.lsp \
stage\gstream.lsp \
stage\xcharin.lsp \
stage\keyboard.lsp \
stage\screen.lsp \
stage\runprog.lsp \
stage\query.lsp \
stage\reploop.lsp \
stage\dribble.lsp \
stage\complete.lsp \
stage\describe.lsp \
stage\room.lsp \
stage\edit.lsp \
stage\macros3.lsp \
stage\foreign1.lsp \
stage\defs3.lsp \
stage\spanish.lsp \
stage\config.lsp

TESTFASFILES = \
stage\init.fas \
stage\defseq.fas \
stage\backquot.fas \
stage\defmacro.fas \
stage\macros1.fas \
stage\macros2.fas \
stage\defs1.fas \
stage\timezone.fas \
stage\places.fas \
stage\floatpri.fas \
stage\type.fas \
stage\defstruc.fas \
stage\format.fas \
stage\savemem.fas \
stage\trace.fas \
stage\compiler.fas \
stage\disassem.fas \
stage\defs2.fas \
stage\loop.fas \
stage\clos.fas \
stage\conditio.fas \
stage\gstream.fas \
stage\xcharin.fas \
stage\keyboard.fas \
stage\screen.fas \
stage\runprog.fas \
stage\query.fas \
stage\reploop.fas \
stage\dribble.fas \
stage\complete.fas \
stage\describe.fas \
stage\room.fas \
stage\edit.fas \
stage\macros3.fas \
stage\foreign1.fas \
stage\defs3.fas \
stage\spanish.fas \
stage\config.fas


all : init allc allo lisp.exe interpreted.mem halfcompiled.mem lispinit.mem manual


init : ../utils/gcc-cccp/cccp.exe comment5.exe ansidecl.exe txt2c.exe ccmp2c.exe modprep.exe $(DFILES) modules.h

../utils/gcc-cccp/cccp.exe :

comment5.exe : ..\utils\comment5.c
	$(CC) $(CFLAGS) $(CLFLAGS) ..\utils\comment5.c /Fecomment5.exe

ansidecl.exe : ..\utils\ansidecl.d comment5.exe
	$(LN) ..\utils\ansidecl.d ansidecl.d
	$(COMMENT5) ansidecl.d ansidecl.c
	$(RM) ansidecl.d
	$(CC) $(CFLAGS) $(CLFLAGS) ansidecl.c /Feansidecl.exe
	$(RM) ansidecl.c

txt2c.exe : ..\utils\txt2c.c ansidecl.exe
	$(ANSIDECL) < ..\utils\txt2c.c > txt2c.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt2c.c /Fetxt2c.exe
	$(RM) txt2c.c

ccmp2c.exe : ..\utils\ccmp2c.d comment5.exe ansidecl.exe
	$(COMMENT5) ..\utils\ccmp2c.d | $(ANSIDECL) > ccmp2c.c
	$(CC) $(CFLAGS) $(CLFLAGS) -I. ccmp2c.c /Feccmp2c.exe
	$(RM) ccmp2c.c

modprep.exe : ..\utils\modprep.d comment5.exe ansidecl.exe
	$(COMMENT5) ..\utils\modprep.d | $(ANSIDECL) > modprep.c
	$(CC) $(CFLAGS) $(CLFLAGS) modprep.c /Femodprep.exe
	$(RM) modprep.c


allc : init $(CFILES)

spvw.c : spvw.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw.d | $(ANSIDECL) > spvw.c

spvwtabf.c : spvwtabf.d comment5.exe ansidecl.exe
	$(COMMENT5) spvwtabf.d | $(ANSIDECL) > spvwtabf.c

spvwtabs.c : spvwtabs.d comment5.exe ansidecl.exe
	$(COMMENT5) spvwtabs.d | $(ANSIDECL) > spvwtabs.c

spvwtabo.c : spvwtabo.d comment5.exe ansidecl.exe
	$(COMMENT5) spvwtabo.d | $(ANSIDECL) > spvwtabo.c

eval.c : eval.d comment5.exe ansidecl.exe
	$(COMMENT5) eval.d | $(ANSIDECL) > eval.c

control.c : control.d comment5.exe ansidecl.exe
	$(COMMENT5) control.d | $(ANSIDECL) > control.c

encoding.c : encoding.d comment5.exe ansidecl.exe
	$(COMMENT5) encoding.d | $(ANSIDECL) > encoding.c

pathname.c : pathname.d comment5.exe ansidecl.exe
	$(COMMENT5) pathname.d | $(ANSIDECL) > pathname.c

stream.c : stream.d comment5.exe ansidecl.exe
	$(COMMENT5) stream.d | $(ANSIDECL) > stream.c

socket.c : socket.d comment5.exe ansidecl.exe
	$(COMMENT5) socket.d | $(ANSIDECL) > socket.c

io.c : io.d comment5.exe ansidecl.exe
	$(COMMENT5) io.d | $(ANSIDECL) > io.c

array.c : array.d comment5.exe ansidecl.exe
	$(COMMENT5) array.d | $(ANSIDECL) > array.c

hashtabl.c : hashtabl.d comment5.exe ansidecl.exe
	$(COMMENT5) hashtabl.d | $(ANSIDECL) > hashtabl.c

list.c : list.d comment5.exe ansidecl.exe
	$(COMMENT5) list.d | $(ANSIDECL) > list.c

package.c : package.d comment5.exe ansidecl.exe
	$(COMMENT5) package.d | $(ANSIDECL) > package.c

record.c : record.d comment5.exe ansidecl.exe
	$(COMMENT5) record.d | $(ANSIDECL) > record.c

sequence.c : sequence.d comment5.exe ansidecl.exe
	$(COMMENT5) sequence.d | $(ANSIDECL) > sequence.c

charstrg.c : charstrg.d comment5.exe ansidecl.exe
	$(COMMENT5) charstrg.d | $(ANSIDECL) > charstrg.c

debug.c : debug.d comment5.exe ansidecl.exe
	$(COMMENT5) debug.d | $(ANSIDECL) > debug.c

error.c : error.d comment5.exe ansidecl.exe
	$(COMMENT5) error.d | $(ANSIDECL) > error.c

misc.c : misc.d comment5.exe ansidecl.exe
	$(COMMENT5) misc.d | $(ANSIDECL) > misc.c

time.c : time.d comment5.exe ansidecl.exe
	$(COMMENT5) time.d | $(ANSIDECL) > time.c

predtype.c : predtype.d comment5.exe ansidecl.exe
	$(COMMENT5) predtype.d | $(ANSIDECL) > predtype.c

symbol.c : symbol.d comment5.exe ansidecl.exe
	$(COMMENT5) symbol.d | $(ANSIDECL) > symbol.c

lisparit.c : lisparit.d comment5.exe ansidecl.exe
	$(COMMENT5) lisparit.d | $(ANSIDECL) > lisparit.c

foreign.c : foreign.d comment5.exe ansidecl.exe
	$(COMMENT5) foreign.d | $(ANSIDECL) > foreign.c

win32aux.c : win32aux.d comment5.exe ansidecl.exe
	$(COMMENT5) win32aux.d | $(ANSIDECL) > win32aux.c

lispbibl.c : lispbibl.d comment5.exe ansidecl.exe
	$(COMMENT5) lispbibl.d | $(ANSIDECL) > lispbibl.c

fsubr.c : fsubr.d comment5.exe ansidecl.exe
	$(COMMENT5) fsubr.d | $(ANSIDECL) > fsubr.c

subr.c : subr.d comment5.exe ansidecl.exe
	$(COMMENT5) subr.d | $(ANSIDECL) > subr.c

pseudofun.c : pseudofun.d comment5.exe ansidecl.exe
	$(COMMENT5) pseudofun.d | $(ANSIDECL) > pseudofun.c

constsym.c : constsym.d comment5.exe ansidecl.exe
	$(COMMENT5) constsym.d | $(ANSIDECL) > constsym.c

constobj.c : constobj.d comment5.exe ansidecl.exe
	$(COMMENT5) constobj.d | $(ANSIDECL) > constobj.c

win32.c : win32.d comment5.exe ansidecl.exe
	$(COMMENT5) win32.d | $(ANSIDECL) > win32.c

xthread.c : xthread.d comment5.exe ansidecl.exe
	$(COMMENT5) xthread.d | $(ANSIDECL) > xthread.c

constpack.c : constpack.d comment5.exe ansidecl.exe
	$(COMMENT5) constpack.d | $(ANSIDECL) > constpack.c

avl.c : avl.d comment5.exe ansidecl.exe
	$(COMMENT5) avl.d | $(ANSIDECL) > avl.c

sort.c : sort.d comment5.exe ansidecl.exe
	$(COMMENT5) sort.d | $(ANSIDECL) > sort.c

subrkw.c : subrkw.d comment5.exe ansidecl.exe
	$(COMMENT5) subrkw.d | $(ANSIDECL) > subrkw.c

bytecode.c : bytecode.d comment5.exe ansidecl.exe
	$(COMMENT5) bytecode.d | $(ANSIDECL) > bytecode.c

spvw_module.c : spvw_module.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_module.d | $(ANSIDECL) > spvw_module.c

spvw_debug.c : spvw_debug.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_debug.d | $(ANSIDECL) > spvw_debug.c

spvw_alloca.c : spvw_alloca.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_alloca.d | $(ANSIDECL) > spvw_alloca.c

spvw_mmap.c : spvw_mmap.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_mmap.d | $(ANSIDECL) > spvw_mmap.c

spvw_multimap.c : spvw_multimap.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_multimap.d | $(ANSIDECL) > spvw_multimap.c

spvw_singlemap.c : spvw_singlemap.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_singlemap.d | $(ANSIDECL) > spvw_singlemap.c

spvw_page.c : spvw_page.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_page.d | $(ANSIDECL) > spvw_page.c

spvw_heap.c : spvw_heap.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_heap.d | $(ANSIDECL) > spvw_heap.c

spvw_global.c : spvw_global.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_global.d | $(ANSIDECL) > spvw_global.c

spvw_gcstat.c : spvw_gcstat.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_gcstat.d | $(ANSIDECL) > spvw_gcstat.c

spvw_space.c : spvw_space.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_space.d | $(ANSIDECL) > spvw_space.c

spvw_mark.c : spvw_mark.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_mark.d | $(ANSIDECL) > spvw_mark.c

spvw_objsize.c : spvw_objsize.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_objsize.d | $(ANSIDECL) > spvw_objsize.c

spvw_update.c : spvw_update.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_update.d | $(ANSIDECL) > spvw_update.c

spvw_fault.c : spvw_fault.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_fault.d | $(ANSIDECL) > spvw_fault.c

spvw_sigsegv.c : spvw_sigsegv.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_sigsegv.d | $(ANSIDECL) > spvw_sigsegv.c

spvw_sigcld.c : spvw_sigcld.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_sigcld.d | $(ANSIDECL) > spvw_sigcld.c

spvw_sigint.c : spvw_sigint.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_sigint.d | $(ANSIDECL) > spvw_sigint.c

spvw_sigwinch.c : spvw_sigwinch.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_sigwinch.d | $(ANSIDECL) > spvw_sigwinch.c

spvw_garcol.c : spvw_garcol.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_garcol.d | $(ANSIDECL) > spvw_garcol.c

spvw_genera1.c : spvw_genera1.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_genera1.d | $(ANSIDECL) > spvw_genera1.c

spvw_genera2.c : spvw_genera2.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_genera2.d | $(ANSIDECL) > spvw_genera2.c

spvw_genera3.c : spvw_genera3.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_genera3.d | $(ANSIDECL) > spvw_genera3.c

spvw_allocate.c : spvw_allocate.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_allocate.d | $(ANSIDECL) > spvw_allocate.c

spvw_typealloc.c : spvw_typealloc.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_typealloc.d | $(ANSIDECL) > spvw_typealloc.c

spvw_circ.c : spvw_circ.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_circ.d | $(ANSIDECL) > spvw_circ.c

spvw_walk.c : spvw_walk.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_walk.d | $(ANSIDECL) > spvw_walk.c

spvw_language.c : spvw_language.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_language.d | $(ANSIDECL) > spvw_language.c

spvw_memfile.c : spvw_memfile.d comment5.exe ansidecl.exe
	$(COMMENT5) spvw_memfile.d | $(ANSIDECL) > spvw_memfile.c

errwin32.c : errwin32.d comment5.exe ansidecl.exe
	$(COMMENT5) errwin32.d | $(ANSIDECL) > errwin32.c

aridecl.c : aridecl.d comment5.exe ansidecl.exe
	$(COMMENT5) aridecl.d | $(ANSIDECL) > aridecl.c

arilev0.c : arilev0.d comment5.exe ansidecl.exe
	$(COMMENT5) arilev0.d | $(ANSIDECL) > arilev0.c

arilev1.c : arilev1.d comment5.exe ansidecl.exe
	$(COMMENT5) arilev1.d | $(ANSIDECL) > arilev1.c

intelem.c : intelem.d comment5.exe ansidecl.exe
	$(COMMENT5) intelem.d | $(ANSIDECL) > intelem.c

intlog.c : intlog.d comment5.exe ansidecl.exe
	$(COMMENT5) intlog.d | $(ANSIDECL) > intlog.c

intplus.c : intplus.d comment5.exe ansidecl.exe
	$(COMMENT5) intplus.d | $(ANSIDECL) > intplus.c

intcomp.c : intcomp.d comment5.exe ansidecl.exe
	$(COMMENT5) intcomp.d | $(ANSIDECL) > intcomp.c

intbyte.c : intbyte.d comment5.exe ansidecl.exe
	$(COMMENT5) intbyte.d | $(ANSIDECL) > intbyte.c

intmal.c : intmal.d comment5.exe ansidecl.exe
	$(COMMENT5) intmal.d | $(ANSIDECL) > intmal.c

intdiv.c : intdiv.d comment5.exe ansidecl.exe
	$(COMMENT5) intdiv.d | $(ANSIDECL) > intdiv.c

intgcd.c : intgcd.d comment5.exe ansidecl.exe
	$(COMMENT5) intgcd.d | $(ANSIDECL) > intgcd.c

int2adic.c : int2adic.d comment5.exe ansidecl.exe
	$(COMMENT5) int2adic.d | $(ANSIDECL) > int2adic.c

intsqrt.c : intsqrt.d comment5.exe ansidecl.exe
	$(COMMENT5) intsqrt.d | $(ANSIDECL) > intsqrt.c

intprint.c : intprint.d comment5.exe ansidecl.exe
	$(COMMENT5) intprint.d | $(ANSIDECL) > intprint.c

intread.c : intread.d comment5.exe ansidecl.exe
	$(COMMENT5) intread.d | $(ANSIDECL) > intread.c

rational.c : rational.d comment5.exe ansidecl.exe
	$(COMMENT5) rational.d | $(ANSIDECL) > rational.c

sfloat.c : sfloat.d comment5.exe ansidecl.exe
	$(COMMENT5) sfloat.d | $(ANSIDECL) > sfloat.c

ffloat.c : ffloat.d comment5.exe ansidecl.exe
	$(COMMENT5) ffloat.d | $(ANSIDECL) > ffloat.c

dfloat.c : dfloat.d comment5.exe ansidecl.exe
	$(COMMENT5) dfloat.d | $(ANSIDECL) > dfloat.c

lfloat.c : lfloat.d comment5.exe ansidecl.exe
	$(COMMENT5) lfloat.d | $(ANSIDECL) > lfloat.c

flo_konv.c : flo_konv.d comment5.exe ansidecl.exe
	$(COMMENT5) flo_konv.d | $(ANSIDECL) > flo_konv.c

flo_rest.c : flo_rest.d comment5.exe ansidecl.exe
	$(COMMENT5) flo_rest.d | $(ANSIDECL) > flo_rest.c

realelem.c : realelem.d comment5.exe ansidecl.exe
	$(COMMENT5) realelem.d | $(ANSIDECL) > realelem.c

realrand.c : realrand.d comment5.exe ansidecl.exe
	$(COMMENT5) realrand.d | $(ANSIDECL) > realrand.c

realtran.c : realtran.d comment5.exe ansidecl.exe
	$(COMMENT5) realtran.d | $(ANSIDECL) > realtran.c

compelem.c : compelem.d comment5.exe ansidecl.exe
	$(COMMENT5) compelem.d | $(ANSIDECL) > compelem.c

comptran.c : comptran.d comment5.exe ansidecl.exe
	$(COMMENT5) comptran.d | $(ANSIDECL) > comptran.c

arilev1c.c : arilev1c.d comment5.exe ansidecl.exe
	$(COMMENT5) arilev1c.d | $(ANSIDECL) > arilev1c.c

arilev1e.c : arilev1e.d comment5.exe ansidecl.exe
	$(COMMENT5) arilev1e.d | $(ANSIDECL) > arilev1e.c

arilev1i.c : arilev1i.d comment5.exe ansidecl.exe
	$(COMMENT5) arilev1i.d | $(ANSIDECL) > arilev1i.c

genclisph.c : genclisph.d comment5.exe ansidecl.exe
	$(COMMENT5) genclisph.d | $(ANSIDECL) > genclisph.c

modules.c : modules.d comment5.exe ansidecl.exe
	$(COMMENT5) modules.d | $(ANSIDECL) > modules.c

noreadline.c : noreadline.d comment5.exe ansidecl.exe
	$(COMMENT5) noreadline.d | $(ANSIDECL) > noreadline.c

ari80386.c : ari80386.d comment5.exe 
	$(COMMENT5) ari80386.d > ari80386.c

sp80386.c : sp80386.d comment5.exe 
	$(COMMENT5) sp80386.d > sp80386.c

allo : allc spvw.obj spvwtabf.obj spvwtabs.obj spvwtabo.obj eval.obj control.obj encoding.obj pathname.obj stream.obj socket.obj io.obj array.obj hashtabl.obj list.obj package.obj record.obj sequence.obj charstrg.obj debug.obj error.obj misc.obj time.obj predtype.obj symbol.obj lisparit.obj foreign.obj win32aux.obj

alls : allc spvw.s spvwtabf.s spvwtabs.s spvwtabo.s eval.s control.s encoding.s pathname.s stream.s socket.s io.s array.s hashtabl.s list.s package.s record.s sequence.s charstrg.s debug.s error.s misc.s time.s predtype.s symbol.s lisparit.s foreign.s win32aux.s

# Normally not used (just for debugging).
alli : allc spvw.i spvwtabf.i spvwtabs.i spvwtabo.i eval.i control.i encoding.i pathname.i stream.i socket.i io.i array.i hashtabl.i list.i package.i record.i sequence.i charstrg.i debug.i error.i misc.i time.i predtype.i symbol.i lisparit.i foreign.i win32aux.i

spvw.i : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigint.c spvw_sigwinch.c spvw_garcol.c spvw_genera1.c spvw_genera2.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_language.c spvw_memfile.c sort.c subrkw.c arilev0.c aridecl.c sigsegv.h version.h
	$(CPP) $(CFLAGS) spvw.c > spvw.i

spvw.s : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigint.c spvw_sigwinch.c spvw_garcol.c spvw_genera1.c spvw_genera2.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_language.c spvw_memfile.c sort.c subrkw.c arilev0.c aridecl.c sigsegv.h version.h
	$(CPP) $(CFLAGS) spvw.c > spvw.i.c
	$(CC) $(CFLAGS) -c spvw.i.c /FAs /Faspvw.s
	$(RM) spvw.i.obj
	$(RM) spvw.i.c

spvw.obj : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigint.c spvw_sigwinch.c spvw_garcol.c spvw_genera1.c spvw_genera2.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_language.c spvw_memfile.c sort.c subrkw.c arilev0.c aridecl.c sigsegv.h version.h
	$(CPP) $(CFLAGS) spvw.c > spvw.i.c
	$(CC) $(CFLAGS) -c spvw.i.c
	$(RM) spvw.obj
	$(MV) spvw.i.obj spvw.obj
	$(RM) spvw.i.c

spvwtabf.i : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabf.c > spvwtabf.i

spvwtabf.s : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabf.c > spvwtabf.i.c
	$(CC) $(CFLAGS) -c spvwtabf.i.c /FAs /Faspvwtabf.s
	$(RM) spvwtabf.i.obj
	$(RM) spvwtabf.i.c

spvwtabf.obj : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabf.c > spvwtabf.i.c
	$(CC) $(CFLAGS) -c spvwtabf.i.c
	$(RM) spvwtabf.obj
	$(MV) spvwtabf.i.obj spvwtabf.obj
	$(RM) spvwtabf.i.c

spvwtabs.i : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabs.c > spvwtabs.i

spvwtabs.s : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabs.c > spvwtabs.i.c
	$(CC) $(CFLAGS) -c spvwtabs.i.c /FAs /Faspvwtabs.s
	$(RM) spvwtabs.i.obj
	$(RM) spvwtabs.i.c

spvwtabs.obj : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabs.c > spvwtabs.i.c
	$(CC) $(CFLAGS) -c spvwtabs.i.c
	$(RM) spvwtabs.obj
	$(MV) spvwtabs.i.obj spvwtabs.obj
	$(RM) spvwtabs.i.c

spvwtabo.i : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabo.c > spvwtabo.i

spvwtabo.s : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabo.c > spvwtabo.i.c
	$(CC) $(CFLAGS) -c spvwtabo.i.c /FAs /Faspvwtabo.s
	$(RM) spvwtabo.i.obj
	$(RM) spvwtabo.i.c

spvwtabo.obj : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) spvwtabo.c > spvwtabo.i.c
	$(CC) $(CFLAGS) -c spvwtabo.i.c
	$(RM) spvwtabo.obj
	$(MV) spvwtabo.i.obj spvwtabo.obj
	$(RM) spvwtabo.i.c

eval.i : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c bytecode.c sigsegv.h
	$(CPP) $(CFLAGS) eval.c > eval.i

eval.s : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c bytecode.c sigsegv.h
	$(CPP) $(CFLAGS) eval.c > eval.i.c
	$(CC) $(CFLAGS) -c eval.i.c /FAs /Faeval.s
	$(RM) eval.i.obj
	$(RM) eval.i.c

eval.obj : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c bytecode.c sigsegv.h
	$(CPP) $(CFLAGS) eval.c > eval.i.c
	$(CC) $(CFLAGS) -c eval.i.c
	$(RM) eval.obj
	$(MV) eval.i.obj eval.obj
	$(RM) eval.i.c

control.i : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) control.c > control.i

control.s : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) control.c > control.i.c
	$(CC) $(CFLAGS) -c control.i.c /FAs /Facontrol.s
	$(RM) control.i.obj
	$(RM) control.i.c

control.obj : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) control.c > control.i.c
	$(CC) $(CFLAGS) -c control.i.c
	$(RM) control.obj
	$(MV) control.i.obj control.obj
	$(RM) control.i.c

encoding.i : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) encoding.c > encoding.i

encoding.s : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) encoding.c > encoding.i.c
	$(CC) $(CFLAGS) -c encoding.i.c /FAs /Faencoding.s
	$(RM) encoding.i.obj
	$(RM) encoding.i.c

encoding.obj : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) encoding.c > encoding.i.c
	$(CC) $(CFLAGS) -c encoding.i.c
	$(RM) encoding.obj
	$(MV) encoding.i.obj encoding.obj
	$(RM) encoding.i.c

pathname.i : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) pathname.c > pathname.i

pathname.s : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) pathname.c > pathname.i.c
	$(CC) $(CFLAGS) -c pathname.i.c /FAs /Fapathname.s
	$(RM) pathname.i.obj
	$(RM) pathname.i.c

pathname.obj : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) pathname.c > pathname.i.c
	$(CC) $(CFLAGS) -c pathname.i.c
	$(RM) pathname.obj
	$(MV) pathname.i.obj pathname.obj
	$(RM) pathname.i.c

stream.i : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) stream.c > stream.i

stream.s : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) stream.c > stream.i.c
	$(CC) $(CFLAGS) -c stream.i.c /FAs /Fastream.s
	$(RM) stream.i.obj
	$(RM) stream.i.c

stream.obj : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) stream.c > stream.i.c
	$(CC) $(CFLAGS) -c stream.i.c
	$(RM) stream.obj
	$(MV) stream.i.obj stream.obj
	$(RM) stream.i.c

socket.i : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) socket.c > socket.i

socket.s : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) socket.c > socket.i.c
	$(CC) $(CFLAGS) -c socket.i.c /FAs /Fasocket.s
	$(RM) socket.i.obj
	$(RM) socket.i.c

socket.obj : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) socket.c > socket.i.c
	$(CC) $(CFLAGS) -c socket.i.c
	$(RM) socket.obj
	$(MV) socket.i.obj socket.obj
	$(RM) socket.i.c

io.i : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) io.c > io.i

io.s : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) io.c > io.i.c
	$(CC) $(CFLAGS) -c io.i.c /FAs /Faio.s
	$(RM) io.i.obj
	$(RM) io.i.c

io.obj : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) io.c > io.i.c
	$(CC) $(CFLAGS) -c io.i.c
	$(RM) io.obj
	$(MV) io.i.obj io.obj
	$(RM) io.i.c

array.i : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) array.c > array.i

array.s : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) array.c > array.i.c
	$(CC) $(CFLAGS) -c array.i.c /FAs /Faarray.s
	$(RM) array.i.obj
	$(RM) array.i.c

array.obj : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) array.c > array.i.c
	$(CC) $(CFLAGS) -c array.i.c
	$(RM) array.obj
	$(MV) array.i.obj array.obj
	$(RM) array.i.c

hashtabl.i : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c aridecl.c sigsegv.h
	$(CPP) $(CFLAGS) hashtabl.c > hashtabl.i

hashtabl.s : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c aridecl.c sigsegv.h
	$(CPP) $(CFLAGS) hashtabl.c > hashtabl.i.c
	$(CC) $(CFLAGS) -c hashtabl.i.c /FAs /Fahashtabl.s
	$(RM) hashtabl.i.obj
	$(RM) hashtabl.i.c

hashtabl.obj : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c aridecl.c sigsegv.h
	$(CPP) $(CFLAGS) hashtabl.c > hashtabl.i.c
	$(CC) $(CFLAGS) -c hashtabl.i.c
	$(RM) hashtabl.obj
	$(MV) hashtabl.i.obj hashtabl.obj
	$(RM) hashtabl.i.c

list.i : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) list.c > list.i

list.s : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) list.c > list.i.c
	$(CC) $(CFLAGS) -c list.i.c /FAs /Falist.s
	$(RM) list.i.obj
	$(RM) list.i.c

list.obj : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) list.c > list.i.c
	$(CC) $(CFLAGS) -c list.i.c
	$(RM) list.obj
	$(MV) list.i.obj list.obj
	$(RM) list.i.c

package.i : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) package.c > package.i

package.s : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) package.c > package.i.c
	$(CC) $(CFLAGS) -c package.i.c /FAs /Fapackage.s
	$(RM) package.i.obj
	$(RM) package.i.c

package.obj : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c constpack.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) package.c > package.i.c
	$(CC) $(CFLAGS) -c package.i.c
	$(RM) package.obj
	$(MV) package.i.obj package.obj
	$(RM) package.i.c

record.i : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) record.c > record.i

record.s : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) record.c > record.i.c
	$(CC) $(CFLAGS) -c record.i.c /FAs /Farecord.s
	$(RM) record.i.obj
	$(RM) record.i.c

record.obj : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) record.c > record.i.c
	$(CC) $(CFLAGS) -c record.i.c
	$(RM) record.obj
	$(MV) record.i.obj record.obj
	$(RM) record.i.c

sequence.i : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) sequence.c > sequence.i

sequence.s : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) sequence.c > sequence.i.c
	$(CC) $(CFLAGS) -c sequence.i.c /FAs /Fasequence.s
	$(RM) sequence.i.obj
	$(RM) sequence.i.c

sequence.obj : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) sequence.c > sequence.i.c
	$(CC) $(CFLAGS) -c sequence.i.c
	$(RM) sequence.obj
	$(MV) sequence.i.obj sequence.obj
	$(RM) sequence.i.c

charstrg.i : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) charstrg.c > charstrg.i

charstrg.s : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) charstrg.c > charstrg.i.c
	$(CC) $(CFLAGS) -c charstrg.i.c /FAs /Facharstrg.s
	$(RM) charstrg.i.obj
	$(RM) charstrg.i.c

charstrg.obj : charstrg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) charstrg.c > charstrg.i.c
	$(CC) $(CFLAGS) -c charstrg.i.c
	$(RM) charstrg.obj
	$(MV) charstrg.i.obj charstrg.obj
	$(RM) charstrg.i.c

debug.i : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) debug.c > debug.i

debug.s : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) debug.c > debug.i.c
	$(CC) $(CFLAGS) -c debug.i.c /FAs /Fadebug.s
	$(RM) debug.i.obj
	$(RM) debug.i.c

debug.obj : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) debug.c > debug.i.c
	$(CC) $(CFLAGS) -c debug.i.c
	$(RM) debug.obj
	$(MV) debug.i.obj debug.obj
	$(RM) debug.i.c

error.i : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c errwin32.c sigsegv.h
	$(CPP) $(CFLAGS) error.c > error.i

error.s : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c errwin32.c sigsegv.h
	$(CPP) $(CFLAGS) error.c > error.i.c
	$(CC) $(CFLAGS) -c error.i.c /FAs /Faerror.s
	$(RM) error.i.obj
	$(RM) error.i.c

error.obj : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c errwin32.c sigsegv.h
	$(CPP) $(CFLAGS) error.c > error.i.c
	$(CC) $(CFLAGS) -c error.i.c
	$(RM) error.obj
	$(MV) error.i.obj error.obj
	$(RM) error.i.c

misc.i : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) misc.c > misc.i

misc.s : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) misc.c > misc.i.c
	$(CC) $(CFLAGS) -c misc.i.c /FAs /Famisc.s
	$(RM) misc.i.obj
	$(RM) misc.i.c

misc.obj : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) misc.c > misc.i.c
	$(CC) $(CFLAGS) -c misc.i.c
	$(RM) misc.obj
	$(MV) misc.i.obj misc.obj
	$(RM) misc.i.c

time.i : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) time.c > time.i

time.s : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) time.c > time.i.c
	$(CC) $(CFLAGS) -c time.i.c /FAs /Fatime.s
	$(RM) time.i.obj
	$(RM) time.i.c

time.obj : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) time.c > time.i.c
	$(CC) $(CFLAGS) -c time.i.c
	$(RM) time.obj
	$(MV) time.i.obj time.obj
	$(RM) time.i.c

predtype.i : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c avl.c sigsegv.h
	$(CPP) $(CFLAGS) predtype.c > predtype.i

predtype.s : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c avl.c sigsegv.h
	$(CPP) $(CFLAGS) predtype.c > predtype.i.c
	$(CC) $(CFLAGS) -c predtype.i.c /FAs /Fapredtype.s
	$(RM) predtype.i.obj
	$(RM) predtype.i.c

predtype.obj : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c avl.c sigsegv.h
	$(CPP) $(CFLAGS) predtype.c > predtype.i.c
	$(CC) $(CFLAGS) -c predtype.i.c
	$(RM) predtype.obj
	$(MV) predtype.i.obj predtype.obj
	$(RM) predtype.i.c

symbol.i : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) symbol.c > symbol.i

symbol.s : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) symbol.c > symbol.i.c
	$(CC) $(CFLAGS) -c symbol.i.c /FAs /Fasymbol.s
	$(RM) symbol.i.obj
	$(RM) symbol.i.c

symbol.obj : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) symbol.c > symbol.i.c
	$(CC) $(CFLAGS) -c symbol.i.c
	$(RM) symbol.obj
	$(MV) symbol.i.obj symbol.obj
	$(RM) symbol.i.c

lisparit.i : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c sigsegv.h
	$(CPP) $(CFLAGS) lisparit.c > lisparit.i

lisparit.s : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c sigsegv.h
	$(CPP) $(CFLAGS) lisparit.c > lisparit.i.c
	$(CC) $(CFLAGS) -c lisparit.i.c /FAs /Falisparit.s
	$(RM) lisparit.i.obj
	$(RM) lisparit.i.c

lisparit.obj : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c sigsegv.h
	$(CPP) $(CFLAGS) lisparit.c > lisparit.i.c
	$(CC) $(CFLAGS) -c lisparit.i.c
	$(RM) lisparit.obj
	$(MV) lisparit.i.obj lisparit.obj
	$(RM) lisparit.i.c

foreign.i : foreign.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) -I../ffcall foreign.c > foreign.i

foreign.s : foreign.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) -I../ffcall foreign.c > foreign.i.c
	$(CC) $(CFLAGS) -I../ffcall -c foreign.i.c /FAs /Faforeign.s
	$(RM) foreign.i.obj
	$(RM) foreign.i.c

foreign.obj : foreign.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c arilev0.c sigsegv.h
	$(CPP) $(CFLAGS) -I../ffcall foreign.c > foreign.i.c
	$(CC) $(CFLAGS) -I../ffcall -c foreign.i.c
	$(RM) foreign.obj
	$(MV) foreign.i.obj foreign.obj
	$(RM) foreign.i.c

win32aux.i : win32aux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) win32aux.c > win32aux.i

win32aux.s : win32aux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) win32aux.c > win32aux.i.c
	$(CC) $(CFLAGS) -c win32aux.i.c /FAs /Fawin32aux.s
	$(RM) win32aux.i.obj
	$(RM) win32aux.i.c

win32aux.obj : win32aux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) win32aux.c > win32aux.i.c
	$(CC) $(CFLAGS) -c win32aux.i.c
	$(RM) win32aux.obj
	$(MV) win32aux.i.obj win32aux.obj
	$(RM) win32aux.i.c

genclisph.i : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) genclisph.c > genclisph.i

genclisph.s : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) genclisph.c > genclisph.i.c
	$(CC) $(CFLAGS) -c genclisph.i.c /FAs /Fagenclisph.s
	$(RM) genclisph.i.obj
	$(RM) genclisph.i.c

genclisph.obj : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) genclisph.c > genclisph.i.c
	$(CC) $(CFLAGS) -c genclisph.i.c
	$(RM) genclisph.obj
	$(MV) genclisph.i.obj genclisph.obj
	$(RM) genclisph.i.c

modules.i : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h modules.h
	$(CPP) $(CFLAGS) -DNO_CLISP_H modules.c > modules.i

modules.s : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h modules.h
	$(CPP) $(CFLAGS) -DNO_CLISP_H modules.c > modules.i.c
	$(CC) $(CFLAGS) -DNO_CLISP_H -c modules.i.c /FAs /Famodules.s
	$(RM) modules.i.obj
	$(RM) modules.i.c

modules.obj : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h modules.h
	$(CPP) $(CFLAGS) -DNO_CLISP_H modules.c > modules.i.c
	$(CC) $(CFLAGS) -DNO_CLISP_H -c modules.i.c
	$(RM) modules.obj
	$(MV) modules.i.obj modules.obj
	$(RM) modules.i.c

noreadline.i : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) noreadline.c > noreadline.i

noreadline.s : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) noreadline.c > noreadline.i.c
	$(CC) $(CFLAGS) -c noreadline.i.c /FAs /Fanoreadline.s
	$(RM) noreadline.i.obj
	$(RM) noreadline.i.c

noreadline.obj : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h
	$(CPP) $(CFLAGS) noreadline.c > noreadline.i.c
	$(CC) $(CFLAGS) -c noreadline.i.c
	$(RM) noreadline.obj
	$(MV) noreadline.i.obj noreadline.obj
	$(RM) noreadline.i.c

ari80386.i : ari80386.msvc.c
	$(CPP) $(CFLAGS) ari80386.msvc.c > ari80386.i

ari80386.s : ari80386.msvc.c
	$(CPP) $(CFLAGS) ari80386.msvc.c > ari80386.i.c
	$(CC) $(CFLAGS) -c ari80386.i.c /FAs /Faari80386.s
	$(RM) ari80386.i.obj
	$(RM) ari80386.i.c

ari80386.obj : ari80386.msvc.c
	$(CPP) $(CFLAGS) ari80386.msvc.c > ari80386.i.c
	$(CC) $(CFLAGS) -c ari80386.i.c
	$(RM) ari80386.obj
	$(MV) ari80386.i.obj ari80386.obj
	$(RM) ari80386.i.c

sp80386.i : sp80386.msvc.c
	$(CPP) $(CFLAGS) sp80386.msvc.c > sp80386.i

sp80386.s : sp80386.msvc.c
	$(CPP) $(CFLAGS) sp80386.msvc.c > sp80386.i.c
	$(CC) $(CFLAGS) -c sp80386.i.c /FAs /Fasp80386.s
	$(RM) sp80386.i.obj
	$(RM) sp80386.i.c

sp80386.obj : sp80386.msvc.c
	$(CPP) $(CFLAGS) sp80386.msvc.c > sp80386.i.c
	$(CC) $(CFLAGS) -c sp80386.i.c
	$(RM) sp80386.obj
	$(MV) sp80386.i.obj sp80386.obj
	$(RM) sp80386.i.c

avcall.lib : ..\ffcall\avcall\avcall.lib
	-$(LN) ..\ffcall\avcall\avcall.lib avcall.lib

callback.lib : ..\ffcall\callback\callback.lib
	-$(LN) ..\ffcall\callback\callback.lib callback.lib

sigsegv.h : ..\sigsegv\sigsegv.h
	-$(LN) ..\sigsegv\sigsegv.h sigsegv.h

sigsegv.lib : ..\sigsegv\sigsegv.lib
	-$(LN) ..\sigsegv\sigsegv.lib sigsegv.lib

lisp.exe : $(OBJECTS) modules.obj avcall.lib callback.lib    sigsegv.lib
	$(RM) lisp.ilk
	$(CC) $(CFLAGS) $(CLFLAGS) /MD $(OBJECTS) modules.obj $(LIBS) $(X_LIBS) /link /out:lisp.exe
	editbin /stack:2097152 lisp.exe


alllsp : $(LSPFILES)

config.lsp : cfgwin32.lsp
	$(CP) cfgwin32.lsp config.lsp

interpreted.mem : lisp.exe $(LSPFILES)
	-$(RM) interpreted.mem
	lisp.exe -m 750KW -norc -x "(load \"init.lsp\") (sys::%%saveinitmem) (exit)"
	$(MV) lispimag.mem interpreted.mem

init.fas : init.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c init.lsp

defseq.fas : defseq.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defseq.lsp

backquot.fas : backquot.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c backquot.lsp

defmacro.fas : defmacro.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defmacro.lsp

macros1.fas : macros1.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c macros1.lsp

macros2.fas : macros2.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c macros2.lsp

defs1.fas : defs1.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defs1.lsp

timezone.fas : timezone.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c timezone.lsp

places.fas : places.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c places.lsp

floatpri.fas : floatpri.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c floatpri.lsp

type.fas : type.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c type.lsp

defstruc.fas : defstruc.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defstruc.lsp

format.fas : format.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c format.lsp

savemem.fas : savemem.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c savemem.lsp

trace.fas : trace.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c trace.lsp

compiler.fas : compiler.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c compiler.lsp

disassem.fas : disassem.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c disassem.lsp

defs2.fas : defs2.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defs2.lsp

loop.fas : loop.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c loop.lsp

clos.fas : clos.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c clos.lsp

conditio.fas : conditio.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c conditio.lsp

gstream.fas : gstream.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c gstream.lsp

xcharin.fas : xcharin.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c xcharin.lsp

keyboard.fas : keyboard.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c keyboard.lsp

screen.fas : screen.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c screen.lsp

runprog.fas : runprog.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c runprog.lsp

query.fas : query.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c query.lsp

reploop.fas : reploop.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c reploop.lsp

dribble.fas : dribble.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c dribble.lsp

complete.fas : complete.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c complete.lsp

describe.fas : describe.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c describe.lsp

room.fas : room.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c room.lsp

edit.fas : edit.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c edit.lsp

macros3.fas : macros3.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c macros3.lsp

foreign1.fas : foreign1.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c foreign1.lsp

defs3.fas : defs3.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c defs3.lsp

spanish.fas : spanish.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c spanish.lsp

config.fas : config.lsp lisp.exe interpreted.mem
	lisp.exe -m 1000KW -M interpreted.mem -norc -q -c config.lsp

halfcompiled.mem : lisp.exe $(LSPFILES) compiler.fas
	-$(RM) interpreted.mem
	lisp.exe -m 750KW -norc -x "(load \"init.lsp\") (sys::%%saveinitmem) (exit)"
	$(MV) lispimag.mem interpreted.mem
	$(TOUCH) interpreted.mem
	$(TOUCH) compiler.fas
	$(TOUCH) halfcompiled.mem

lispinit.mem : lisp.exe $(FASFILES)
	-$(RM) lispinit.mem
	lisp.exe -norc -x "(load \"init.fas\") (sys::%%saveinitmem) (exit)"
	$(MV) lispimag.mem lispinit.mem


# Perform self-tests.
check : test

# Test: recompile $(LSPFILES) and compare their contents.
test : lispinit.mem stage $(TESTLSPFILES) $(TESTFASFILES)
	comp *.fas stage
	REM The test passed if no differences were found.

stage :
	-mkdir stage

stage\init.lsp : init.lsp
	$(LN) init.lsp stage

stage\defseq.lsp : defseq.lsp
	$(LN) defseq.lsp stage

stage\backquot.lsp : backquot.lsp
	$(LN) backquot.lsp stage

stage\defmacro.lsp : defmacro.lsp
	$(LN) defmacro.lsp stage

stage\macros1.lsp : macros1.lsp
	$(LN) macros1.lsp stage

stage\macros2.lsp : macros2.lsp
	$(LN) macros2.lsp stage

stage\defs1.lsp : defs1.lsp
	$(LN) defs1.lsp stage

stage\timezone.lsp : timezone.lsp
	$(LN) timezone.lsp stage

stage\places.lsp : places.lsp
	$(LN) places.lsp stage

stage\floatpri.lsp : floatpri.lsp
	$(LN) floatpri.lsp stage

stage\type.lsp : type.lsp
	$(LN) type.lsp stage

stage\defstruc.lsp : defstruc.lsp
	$(LN) defstruc.lsp stage

stage\format.lsp : format.lsp
	$(LN) format.lsp stage

stage\savemem.lsp : savemem.lsp
	$(LN) savemem.lsp stage

stage\trace.lsp : trace.lsp
	$(LN) trace.lsp stage

stage\compiler.lsp : compiler.lsp
	$(LN) compiler.lsp stage

stage\disassem.lsp : disassem.lsp
	$(LN) disassem.lsp stage

stage\defs2.lsp : defs2.lsp
	$(LN) defs2.lsp stage

stage\loop.lsp : loop.lsp
	$(LN) loop.lsp stage

stage\clos.lsp : clos.lsp
	$(LN) clos.lsp stage

stage\conditio.lsp : conditio.lsp
	$(LN) conditio.lsp stage

stage\gstream.lsp : gstream.lsp
	$(LN) gstream.lsp stage

stage\xcharin.lsp : xcharin.lsp
	$(LN) xcharin.lsp stage

stage\keyboard.lsp : keyboard.lsp
	$(LN) keyboard.lsp stage

stage\screen.lsp : screen.lsp
	$(LN) screen.lsp stage

stage\runprog.lsp : runprog.lsp
	$(LN) runprog.lsp stage

stage\query.lsp : query.lsp
	$(LN) query.lsp stage

stage\reploop.lsp : reploop.lsp
	$(LN) reploop.lsp stage

stage\dribble.lsp : dribble.lsp
	$(LN) dribble.lsp stage

stage\complete.lsp : complete.lsp
	$(LN) complete.lsp stage

stage\describe.lsp : describe.lsp
	$(LN) describe.lsp stage

stage\room.lsp : room.lsp
	$(LN) room.lsp stage

stage\edit.lsp : edit.lsp
	$(LN) edit.lsp stage

stage\macros3.lsp : macros3.lsp
	$(LN) macros3.lsp stage

stage\foreign1.lsp : foreign1.lsp
	$(LN) foreign1.lsp stage

stage\defs3.lsp : defs3.lsp
	$(LN) defs3.lsp stage

stage\spanish.lsp : spanish.lsp
	$(LN) spanish.lsp stage

stage\config.lsp : config.lsp
	$(LN) config.lsp stage

stage\init.fas : stage\init.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/init.lsp

stage\defseq.fas : stage\defseq.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defseq.lsp

stage\backquot.fas : stage\backquot.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/backquot.lsp

stage\defmacro.fas : stage\defmacro.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defmacro.lsp

stage\macros1.fas : stage\macros1.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/macros1.lsp

stage\macros2.fas : stage\macros2.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/macros2.lsp

stage\defs1.fas : stage\defs1.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defs1.lsp

stage\timezone.fas : stage\timezone.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/timezone.lsp

stage\places.fas : stage\places.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/places.lsp

stage\floatpri.fas : stage\floatpri.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/floatpri.lsp

stage\type.fas : stage\type.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/type.lsp

stage\defstruc.fas : stage\defstruc.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defstruc.lsp

stage\format.fas : stage\format.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/format.lsp

stage\savemem.fas : stage\savemem.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/savemem.lsp

stage\trace.fas : stage\trace.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/trace.lsp

stage\compiler.fas : stage\compiler.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/compiler.lsp

stage\disassem.fas : stage\disassem.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/disassem.lsp

stage\defs2.fas : stage\defs2.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defs2.lsp

stage\loop.fas : stage\loop.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/loop.lsp

stage\clos.fas : stage\clos.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/clos.lsp

stage\conditio.fas : stage\conditio.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/conditio.lsp

stage\gstream.fas : stage\gstream.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/gstream.lsp

stage\xcharin.fas : stage\xcharin.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/xcharin.lsp

stage\keyboard.fas : stage\keyboard.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/keyboard.lsp

stage\screen.fas : stage\screen.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/screen.lsp

stage\runprog.fas : stage\runprog.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/runprog.lsp

stage\query.fas : stage\query.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/query.lsp

stage\reploop.fas : stage\reploop.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/reploop.lsp

stage\dribble.fas : stage\dribble.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/dribble.lsp

stage\complete.fas : stage\complete.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/complete.lsp

stage\describe.fas : stage\describe.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/describe.lsp

stage\room.fas : stage\room.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/room.lsp

stage\edit.fas : stage\edit.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/edit.lsp

stage\macros3.fas : stage\macros3.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/macros3.lsp

stage\foreign1.fas : stage\foreign1.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/foreign1.lsp

stage\defs3.fas : stage\defs3.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/defs3.lsp

stage\spanish.fas : stage\spanish.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/spanish.lsp

stage\config.fas : stage\config.lsp lisp.exe lispinit.mem
	lisp.exe -M lispinit.mem -norc -q -c stage/config.lsp

lispinit2.mem : lisp.exe $(TESTFASFILES)
	lisp.exe -norc -x "(cd \"stage/\") (load \"init.fas\") (cd \"../\") (sys::%%saveinitmem) (exit)"
	-$(RM) lispinit2.mem
	$(MV) lispimag.mem lispinit2.mem


READMES = ANNOUNCE COPYRIGHT GNU-GPL SUMMARY NEWS README README.de README.en README.es
MANUALS = clisp.1 clisp.html $(TXTFILES) impnotes.html clisp.gif

impnotes.html: _impnotes.html
	sed -e 's,<HS>,http://www.harlequin.com/education/books/HyperSpec,' _impnotes.html > impnotes.html

manual : $(READMES) $(MANUALS)

manualx : manual clisp.man

ANNOUNCE : ..\ANNOUNCE
	-$(LN) ..\ANNOUNCE ANNOUNCE

COPYRIGHT : ..\COPYRIGHT
	-$(LN) ..\COPYRIGHT COPYRIGHT

GNU-GPL : ..\GNU-GPL
	-$(LN) ..\GNU-GPL GNU-GPL

SUMMARY : ..\SUMMARY
	-$(LN) ..\SUMMARY SUMMARY

README : _README lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h _README.de _README.en txt2c.exe
	$(TXT2C) < _README > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > README
	$(RM) txt.c
	$(RM) txt.exe

README.de : _README.de lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h txt2c.exe
	$(TXT2C) < _README.de > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > README.de
	$(RM) txt.c
	$(RM) txt.exe

README.en : _README.en lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h txt2c.exe
	$(TXT2C) < _README.en > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > README.en
	$(RM) txt.c
	$(RM) txt.exe

README.es : _README.es lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h txt2c.exe
	$(TXT2C) < _README.es > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > README.es
	$(RM) txt.c
	$(RM) txt.exe

clisp.1 : _clisp.1 lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h txt2c.exe
	$(TXT2C) < _clisp.1 > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > clisp.1
	$(RM) txt.c
	$(RM) txt.exe

clisp.html : _clisp.html lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c win32.c xthread.c sigsegv.h txt2c.exe
	$(TXT2C) < _clisp.html > txt.c
	$(CPP) $(CFLAGS) txt.c > txt.i.c
	$(CC) $(CFLAGS) $(CLFLAGS) txt.i.c /Fetxt.exe
	$(RM) txt.i.c
	$(RM) txt.i.obj
	txt > clisp.html
	$(RM) txt.c
	$(RM) txt.exe

clisp.man : clisp.1
	$(ROFF_MAN) clisp.1 > clisp.man

clisp.dvi : clisp.1
	$(ROFF_DVI) clisp.1 > clisp.dvi

LISP-tutorial.txt : ..\doc\LISP-tutorial.txt
	-$(LN) ..\doc\LISP-tutorial.txt LISP-tutorial.txt

CLOS-guide.txt : ..\doc\CLOS-guide.txt
	-$(LN) ..\doc\CLOS-guide.txt CLOS-guide.txt

editors.txt : ..\doc\editors.txt
	-$(LN) ..\doc\editors.txt editors.txt


# Distribution, to be executed on the NFS host (a Unix host).
distrib : force
	nroff -man clisp.1 > clisp.man
	version=`cat VERSION` ; \
	distdir=clisp-$$version ; \
	distfile=/tmp/clisp-win32.zip ; \
	mkdir $$distdir ; \
	for f in ANNOUNCE COPYRIGHT GNU-GPL SUMMARY NEWS README README.de README.es ; do \
	  if test -f $$f ; then cp -p $$f $$distdir/$$f ; else cp -p `echo $$f | tr '[A-Z]' '[a-z]'` $$distdir/$$f ; fi ; \
	done ; \
	for f in lisp.exe lispinit.mem ; do \
	  cp -p $$f $$distdir/$$f ; \
	done ; \
	mkdir $$distdir/doc ; \
	for f in clisp.1 clisp.man clisp.html $(TXTFILES) impnotes.html clisp.gif ; do \
	  if test -f $$f ; then cp -p $$f $$distdir/doc/$$f ; else cp -p `echo $$f | tr '[A-Z]' '[a-z]'` $$distdir/doc/$$f ; fi ; \
	done ; \
	mkdir $$distdir/emacs ; \
	cp -p ../emacs/*.el $$distdir/emacs/ ; \
	mkdir $$distdir/src ; \
	cp -p $(LSPFILES) $$distdir/src/ ; \
	chmod 755 $$distdir/. $$distdir/*/. ; \
	chmod 644 `find $$distdir -type f -print` ; \
	rm -f $$distfile ; \
	(echo "CLISP version $$version for Win32."; echo ".") | zip -r -9 -z $$distfile $$distdir ; \
	rm -rf $$distdir

# clean0 is harmless: removes only superfluous things: temporary files.
clean0 : force
	-$(RM) core ansidecl.c ccmp2c.c modprep.c genclisph.exe wgenclisph.exe linkkit txt.c txt.exe txt.i.c

# clean1 removes everything that becomes obsolete once lisp.exe is recompiled
# without changing the bytecode format and the tables in
# constobj.d, constpack.d, constsym.d, subr.d, fsubr.d, pseudofun.d.
clean1 : clean0
	-$(RM) lispbibl.h wlispbibl.h clisp.h *.i *.s *.obj *.a lisp.exe wlisp.exe clisp-link makevars stage/* suite/* wstage/* wsuite/*
	-rmdir stage
	-rmdir suite
	-rmdir wstage
	-rmdir wsuite
	-$(RM) README README.de README.en README.es clisp.1 clisp.man clisp.html impnotes.html clisp.c distmakefile $(TXTFILES) clreadline.3 clreadline.man clreadline.html clreadline.dvi readline.dvi

# clean2 removes everything that becomes obsolete once lisp.exe is recompiled
# without changing the bytecode format.
clean2 : clean1
	-$(RM) interpreted.mem halfcompiled.mem lispinit.mem lispinit2.mem wlispinit.mem wlispinit2.mem

# clean3 removes everything that becomes obsolete once lisp.exe is recompiled.
# It leaves everything generated by "make allc".
clean3 : clean2
	-$(RM) $(FASFILES) *.lib

# clean4 removes everything that becomes obsolete
# when switching to a new version of the C compiler.
# It leaves everything generated by "make init".
clean4 : clean3
	-$(RM) $(CFILES)

# clean5 even undoes "make init".
clean5 : clean4
	-$(RM) config.lsp
	-$(RM) comment5.exe ansidecl.exe ccpaux.exe deema.exe txt2c.exe

# clean6 lets us go back to "makemake > Makefile".
clean6 : clean5
	-$(RM) Makefile

# clean7 lets us go back to the main "configure".
clean7 : clean6
	-$(RM) config.status config.log config.cache intparam.h unixconf.h makemake

# clean8 moreover cleans up the SRCDIR.
clean8 : clean7

# The normal "start over" command:
mostlyclean : clean4

# Clear all files that are built by "make ...":
clean : clean5

# Make "clear for distribution":
distclean : clean7

# Remove everything that can be generated otherwise:
maintainer-clean : clean8


.SUFFIXES:

force:

