2004-08-27  Bruno Haible  <bruno@clisp.org>

	* spvw.d (main): Change the SIZE_ARG macro such that too high values
	generate a warning, not an error.

2004-08-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Support TYPECODES_1 on Darwin/PowerPC.

2004-08-26  Bruno Haible  <bruno@clisp.org>

	* init.lisp (format): Allow the control-string to be a function. Needed
	for bootstrapping halfcompiled.mem: when the .fas files are loaded, the
	compiler has already transformed control-strings to functions.

2004-08-26  Bruno Haible  <bruno@clisp.org>

	Avoid a crash when using a hash-table as hash-table key in TYPECODES
	mode.
	* hashtabl.d (hashcode4_atom): Handle case_machine, case_subr,
	case_system.
	Found by the sacla-tests on MacOS X.

2004-08-26  Bruno Haible  <bruno@clisp.org>

	Avoid link error when compiling without optimization.
	* makemake.in (clisp.h): Define COMPILE_STANDALONE also when using
	<clisp.h>.
	* genclisph.d (main): Wrap check_list and posfixnum_default2 in #ifndef
	COMPILE_STANDALONE.

2004-08-25  Bruno Haible  <bruno@clisp.org>

	* clos-class6.lisp (initialize-instance@class): Avoid compiler warning.
	* clos-methcomb2.lisp (make-method): Avoid compiler warning.

2004-08-26  Bruno Haible  <bruno@clisp.org>

	Make instance_of_stablehash_p work during bootstrapping.
	* clos-class0.lisp (*dummy-class*): New variable.
	(make-class-version): Use it as default.

2004-08-24  Bruno Haible  <bruno@clisp.org>

	Update ISO-8859-7 converter to version 2003.
	* nls_iso8859_7.c (charset2uni, page03, page20): Add new mappings for
	0xA4, 0xA5, 0xAA.

2004-06-24  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (finalize-fast-gf, gf-never-called-p,
	compute-dispatch, compute-applicable-methods-effective-method,
	compute-applicable-methods-<standard-generic-function>,
	compute-applicable-methods-using-classes-<standard-generic-function>):
	Handle the case that the generic-function's lambda-list is not yet
	initialized.
	* clos-genfun3.lisp (gf-lambdalist-from-first-method): New function.
	(std-add-method, std-find-method): Handle the case that the
	generic-function's lambda-list is not yet initialized.
	(do-defmethod): Use gf-lambdalist-from-first-method.
	* clos-genfun4.lisp (no-applicable-method, missing-required-method,
	no-primary-method): Handle the case that the generic-function's
	lambda-list is not yet initialized.
	* clos-method2.lisp (analyze-method-description): Likewise.
	* describe.lisp (describe-object@generic-function): Likewise.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (finalize-fast-gf, gf-never-called-p): Use a
	prototype-factory-table instead of just a prototype-table. Use
	set-funcallable-instance-function.

2004-08-27  Sam Steingold  <sds@gnu.org>

	* makemake.in (full-check): pass "-E utf-8" to clisp;
	find tests.lisp in ${TESTSDIR}

2004-06-24  Bruno Haible  <bruno@clisp.org>

	* clos-class3.lisp (defclass): Check that the :READER and :ACCESSOR
	argument is a really a non-nil symbol.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	* clos-genfun3.lisp: Add the contents of clos-genfun4.lisp.
	* clos-genfun4.lisp: Move into clos-genfun3.lisp.
	* clos-genfun4.lisp: Renamed from clos-genfun5.lisp.
	* clos-genfun5.lisp: Renamed from clos-genfun6.lisp.
	* clos.lisp: Update.
	* makemake.in (LPARTS): Remove clos-genfun6.
	* po/Makefile.devel (LISPSOURCES): Likewise.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	Simplify handling of generic-function docstring.
	* clos-genfun2.lisp (%make-gf): Add documentation argument.
	(make-fast-gf): Likewise.
	* clos-genfun3.lisp (do-defmethod): Update.
	(defgeneric): Pass documentation string to do-defgeneric, instead of
	calling SYSTEM::%SET-DOCUMENTATION.
	(ensure-generic): Update.
	* clos-genfun4.lisp (make-generic-function, do-defgeneric): Accept
	documentation argument.
	(make-generic-function-form): Pass the docstring to
	make-generic-function.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	Implement the :declarations, :declare option.
	* clos-genfun2.lisp (check-gf-declspecs): New function.
	(shared-initialize-<standard-generic-function>): Accept option :declare
	as well.
	(initialize-instance-<standard-generic-function>): Likewise.
	(make-instance-<standard-generic-function>): Likewise.
	(%make-gf, make-fast-gf): Add declspecs argument.
	(compute-discriminating-function-<standard-generic-function>): Use the
	generic-function's declspecs for optimizing the dispatch code.
	* clos-genfun3.lisp (do-defmethod): Update.
	(analyze-defgeneric): Check the DECLARE option using check-gf-declspecs
	and return the declspecs as an additional value.
	(defgeneric): Pass the declspecs to do-defgeneric.
	(ensure-generic-function): Superficially fix completely broken code.
	* clos-genfun4.lisp (make-generic-function, do-defgeneric): Accept
	additional declspecs argument.
	(make-generic-function-form): Update.
	* clos-genfun5.lisp (shared-initialize@standard-generic-function):
	Accept option :declare as well.

2004-08-25  Bruno Haible  <bruno@clisp.org>

	* m4/libtool.m4: Upgrade to libtool-1.5.6.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* spvw_garcol.d (gc_sweep1_varobject_page): Reallocate also
	funcallable-standard-object instances.
	* spvw_update.d (do_update_sxrecord): Clear the forward-pointers bits
	also of funcallable-standard-object instances.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export compute-discriminating-function.
	* clos-package.lisp: Likewise.
	* clos-genfun2.lisp (compute-discriminating-function,
	compute-discriminating-function-<standard-generic-function>): New
	functions.
	(install-dispatch): Call compute-discriminating-function.
	* clos-genfun5.lisp (compute-discriminating-function): New generic
	function.
	* clos-methcomb2.lisp (compute-effective-method-as-function-form): Make
	an exception for #'compute-discriminating-function.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (install-dispatch): Use
	set-funcallable-instance-function.

2004-08-24  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp (*expected-failures*): Many new failures to be
	revisited.

2004-08-24  Bruno Haible  <bruno@clisp.org>

	* constobj.d (printstring_closure, printstring_compiled_closure): Use
	the term FUNCTION instead of CLOSURE.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	Implement the :generic-function-class option.
	* clos-genfun2.lisp (make-generic-function-instance): New function.
	(%make-gf, make-fast-gf): Accept a generic-function-class argument.
	* clos-genfun3.lisp (do-defmethod): Update.
	(analyze-defgeneric): Return also a generic-function-class-form value.
	(defgeneric): Pass the generic-function-class to do-defgeneric.
	(ensure-generic-function): Likewise.
	* clos-genfun4.lisp (make-generic-function): Accept a
	generic-function-class argument.
	(do-defgeneric): Likewise. Call change-class if the old generic
	function's class is different.
	(make-generic-function-form): Update.
	* clos-genfun6.lisp (make-generic-function-instance): Replace with
	make-instance.

2004-08-23  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c (PCRE-EXEC): allocate ovector of proper size

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* record.d (CLOS:STANDARD-INSTANCE-ACCESS,
	(SETF CLOS:STANDARD-INSTANCE-ACCESS)): New functions.
	* init.lisp: Export standard-instance-access.
	* clos-package.lisp: Likewise.
	* places.lisp (clos:standard-instance-access): Define setf function.
	* clos-stablehash1.lisp (shared-initialize-<standard-stablehash>):
	Use standard-instance-access instead of sys::%record-ref.
	* clos-class3.lisp (install-class-direct-accessors): Likewise.
	* clos-slots1.lisp (funcallable-standard-instance-access): New
	function.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (make-method-instance): New function.
	* clos-method4.lisp (make-method-instance): Replace with make-instance.
	* clos-methcomb2.lisp (effective-method-code-bricks): Use
	make-method-instance instead of make-instance-<standard-method>.
	* clos-genfun3.lisp (do-defmethod, analyze-defgeneric): Likewise.

2004-08-22  Bruno Haible  <bruno@clisp.org>

	* constobj.d: Make O(terminal_encoding) also available if !UNICODE.
	* encoding.d (init_dependent_encodings): Initialize it.
	* stream.d (make_keyboard_stream, make_terminal_stream_,
	SCREEN:MAKE-WINDOW): Install O(terminal_encoding) as the stream's
	encoding also if !UNICODE.
	Fixes a bug introduced on 2004-05-21.
	Reported by Michael Livshin <clisp@cmm.kakpryg.net>.

2004-08-22  Bruno Haible  <bruno@clisp.org>

	* makemake.in: Change the handling of --with and --without options to
	be like in GNU autoconf. Put the default of each with_* flag in one
	place, not at each use of the variable.
	* clisp-link.in: Update.

2004-08-21  Bruno Haible  <bruno@clisp.org>

	Add a slot to the SOURCE-PROGRAM-ERROR condition.
	* control.d (MACROLET, SYSTEM::FUNCTION-MACRO-LET): Pass one more
	argument to sys::make-macro-expander.
	* error.d (end_error): Pass :DETAIL instead of :FORM.
	* init.lisp: Export ext:source-program-error-detail.
	(%uncompilable): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	(%whole-form): Proclaim special.
	(%expand-form): Bind %whole-form. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(%expand-list, %expand-lambda, %expand-lambdalist, %expand-varspez,
	%expand-varspez*, %expand-fundefs-1, %expand-funmacdefs-1): Pass both
	:FORM and :DETAIL when signalling a source-program-error.
	(defun, do): Likewise.
	(defmacro): Pass whole form to sys::make-macro-expansion.
	* defmacro.lisp (macro-call-error): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(%whole-form): Proclaim special.
	(analyze-aux, get-supplied-p, analyze-rest): Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(empty-pattern): Add 'wholevar' argument. Pass both :FORM and :DETAIL
	when signalling a source-program-error.
	(analyze1, remove-env-arg): Expect %whole-var to be bound. Pass both
	:FORM and :DETAIL when signalling a source-program-error.
	(make-macro-expansion): Add 'whole' argument. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(make-macro-expander): Add 'whole' argument.
	* macros1.lisp (defmacro-special): Pass whole form to
	make-macro-expansion.
	(defvar, defparameter, defconstant): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(do/do*-expand): Add 'whole' argument. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(do, do*): Update.
	(psetq): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	(case-expand): Add 'whole' argument. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(fcase, case): Update.
	(cond): Pass whole form to ifify.
	(ifify): Add 'whole' argument. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	* macros2.lisp (typecase): Pass both :FORM and :DETAIL when signalling
	a source-program-error.
	(deftype): Likewise. Bind %whole-form for analyze1.
	(define-symbol-macro): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	* defs1.lisp (with-package-iterator): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	* places.lisp (get-setf-expansion, get-setf-method): Pass both :FORM
	and :DETAIL when signalling a source-program-error.
	(check-accessor-name): Add 'whole' argument. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(define-setf-expander): Pass whole form to check-accessor-name. Bind
	%whole-form, for remove-env-arg.
	(defsetf): Pass whole form to check-accessor-name. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(psetf, define-modify-macro, setf, shiftf, apply, funcall, if): Pass
	both :FORM and :DETAIL when signalling a source-program-error.
	* defpackage.lisp (defpackage): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	* clos-class3.lisp (defclass): Likewise.
	(finalize-class): Signal a program-error, not a source-program-error.
	* defstruct.lisp (ds-make-boa-constructor): Add 'whole' argument. Pass
	both :FORM and :DETAIL when signalling a source-program-error.
	(defstruct): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	* cmacros.lisp (define-compiler-macro): Pass whole form to
	sys::make-macro-expansion.
	* compiler.lisp (c-FUNCTION-MACRO-LET): Pass whole form to
	make-macro-expander.
	(c-GENERIC-FLET, c-GENERIC-LABELS): Pass whole form to
	defgeneric-lambdalist-callinfo and make-generic-function-form.
	(c-MACROLET): Pass whole form to make-macro-expander.
	(compile-lambda-helper): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	* defs2.lisp (destructuring-bind): Bind %whole-var for analyze1.
	* loop.lisp (loop-syntax-error, expand-loop): Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	* clos-slots1.lisp (with-slots, with-accessors): Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	* clos-method1.lisp (initialize-instance-<standard-method>): Update.
	* clos-method2.lisp (program-error-reporter): Signal a program-error,
	not a source-program-error.
	(analyze-method-description): Add 'whole' argument. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	* clos-methcomb2.lisp (invalid-sort-order-error): Signal a
	program-error, not a source-program-error.
	(any-method-combination-check-options): Likewise.
	(check-em-arguments-option, check-em-generic-function-option): Add
	'whole' argument. Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	(call-method, make-method, make-method-error,): Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(call-method-arg1-error, call-method-arg2-error,
	call-method-arg2elements-error): Likewise.
	(build-effective-method-function-form): Update for changed errfunc
	signature.
	(compute-effective-method-as-function-form): Update.
	(standard-method-combination-check-options): Signal a program-error,
	not a source-program-error.
	(standard-method-combination-check-method-qualifiers): Likewise.
	(short-form-method-combination-check-method-qualifiers): Likewise.
	(parse-method-groups): Add 'whole' argument. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(define-method-combination): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	* clos-genfun3.lisp (invalid-method-qualifiers-error): Likewise.
	(defmethod, declaim-method): Pass the whole form to
	analyze-method-description.
	(analyze-defgeneric): Add 'whole' argument. Pass both :FORM and :DETAIL
	when signalling a source-program-error.
	(analyze-defgeneric-lambdalist): Likewise.
	(defgeneric-lambdalist-callinfo): Likewise.
	(defgeneric): Pass the whole form to analyze-defgeneric.
	(ensure-generic-function): Update.
	* clos-genfun4.lisp (make-generic-function-form): Add 'whole' argument.
	(analyze-generic-fundefs): Likewise. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(generic-flet): Pass the whole form to analyze-generic-fundefs.
	(generic-labels): Likewise.
	* condition.lisp: Export ext:source-program-error-detail.
	(source-program-error): Slot $detail replaces $form. New slot $form.
	(expand-restart-case): Add 'whole' argument. Pass both :FORM and
	:DETAIL when signalling a source-program-error.
	(restart-case, with-restarts): Update.
	* foreign1.lisp (DEF-C-VAR): Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(element, deref, slot, cast, offset, c-var-object, c-var-address,
	typeof): Likewise.
	* affi1.lisp (mlibcall): Pass both :FORM and :DETAIL when signalling a
	source-program-error.
	* macros3.lisp (LETF*): Pass whole form to expand-LETF*.
	(expand-LETF*): Add 'whole' argument. Pass both :FORM and :DETAIL when
	signalling a source-program-error.
	(LETF): Pass whole form to expand-LETF.
	(expand-LETF): Add 'whole' argument. Pass both :FORM and :DETAIL when
	signalling a source-program-error.

2004-08-21  Bruno Haible  <bruno@clisp.org>

	* constsym.d (sys::check-symbol): Renamed from sys::%check-symbol.
	(sys::check-function-name): Renamed from sys::%check-function-name.
	* control.d: Likewise.
	* init.lisp (check-symbol, check-function-name): Remove macros.
	(defun): Use an explicit assignment instead of a macro with implicit
	side-effect.
	* defstruct.lisp (defstruct): Likewise.
	* compiler.lisp (compile): Likewise.
	* cmacros.lisp (compiler-macro-function, (setf compiler-macro-function)):
	Likewise.
	* trace.lisp (check-traceable): Likewise.
	* clos-genfun3.lisp (defmethod, declaim-method, analyze-defgeneric):
	Likewise.
	* documentation.lisp (documentation, (setf documentation)): Likewise.
	* foreign1.lisp (DEF-C-TYPE, DEF-C-VAR, DEF-CALL-OUT, DEF-LIB-CALL-OUT,
	DEF-CALL-IN, def-c-enum): Likewise.

2004-08-21  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (insert-combined-LAPs): Use assert instead of
	check-type.

2004-06-20  Bruno Haible  <bruno@clisp.org>

	Implement the :method-class option.
	* clos-methcomb2.lisp (effective-method-code-bricks): Create
	auxiliary methods of the class given by the generic function.
	* clos-genfun2.lisp (%make-gf): Accept a method-class argument.
	(make-fast-gf): Likewise.
	* clos-genfun3.lisp (do-defmethod): Update.
	(analyze-defgeneric): As 4th value, return a form producing the
	method-class. Create methods of the class given by the :method-class
	option.
	(defgeneric): Pass the method-class to do-defgeneric.
	(ensure-generic-function): Likewise.
	* clos-genfun4.lisp (make-generic-function): Accept a method-class
	argument.
	(do-defgeneric): Likewise.
	(make-generic-function-form): Update.

2004-08-21  Bruno Haible  <bruno@clisp.org>

	* m4/connect.m4 (CL_CONNECT): Bail out if the connect() declaration
	could not be found.
	* m4/ioctl.m4 (CL_IOCTL): Bail out if the ioctl() declaration could not
	be found. Undo last patch.
	* m4/select.m4 (CL_SELECT): Bail out if the select() declaration could
	not be found.
	* m4/tcpconn.m4 (CL_TCPCONN): Bail out if the inet_addr() or
	setsockopt() declaration could not be found.

2004-08-20  Sam Steingold  <sds@gnu.org>

	* control.d (%CHECK-FUNCTION-NAME, %CHECK-SYMBOL): change the
	order of arguments to match that of CHECK-TYPE
	* init.lisp (CHECK-FUNCTION-NAME, CHECK-SYMBOL): ditto
	* clos-genfun3.lisp, cmacros.lisp, compiler.lisp, defstruct.lisp:
	* documentation.lisp, foreign1.lisp, trace.lisp: update callers

2004-08-20  Sam Steingold  <sds@gnu.org>

	* configure.in: added "sysre" option to optionally disable
	the use of system-wide regexp library

2004-08-20  Sam Steingold  <sds@gnu.org>

	ported RAWSOCK to win32
	* modules/rawsock/configure.in: check for <winsock2.h>,
	<ws2tcpip.h> and ws2_32
	* modules/rawsock/rawsock.c (rawsock_t): new typedef
	(socketpair, recvmsg, sendmsg, ifreq): not present on win32

2004-08-20  Sam Steingold  <sds@gnu.org>

	* m4/ioctl.m4 (IOCTL_REQUEST_T): quote shell variable to avoid a
	bash warning

2004-08-20  Sam Steingold  <sds@gnu.org>

	* control.d (make_variable_frame): clarified and unified messages

2004-08-19  Sam Steingold  <sds@gnu.org>

	* init.lisp (source-program-error, source-program-error-form): export
	(%uncompilable, %expand-form, %expand-list, %expand-lambda)
	(%expand-lambdalist, %expand-varspez, %expand-varspez*)
	(%expand-fundefs-1, %expand-funmacdefs-1, defun, do):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* affi.lisp (mlibcall): ditto
	* clos-class3.lisp (defclass, finalize-class): ditto
	* clos-genfun2.lisp (check-gf-lambdalist+argorder)
	(shared-initialize-<standard-generic-function>):
	errfunc accepts FORM as the first argument
	* clos-genfun3.lisp (invalid-method-qualifiers-error)
	(analyze-defgeneric, analyze-defgeneric-lambdalist):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR;
	errfunc accepts FORM as the first argument
	* clos-genfun4.lisp (analyze-generic-fundefs):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* clos-methcomb2.lisp (invalid-sort-order-error)
	(any-method-combination-check-options, check-em-arguments-option)
	(check-em-generic-function-option, call-method, make-method)
	(make-method-error, call-method-arg1-error, call-method-arg2-error)
	(call-method-arg2elements-error, parse-method-groups)
	(standard-method-combination-check-options)
	(standard-method-combination-check-method-qualifiers)
	(short-form-method-combination-check-method-qualifiers)
	(define-method-combination):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR;
	errfunc accepts FORM as the first argument
	* clos-method1.lisp (initialize-instance-<standard-method>):
	errfunc accepts FORM as the first argument
	* clos-method2.lisp (decompose-specialized-lambda-list)
	(program-error-reporter, analyze-method-description):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR;
	errfunc accepts FORM as the first argument
	* clos-slots1.lisp (with-slots, with-accessors):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* compiler.lisp (c-analyze-lambdalist):
	errfunc accepts FORM as the first argument
	(compile-lambda-helper): pass :FORM to ERROR-OF-TYPE
	SOURCE-PROGRAM-ERROR
	* condition.lisp (define-condition, handler-case, restart-bind)
	(expand-restart-case): pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	(source-program-error): added $FORM slot
	* constsym.d (:FORM): MAKE-CONDITION argument for SOURCE-PROGRAM-ERROR
	* control.d (FUNCTION, check_setq_body, check_varspec)
	(make_variable_frame, fehler_funspec, MACROLET, FUNCTION-MACRO-LET)
	(CASE, RETURN-FROM, TAGBODY, GO, DECLARE, %CHECK-SYMBOL):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* defmacro.lisp (macro-call-error, analyze-aux, get-supplied-p)
	(analyze-rest, empty-pattern, analyze1, remove-env-arg)
	(make-macro-expansion): ditto
	* defpackage.lisp (defpackage): ditto
	* defs1.lisp (with-package-iterator): ditto
	* defstruct.lisp (ds-make-boa-constructor, defstruct):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR;
	errfunc accepts FORM as the first argument
	* error.d (end_error, check_symbol_non_constant_replacement)
	(check_symbol_special, check_funname_replacement):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* eval.d (parse_dd, get_closure, eval1, fehler_eval_zuwenig)
	(fehler_eval_dotted, fehler_eval_zuviel): ditto
	* foreign1.lisp (DEF-C-VAR, flet/err): ditto
	* lambdalist.lisp (err-misplaced, err-invalid, analyze-lambdalist)
	(analyze-generic-function-lambdalist, analyze-defsetf-lambdalist)
	(analyze-modify-macro-lambdalist)
	(analyze-method-combination-lambdalist):
	errfunc accepts FORM as the first argument;
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* loop.lisp (loop-syntax-error, expand-loop):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR
	* macros1.lisp (defvar, defparameter, defconstant, do/do*-expand)
	(psetq, case-expand, ifify, cond): ditto
	* macros2.lisp (typecase, deftype, define-symbol-macro): ditto
	* macros3.lisp (expand-LETF*, expand-LETF): ditto
	* places.lisp (get-setf-expansion, get-setf-method, defsetf)
	(check-accessor-name, psetf, define-modify-macro, setf, shiftf)
	(apply, funcall, if):
	pass :FORM to ERROR-OF-TYPE SOURCE-PROGRAM-ERROR;
	errfunc accepts FORM as the first argument

2004-08-20  Bruno Haible  <bruno@clisp.org>

	* error.d (check_funname_replacement): Improve error message.

2004-06-19  Bruno Haible  <bruno@clisp.org>

	* clos-genfun1.lisp (standard-generic-function): New slot
	effective-method-cache.
	* clos-genfun2.lisp (shared-initialize-<standard-generic-function>):
	Initialize it.
	(compute-applicable-methods-effective-method): Cache the effective
	method in the effective-method-cache alist.
	* clos-genfun3.lisp (std-add-method, std-remove-method): Clear the
	effective-method-cache.

2004-08-19  Sam Steingold  <sds@gnu.org>

	recoverable FUNCTION-NAME and SYMBOL source checks
	* constsym.d, subr.d (check_function_name, check_symbol): added
	* control.d (%CHECK-FUNCTION-NAME, %CHECK-SYMBOL): implemented
	* init.lisp (check-symbol, check-function-name): new macros
	* clos-genfun3.lisp (defmethod, declaim-method, analyze-defgeneric):
	use CHECK-FUNCTION-NAME
	* compiler.lisp (compile): ditto
	* cmacros.lisp (compiler-macro-function)
	((setf compiler-macro-function)): CHECK-FUNCTION-NAME is now a macro
	* documentation.lisp (documentation): ditto
	* trace.lisp (check-traceable): ditto
	* functions.lisp (check-function-name): removed

2004-08-19  Sam Steingold  <sds@gnu.org>

	* clos-class5.lisp (change-class): avoid a compilation warning

2004-08-19  Sam Steingold  <sds@gnu.org>

	* clos-genfun3.lisp (analyze-defgeneric): fixed a typo in error
	message: DEFSTRUCT -> DEFGENERIC

2004-08-19  Bruno Haible  <bruno@clisp.org>

	* configure.in: Test for sys/inttypes.h, not sys/int_types.h.
	* stdint.h.in: Fix the reversed SKIP_LOCAL_DEFINITIONS logic.
	Rename SKIP_LOCAL_DEFINITIONS to HAVE_SYSTEM_INTTYPES. On Solaris,
	use <sys/inttypes.h>, not <sys/int_types.h>.

2004-08-19  Bruno Haible  <bruno@clisp.org>

	* sequence.d (get_seq_type): Update the code for user-defined sequence
	types.
	Reported by Jörg Höhle.

2004-06-19  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export compute-applicable-methods-using-classes.
	* clos-package.lisp: Likewise.
	* clos-methcomb2.lisp (sort-applicable-methods): Accept the classes of
	the required arguments, not the required arguments themselves.
	(compute-effective-method-as-function-form): Bootstrapping hack for
	compute-applicable-methods-using-classes.
	* clos-genfun2.lisp (compute-applicable-methods-using-classes,
	compute-applicable-methods-using-classes-<standard-generic-function>):
	New functions.
	(check-method-only-standard-specializers): Add caller argument.
	(compute-applicable-methods-effective-method): Call
	compute-applicable-methods-using-classes before calling
	compute-applicable-methods.
	(compute-applicable-methods-<standard-generic-function>): Update.
	* clos-genfun5.lisp (compute-applicable-methods-using-classes): New
	generic function.

2004-08-18  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (PC386): Define also on Cygwin.

2004-08-18  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (SSHUP): replaced gnudist and cons with podval
	(src/autoconf/aclocal.m4): use egrep instead of grep and filter
	out also _CANONICAL_ and AC_PREREQ; also pass full path to aclocal
	to create a stand-alone aclocal.m4 instead of the one full of
	include statements

2004-06-19  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export compute-applicable-methods.
	* clos-package.lisp: Likewise.
	* clos-genfun2.lisp (compute-applicable-methods)
	(compute-applicable-methods-<standard-generic-function>)
	(check-method-only-standard-specializers): New functions.
	(compute-applicable-methods-effective-method): Use
	compute-applicable-methods.
	* clos-genfun5.lisp (compute-applicable-methods@standard-generic-function):
	Use compute-applicable-methods-<standard-generic-function>.

2004-08-18  Bruno Haible  <bruno@clisp.org>

	Make it work with automake-1.9.
	* Makefile.devel (src/autoconf/aclocal.m4): Also filter out the
	AC_CONFIG_HEADER and AC_CONFIG_FILES lines.
	($(CONFIGURES)): Pass a second --include option to autoconf.

2004-08-16  Sam Steingold  <sds@gnu.org>

	* eval.d (eval1): do not ignore the return value of check_fdefinition()
	Reported by Владимир Слепнев (Vladimir Slepnev) <slepnev_v@rambler.ru>

2004-08-16  Sam Steingold  <sds@gnu.org>

	* install.lisp (*clisp-runtime*): always enclose pathname in quotes
	(*clisp-args*): fixed slashes
	Reported by Владимир Слепнев (Vladimir Slepnev) <slepnev_v@rambler.ru>

2004-08-16  Sam Steingold  <sds@gnu.org>

	* modules/postgresql/postgresql.lisp: updated for PostgreSQL 7.4

2004-08-13  Sam Steingold  <sds@gnu.org>

	* configure.in: check for <sys/int_types.h>
	* stdint.h.in [__sun]: include <sys/int_types.h> only when present
	Reported by Michael Livshin <clisp@cmm.kakpryg.net>

2004-08-12  Sam Steingold  <sds@gnu.org>

	standard I/O streams are handle streams in batch mode
	* stream.d (init_standard_input, init_standard_output): accept
	second argument batch_p which ensures that the result is not a
	terminal stream and therefore can be made binary
	(init_streamvars): pass batch_p to init_standard_i/o
	* lispbibl.d (init_streamvars): updated comments

2004-08-12  Sam Steingold  <sds@gnu.org>

	* modules/bindings/glibc/Makefile, modules/bindings/win32/Makefile:
	* modules/fastcgi/Makefile.in, modules/matlab/Makefile:
	* modules/netica/Makefile, modules/oracle/Makefile.in:
	* modules/postgresql/Makefile.in: init CLISP and other make variables
	Reported by "Steve Eichblatt" <steve@eichblatt.us>

2004-08-11  Sam Steingold  <sds@gnu.org>

	* reploop.lisp (make-xterm-io-stream): use :DIRECTION :IO
	instead of a TWO-WAY-STREAM

2004-08-11  Sam Steingold  <sds@gnu.org>

	finished the *DEFUN-ACCEPT-SPECIALIZED-LAMBDA-LIST* patch
	* init.lisp (specialized-lambda-list-to-ordinary): new function
	(*defun-accept-specialized-lambda-list*): enable just before the end
	(defun): use it when *DEFUN-ACCEPT-SPECIALIZED-LAMBDA-LIST* is non-NIL
	* compiler.lisp (c-LAMBDABODY, c-LABELS, c-FUNCALL-INLINE): ditto
	* eval.d (get_closure): ditto
	* constsym.d (spelalist_to_ordinary): added
	* clos-method2.lisp (program-error-reporter): new helper macro
	(extract-lambda-list, extract-specializer-names): use it

2004-08-11  Sam Steingold  <sds@gnu.org>

	ANSI compliance <http://www.lisp.org/HyperSpec/Body/sec_19-2-3.html>:
	"for functions that manipulate or inquire about files in the file
	 system, the pathname argument to such a function is merged with
	 *DEFAULT-PATHNAME-DEFAULTS* before accessing the file system"
	* pathname.d (merge_defaults): new function
	(TRUENAME, PROBE-FILE, PROBE-DIRECTORY, DELETE-FILE, RENAME-FILE)
	(OPEN, DIRECTORY, CD, shorter_directory, ENSURE-DIRECTORIES-EXIST)
	(FILE-WRITE-DATE, FILE-AUTHOR): call it

2004-08-11  Sam Steingold  <sds@gnu.org>

	* record.d (SET-FUNCALLABLE-INSTANCE-FUNCTION): fixed G++ compilation

2004-08-11  Sam Steingold  <sds@gnu.org>

	* makemake.in: fixed and completely unified -with-* processing
	* configure (with-debug): pass "--verbose=yes" to makemake

2004-06-20  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export extract-lambda-list, extract-specializer-names.
	* clos-package.lisp: Likewise.
	* clos-method2.lisp (lambda-list-keyword-p): Remove function.
	(decompose-specialized-lambda-list): New function.
	(extract-lambda-list, extract-specializer-names): New functions.
	(analyze-method-description): Return a list of initargs forms instead
	of a method-producing form. Use decompose-specialized-lambda-list.
	Pass on the documentation string instead of dropping it.
	* clos-genfun3.lisp (defmethod): Update.
	(do-defmethod): Accept either a method or a list of initargs. In the
	latter case, create the method here.
	(declaim-method): Update.
	(analyze-defgeneric): Update.

2004-08-11  Bruno Haible  <bruno@clisp.org>

	* makemake.in (*.fas): Grant more memory: 800KW instead of 750KW.

2004-08-10  Sam Steingold  <sds@gnu.org>

	* stream.d (MAKE-STREAM): use an intelligent DIRECTION default

2004-08-10  Sam Steingold  <sds@gnu.org>

	* configure.in: avoid identical repeated messages

2004-08-09  Sam Steingold  <sds@gnu.org>

	* pathname.d (fehler_delete_open, fehler_rename_open): fixed messages

2004-08-09  Sam Steingold  <sds@gnu.org>

	* constsym.d (*loop-ansi*): new variable
	* spvw.d (init_symbol_values): initialize *LOOP-ANSI* to NIL
	* misc.d (ansi): reset *LOOP-ANSI*
	* loop.lisp (expand-loop): given CLtL2 syntax removed by ANSI,
	either warn or signal an error, depending on *LOOP-ANSI*

2004-08-09  Sam Steingold  <sds@gnu.org>

	* init.lisp (*suppress-check-redefinition*): initialize to T

2004-08-09  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (get_event_mask): use
	fehler_proper_list_dotted() instead of fehler_proper_list()

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (list_length): New declarations.
	(fehler_proper_list_dotted): Renamed from fehler_proper_list.
	(fehler_proper_list_circular): New declaration.
	(list_to_mv): Update.
	* genclisph.d (main): Emit fehler_proper_list_dotted instead of
	fehler_proper_list.
	* error.d (fehler_proper_list_dotted): Renamed from fehler_proper_list.
	(fehler_proper_list_circular): New function.
	* list.d (endp, LIST-LENGTH, memq): Update.
	(list_length): Export.
	(SYS::LIST-LLENGTH): Instead of llength1, use list_length. Signal an
	error when the argument is a circular list.
	* sequence.d (LENGTH): Likewise.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (gf-keyword-arguments): Enable keyword checking
	also when the generic function mentions &key but no method mentions it.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* debug.d (GC): Use UL_to_I for representing the result.

2004-08-08  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp (*expected-failures*): Many new failures to be
	revisited.

2004-08-08  Bruno Haible  <bruno@clisp.org>

	* spvw.d (init_symbol_values): Initialize
	*DEFUN-ACCEPT-SPECIALIZED-LAMBDA-LIST* to NIL.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_array_recursion): Check *PRINT-LEVEL* before calling
	pr_array_recursion recursively.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* io.d (read_delimited_list): If *read-suppress* is true, return NIL.

2004-08-08  Bruno Haible  <bruno@clisp.org>

	* io.d (read_token_1, read_macro, read_internal, make_references)
	(read_delimited_list_recursive, rpar_reader, fehler_dispatch_zahl)
	(char_reader, radix_2, radix_reader, complex_reader, uninterned_reader)
	(vector_reader, array_reader, lookup_label, label_definition_reader)
	(label_reference_reader, interpret_feature, structure_reader)
	(fehler_closure_badchar, closure_reader, ansi_pathname_reader): Signal
	READER-ERROR instead of STREAM-ERROR in all cases.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* io.d (read_macro, read_internal, fehler_dot, bit_vector_reader)
	(fehler_read_eval_forbidden, not_readable_reader, syntax_error_reader):
	Signal READER-ERROR instead of STREAM-ERROR in some cases.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	Fix crash of (COPY-READTABLE NIL some-readtable).
	* io.d (COPY-READTABLE): Store from_readtable in the STACK. Fixes bug
	introduced on 2003-06-08.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	For invalid condition designators, signal a TYPE-ERROR.
	* condition.lisp (try-coerce-to-condition): Renamed from
	coerce-to-condition.
	(valid-condition-designator-p): New function.
	(coerce-to-condition): New function.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* package.d (apply_symbols): Interpret an argument of nil as an empty
	list, not as a single symbol.
	* defpackage.lisp (shadowing-import-cerror, import-cerror): Handle
	the NIL symbol accordingly.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* places.lisp (setf-VALUES-aux): Use only the first store variable
	for each subform. Bind the others to nil.

2004-08-07  Bruno Haible  <bruno@clisp.org>

	* sacla-tests: New directory.
	* makemake.in (SACLATESTSDIR): New variable.
	(check-sacla-tests, ${SACLATESTSDIR}): New targets.
	(check): Depend on sacla-tests.
	(clean1): Remove also the sacla-tests files.

2004-08-06  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (make-trampoline): Make it work with #+CLISP-DEBUG too.

2004-06-16  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export the generic-function-* accessors.
	* clos-package.lisp: Likewise.

2004-06-16  Bruno Haible  <bruno@clisp.org>

	* documentation.lisp (documentation): For generic functions, take
	the doc string from the generic function object, not its name.
	((setf documentation)): For generic functions, store the doc string
	in the generic function object, not in *documentation*.

2004-06-16  Bruno Haible  <bruno@clisp.org>

	* clos-genfun5.lisp ((setf generic-function-name)): New function.

2004-07-29  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (genericlambda_function_p): Renamed from genericfunctionp.
	* record.d (check_genericlambda_function_replacement): Renamed from
	check_generic_function_replacement.
	(check_genericlambda_function): Renamed from check_generic_function.
	(SYS::%COPY-GENERIC-FUNCTION,
	SYS::GENERIC-FUNCTION-EFFECTIVE-METHOD-FUNCTION): Update.
	* predtype.d (GENERIC-FUNCTION-P): Remove function.
	* eval.d (FUNTAB): Remove generic-function-p.
	* savemem.lisp (%saveinitmem): Use typep instead of generic-function-p.
	* type.lisp (GENERIC-FUNCTION, STANDARD-GENERIC-FUNCTION): No longer
	atomic types.
	* clos-genfun2.lisp (compute-dispatch): Don't declare
	GENERIC-FUNCTION-P inline.
	* clos-method2.lisp (analyze-method-description): Use typep-class
	instead of generic-function-p.
	* clos-genfun3.lisp (do-defmethod): Likewise.
	* clos-genfun4.lisp (do-defgeneric): Likewise.

2004-06-16  Bruno Haible  <bruno@clisp.org>

	* clos-genfun1.lisp (print-object-<funcallable-standard-object>): New
	function.
	(print-object): New preliminary function.
	* clos-print.lisp (print-object@funcallable-standard-object): New
	method.

2004-06-19  Bruno Haible  <bruno@clisp.org>

	* record.d (SYS::CLOSURE-CODEVEC): Return the code vector itself,
	don't convert it to a list.
	* compiler.lisp (signature): Convert the code vector to a list here.

2004-08-05  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/configure.in: check
	for <sys/utsname.h> with CL_UTSNAME,
	for getrusage() with CL_RUSAGE, and
	for lstat() with CL_LSTAT
	this avoids compile warnings by defining the corresponding
	constants identically in syscalls/config.h and unixconf.h

2004-08-05  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c: use DB.dbenv when practical
	(close_errfile, reset_errfile): functions, not macros
	(close_errpfx): new function
	(BDB:DBE-CLOSE, BDB:DB-CLOSE): call it
	(dbe_get_errfile, dbe_get_errpfx): new functions
	(BDB:DBE-SET-OPTIONS, BDB:DBE-GET-OPTIONS, BDB:DB-SET-OPTIONS)
	(BDB:DB-GET-OPTIONS): accept :ERRPFX

2004-06-13  Bruno Haible  <bruno@clisp.org>

	Make GENERIC-FUNCTION a subclass of FUNCALLABLE-STANDARD-OBJECT.
	* spvw_debug.d (nobject_out1): Print FUNCALLABLE-STANDARD-OBJECTs
	specially, instead of the old GENERIC-FUNCTIONs.
	* io.d (pr_cclosure): Remove special case of old generic-functions.
	* predtype.d (COMPILED-FUNCTION-P): Exclude all
	FUNCALLABLE-STANDARD-OBJECTs instead of the old GENERIC-FUNCTIONs.
	(TYPE-OF, CLOS:CLASS-OF): Remove special case of old generic-functions.
	(enum_hs_standard_generic_function): Remove enumeration item.
	(heap_statistics_mapper): Remove special case of old generic-functions.
	* subtypep.lisp (STANDARD-OBJECT, type-category): Remove special casing
	of GENERIC-FUNCTION and STANDARD-GENERIC-FUNCTION.
	(canonicalize-type): Convert FUNCTION to a class.
	* clos-class3.lisp: Don't pass <standard-generic-function> to %defclos.
	(<generic-function>, <standard-generic-function>): Don't initialize as
	built-in classes.
	* clos-genfun1.lisp (generic-function): New class.
	(<generic-function>): New variable.
	(shared-initialize-<generic-function>): New function.
	(standard-generic-function): New class.
	(<standard-generic-function>): New variable.
	(std-gf-signature): Renamed from gf-signature.
	(std-gf-argorder): Renamed from gf-argorder.
	(std-gf-methods): Renamed from gf-methods.
	(std-gf-method-combination): Renamed from gf-method-combination.
	(std-gf-default-method-class, std-gf-lambda-list, std-gf-documentation)
	(std-gf-declspecs, std-gf-initialized): New accessors.
	* clos-methcomb2.lisp (call-method-duplicates-error)
	(effective-method-code-bricks, build-effective-method-function-form):
	Update.
	* clos-genfun2.lisp (countup): New function, moved here from
	clos-genfun3.lisp.
	(check-gf-lambdalist+argorder): New function, partially extracted from
	analyze-defgeneric.
	(shared-initialize-<standard-generic-function>): New function.
	(initialize-instance-<standard-generic-function>): New function.
	(make-instance-<standard-generic-function>): New function.
	(%make-gf): Use make-instance-<standard-generic-function>.
	(make-fast-gf): Take a lambda-list and argument-precedence-order as
	arguments.
	(finalize-fast-gf, gf-never-called-p, compute-dispatch)
	(compute-applicable-methods-effective-method): Update.
	* clos-method2.lisp (analyze-method-description): Update.
	* clos-genfun3.lisp (check-signature-congruence)
	(check-method-qualifiers, std-add-method, std-remove-method)
	(std-find-method): Update.
	(do-defmethod): Create a GF lambda-list, not just a GF signature,
	from the initial method.
	(countup): Moved to clos-genfun2.lisp.
	(analyze-defgeneric): Change the second return value from argorder to
	an argument-precendence-order list. Use check-gf-lambdalist+argorder.
	(defgeneric): Update. Pass the argument-precendence-order and also the
	lambda-list to do-defgeneric.
	(ensure-generic-function): Likewise.
	* clos-genfun4.lisp (make-generic-function): Take a lambda-list and
	argument-precedence-order as arguments.
	(do-defgeneric): Likewise. Use
	shared-initialize-<standard-generic-function> to change an existing
	generic function.
	(make-generic-function-form): Update. Pass a lambda-list and
	argument-precedence-order to make-generic-function.
	* clos-genfun5.lisp (shared-initialize@generic-function,
	shared-initialize@standard-generic-function): New functions.
	(no-applicable-method, missing-required-method, no-primary-method)
	(no-next-method): Update.
	(check-generic-function-initialized): New function.
	(generic-function-name, generic-function-methods)
	(generic-function-method-class, generic-function-lambda-list)
	(generic-function-method-combination)
	(generic-function-argument-precedence-order)
	(generic-function-declarations): New generic functions.
	(compute-applicable-methods): Update.
	* clos-class5.lisp (valid-make-instance-keywords)
	(valid-reinitialize-instance-keywords)
	(valid-update-instance-for-redefined-class-keywords)
	(valid-update-instance-for-different-class-keywords): Update.
	* clos-genfun6.lisp: New file.
	* clos.lisp: Load it.
	* describe.lisp (describe-object@generic-function): Update.
	* makemake.in (LPARTS): Add clos-genfun6.
	* po/Makefile.devel (LISPSOURCES): Likewise.

2004-08-04  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c: include <time.h> and/or <sys/time.h>
	(time_stamp): new function
	(CLOSE_ERRFILE): call time_stamp() before fclose()
	(my_fopen): call time_stamp() after fopen()
	(BDB:DB-CLOSE): do not close errfile when DB has a parent
	* modules/berkeley-db/test.tst (finish-file): always return NIL
	* modules/berkeley-db/configure.in: check for gettimeofday(),
	localtime() and strftime(); also check for <sys/time.h> and <time.h>

2004-08-04  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/rawsock.c (parse_buffer_arg): new function
	(RECV, SOCK-READ, SEND, SOCK-WRITE): use it to correct STACK handling
	* modules/rawsock/test.tst: new file

2004-08-04  Sam Steingold  <sds@gnu.org>

	* utils/modprep.lisp (print-tables-1): fixed <checker>_table_size

2004-08-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (built_in_class_length): New macro.
	* predtype.d (typep_class, typep_classname): Handle the case of
	built-in-class correctly.
	Reported by Sam Steingold.

2004-06-12  Bruno Haible  <bruno@clisp.org>

	Implement funcallable instances.
	* lispbibl.d (Class): New field funcallablep.
	(closure_flags): Renamed from cclosure_flags.
	(Closure_flags): Renamed from Cclosure_flags.
	(Cclosure_seclass): Shift by 4 bits.
	(Cclosure_set_seclass): Likewise. Don't replace the entire
	record_flags.
	(closflags_instance_B, closure_instancep, Closure_instancep): New
	macros.
	(Closure_name): Add a conditional for the case of funcallable
	instances.
	(TheInstance): Can be closure_type as well.
	(regular_instance_p): Renamed from instancep.
	(instancep, funcallable_instance_p): New macros.
	(allocate_cclosure_copy): Update.
	* genclisph.d (main): Emit definitions for closure_flags,
	closure_instancep, Closure_instancep, TheClosure. Update TheInstance,
	instancep.
	* eval.d (get_closure): Update.
	(init_cclosures): Construct O(endless_loop_code).
	* io.d (pr_closure): Treat the case of funcallable instances.
	* predtype.d (TYPE-OF, CLOS:CLASS-OF): Treat the case of funcallable
	instances.
	(heap_statistics_mapper): Likewise.
	* hashtabl.d (sxhash_atom): Likewise.
	* record.d (SYS::%MAKE-CLOSURE): Update.
	(CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION): New function.
	(CLOS::FUNCALLABLE-INSTANCE-P): New function.
	(CLOS::ALLOCATE-FUNCALLABLE-INSTANCE): New function.
	(do_allocate_instance, update_instance): Use
	ALLOCATE-FUNCALLABLE-INSTANCE if the instances have to be funcallable.
	* init.lisp: Export funcallable-standard-class,
	funcallable-standard-object, set-funcallable-instance-function.
	* clos-package.lisp: Likewise.
	* clos-class1.lisp (semi-standard-class): New class.
	(<semi-standard-class>, *<semi-standard-class>-defclass*): New
	variables.
	(standard-class): Inherit from semi-standard-class.
	(class-current-version, class-fixed-slot-locations, class-instantiated,
	class-finalized-direct-subclasses-table, class-prototype): Generalize
	to work on semi-standard-class.
	(class-funcallablep): New accessor.
	(*<standard-class>-instance-size*): Update.
	(<funcallable-standard-class>,
	*<funcallable-standard-class>-class-version*,
	<funcallable-standard-object>): New variables.
	(semi-standard-class-p): New function.
	* clos-class2.lisp (<funcallable-standard-class>,
	<funcallable-standard-object>): New variables.
	* clos-class3.lisp (ensure-class-using-class-<t>): Add a special case
	for <funcallable-standard-class>.
	(default-direct-superclasses): Special case for
	<funcallable-standard-class>.
	(validate-superclass): Add special support for
	<funcallable-standard-object>.
	(compute-effective-slot-definition-<class>): Use semi-standard-class-p
	instead of standard-class-p.
	(compute-slots-<slotted-class>-around): Likewise.
	(install-class-direct-accessors): Likewise.
	(shared-initialize-<semi-standard-class>): Renamed from
	shared-initialize-<standard-class>.
	(shared-initialize-<standard-class>): New function.
	(finalize-instance-semi-standard-class): Renamed from
	finalize-instance-standard-class. Use semi-standard-class-p instead of
	standard-class-p. Initialize the funcallablep slot. Initialize the
	instance-size differently for funcallable objects.
	(make-instances-obsolete-<semi-standard-class>): Renamed from
	make-instances-obsolete-standard-class.
	(make-instances-obsolete-<semi-standard-class>-nonrecursive): Renamed
	from make-instances-obsolete-standard-class-nonrecursive.
	(update-subclasses-for-redefined-class): Use semi-standard-class-p
	instead of standard-class-p.
	(update-subclasses-for-redefined-class-nonrecursive): Likewise.
	Initialize <semi-standard-class>.
	* clos-class4.lisp (shared-initialize@funcallable-standard-class):
	New method.
	* clos-class5.lisp (allocate-instance, make-instance): Generalize
	the fallback method to class semi-standard-class.
	(do-change-class): New function.
	(change-class): Add more methods.
	(make-instances-obsolete): Update.
	* clos-class6.lisp (initialize-instance-<funcallable-standard-class>,
	make-instance-<funcallable-standard-class>): Replace.
	(class-funcallablep, (setf class-funcallablep)): New functions.
	(class-current-version, class-fixed-slot-locations, class-instantiated,
	class-finalized-direct-subclasses-table, class-prototype): Generalize
	to class semi-standard-class.
	(finalize-inheritance, compute-slots): Likewise.
	(validate-superclass): Add special support for
	<funcallable-standard-object>.
	* compiler.lisp (make-trampoline): New function.
	* clos-genfun1.lisp (funcallable-standard-class): New class.
	(<funcallable-standard-class>,
	*<funcallable-standard-class>-class-version*,
	*<funcallable-standard-class>-instance-size*): New variables.
	(make-instance-<funcallable-standard-class>,
	initialize-instance-<funcallable-standard-class>,
	shared-initialize-<funcallable-standard-class>): New functions.
	(funcallable-standard-object): New class.
	(<funcallable-standard-object>): New variable.
	* clos-slotdef1.lisp (convert-direct-slots): Use semi-standard-class-p
	instead of standard-class-p.
	* clos-slotdef3.lisp (direct-slot-definition-class,
	effective-slot-definition-class): Generalize to class
	semi-standard-class.
	* clos-print.lisp (print-object@class): Use semi-standard-class-p
	instead of standard-class-p.

2004-08-03  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (CLOSE_ERRFILE): new macro
	(RESET_ERRFILE): use it
	(BDB:DBE-CLOSE, BDB:DB-CLOSE): close errfile

2004-08-03  Sam Steingold  <sds@gnu.org>

	* genclisph.d (number_immediatep): export
	(positivep): use it

2004-06-12  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Closure, Cclosure): Rename field clos_name to
	clos_name_or_class_version.
	(Closure_name): New macro.
	* spvw_circ.d (get_circ_mark, get_circ_unmark): Use it.
	* spvw_debug.d (nobject_out1): Likewise.
	* eval.d (trace_call, match_cclosure_key, eval_closure): Likewise.
	(interpret_bytecode_): Likewise.
	* io.d (pr_cclosure, pr_cclosure_lang): Likewise.
	* record.d (SYS::CLOSURE-NAME): Likewise.
	(SYS::%MAKE-CLOSURE, SYS::CONSTANT-INITFUNCTION-P)
	(CLOS::%SHARED-INITIALIZE, do_initialize_instance)
	(CLOS::%MAKE-INSTANCE): Likewise.
	* control.d (FUNCTION-SIDE-EFFECT): Likewise. Check that Cdr(fdef) is
	a cons before accessing its Car.
	* functions.lisp (function-lambda-expression, function-name): Use
	sys::closure-name.
	* clos-genfun2.lisp (need-gf-already-called-warning-p): Likewise.
	* disassem.lisp (disassemble): Likewise.
	* edit.lisp (ed, uncompile): Likewise.

2004-08-02  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (object_handle): renamed to ...
	(bdb_handle): ... to avoid a non-existent conflict with foreign.d

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* clos.lisp: Load clos-methcomb3, clos-methcomb4.
	* clos-methcomb1.lisp (method-combination): Define using defclass,
	as subclass of metaobject.
	(<method-combination>): New variable.
	(initialize-instance-<method-combination>,
	make-instance-<method-combination>, copy-method-combination): New
	functions.
	* clos-methcomb2.lisp: Use make-instance-<method-combination> instead
	of make-method-combination.
	* clos-methcomb3.lisp: New file.
	* clos-methcomb4.lisp: New file.
	* clos-genfun3.lisp (analyze-defgeneric): Use typep instead of
	method-combination-p.
	* clos-genfun5.lisp (find-method-combination): Moved to
	clos-methcomb4.lisp.
	* makemake.in (LPARTS): Add clos-methcomb3, clos-methcomb4.
	* po/Makefile.devel (LISPSOURCES): Likewise.

2004-07-31  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:LOG-FILE): use BUFSIZ instead of
	non-existent MAX_PATH
	(BDB:DB-PUT): do not discard db->put() return value

2004-07-30  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (POSIX:SYSCONF, POSIX:CONFSTR)
	(POSIX:LIMITS): accept an optional `what' argument
	(POSIX:MEMORY-STATUS) [win32]: new function
	* modules/syscalls/posix.lisp (physical-memory): new function
	(sysconf, confstr, limits) [unix]: removed structures
	(memory-status) [win32]: new structure
	* modules/syscalls/configure.in: check for GlobalMemoryStatusEx()
	and setrlimit()

2004-07-30  Sam Steingold  <sds@gnu.org>

	* utils/modprep.lisp (print-tables-1): print the definition
	of "struct c_lisp_pair" outside of WITH-CONDITIONAL

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export method, standard-method, method-function,
	method-generic-function, method-lambda-list, method-specializers,
	method-qualifiers, accessor-method-slot-definition.
	* clos-package.lisp: Likewise.

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (standard-method): Renamed function slot to
	fast-function. Add function slot.
	(initialize-instance-<standard-method>): Accept either :function or
	fast-function argument. Rename :wants-next-method-p keyword to
	clos::wants-next-method-p.
	* clos-methcomb2.lisp (method-list-to-continuation)
	(std-method-function-or-substitute): New functions.
	(callable-method-form-p, call-method-arg2elements-error): New
	functions.
	(effective-method-code-bricks): Use callable-method-form-p. Generate
	different code for CALL-METHOD on methods with slow calling convention.
	(build-effective-method-function-form): Don't optimize CALL-METHOD
	on methods with slow calling convention.
	* clos-genfun3.lisp (std-add-method): Store the initfunction's
	result in the fast-function. Don't use the initfunction if there is
	a slow function.
	* clos-class3.lisp (install-class-direct-accessors): Update.
	* clos-class5.lisp (shared-initialize, reinitialize-instance)
	(initialize-instance, allocate-instance, make-instance): Update.
	* clos-method2.lisp (analyze-method-description): Update.
	* clos-method3.lisp (initialize-instance@standard-method): Update.
	(method-function): New generic function.
	* disassem.lisp (disassemble@standard-method): Show the fast-function
	if available.

2004-07-29  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (POSIX::USAGE):
	return all 16 slots of struct rusage
	(POSIX::LIMITS): return 11 slots
	* modules/syscalls/posix.lisp (POSIX::USAGE): slots SHARED-MEMORY,
	DATA-MEMORY, and STACK-MEMORY replace slot INT-RSS
	(POSIX::LIMITS): fixed slots to comply with SUS

2004-07-29  Bruno Haible  <bruno@clisp.org>

	* clos-slotdef1.lisp (slot-definition, direct-slot-definition)
	(effective-slot-definition, structure-direct-slot-definition)
	(structure-effective-slot-definition): Prefix all slot names with $.
	* clos-stablehash1.lisp (standard-stablehash): Likewise.
	* clos-specializer1.lisp (specializer, eql-specializer): Likewise.
	* clos-class1.lisp (class, slotted-class, structure-class)
	(standard-class): Likewise.
	* clos-method1.lisp (standard-method): Likewise.
	* clos-slotdef2.lisp (structure-effective-slot-definition-initff)
	(structure-effective-slot-definition-readonly): Update.
	* clos-slotdef3.lisp (equal-direct-slot): Update.
	* clos-print.lisp (print-object@class): Update.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (standard-method): Rename slot origin to
	from-defgeneric.
	(std-method-from-defgeneric): Renamed from std-method-origin.
	(initialize-instance-<standard-method>): Accept keyword
	clos::from-defgeneric instead of :origin.
	* clos-method2.lisp (analyze-method-description): Update.
	* clos-genfun3.lisp (std-remove-method): Set the from-generic flag
	of the old method to nil.
	* clos-genfun4.lisp (do-defgeneric): Update.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (std-method-generic-function): Renamed from
	std-method-gf.
	(initialize-instance-<standard-method>): Accept keyword clos::gf
	instead of :gf.
	* clos-method3.lisp (method-generic-function): New function.
	* clos-genfun3.lisp (%call-next-method, std-add-method)
	(std-remove-method): Update.
	* clos-genfun4.lisp (do-defgeneric): Update.
	* clos-genfun5.lisp (%no-next-method): Update.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (initialize-instance-<standard-accessor-method>):
	Check the slot-definition argument.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (standard-method): Add documentation slot.
	(initialize-instance-<standard-method>): Accept :documentation
	argument.
	* documentation.lisp (documentation@<standard-method>@t): Access the
	doc string in the standard-method object, not in the hash table.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (print-object-<standard-method>): Don't signal an
	error if the method is not yet initialized.

2004-07-28  Sam Steingold  <sds@gnu.org>

	composite streams operate on their constituent streams, not themselves
	* stream.d (unread_char): recursively unread for composite streams
	(read_char): recursively clear unread_B for composite streams
	This fixes the REPL bug whereby "1 ," signals an error
	while "1," does not.
	Reported by Pascal J.Bourguignon <pjb@informatimago.com>

2004-07-28  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (standard-method): Rename slot 'function' to
	$function.
	(standard-accessor-method): Rename slot 'slot-definition' to
	$slot-definition.

	* clos-slotdef1.lisp (slot-definition): Rename slot 'type' to $type.
	Reported by Christophe Rhodes.

2004-07-28  Bruno Haible  <bruno@clisp.org>

	* clos-method2.lisp (analyze-method-description): Complete the test
	whether a lambda-list entry is invalid.

2004-06-04  Bruno Haible  <bruno@clisp.org>

	Use specializers in methods.
	* clos-specializer1.lisp (eql-specializer-p, specializer-pretty): New
	functions.
	* clos-method1.lisp (standard-method): Renamed slot
	parameter-specializers to specializers.
	(std-method-specializers): Renamed from
	std-method-parameter-specializers.
	(initialize-instance-<standard-method>): Accept :specializers argument,
	instead of :parameter-specializers argument.
	(print-object-<standard-method>): Update.
	* clos-method2.lisp (analyze-method-description): Generate calls to
	INTERN-EQL-SPECIALIZER. Pass :specializers argument, instead of
	:parameter-specializers argument.
	* clos-method3.lisp (method-specializers): New function.
	* clos-class3.lisp (install-class-direct-accessors): Pass :specializers
	argument, instead of :parameter-specializers argument.
	* clos-class5.lisp (note-ai-change, note-ii-change, note-ri-change)
	(note-uirc-change, note-uidc-change, note-si-change): Update.
	(valid-make-instance-keywords)
	(valid-update-instance-for-redefined-class-keywords)
	(valid-update-instance-for-different-class-keywords): Update.
	(shared-initialize, reinitialize-instance, initialize-instance)
	(allocate-instance, make-instance): Pass :specializers argument,
	instead of :parameter-specializers argument.
	* clos-class6.lisp (class-name): Don't undefine temporarily.
	* clos-methcomb2.lisp (method-applicable-p, sort-applicable-methods):
	Update.
	(same-specializers-p): Just compare with EQ.
	* clos-genfun2.lisp (compute-dispatch): Update. Use eql-specializer-p,
	eql-specializer-object.
	* clos-genfun3.lisp (methods-agree-p): Update.
	(std-find-method): Update. Convert (EQL object) lists to specializers.
	* clos-genfun4.lisp (*allow-making-generic*): New variable.
	(do-defgeneric): Don't signal an error if *allow-making-generic* is
	true.
	* clos-genfun5.lisp (dispatching-arg-p): Update.
	(dispatching-arg-type): Update.
	* describe.lisp (describe-object@generic-function): Update. Show a
	name instead of a class only if the class has a proper name.

2004-07-27  Sam Steingold  <sds@gnu.org>

	* control.d (FUNCTION-SIDE-EFFECT): fixed G++ compilation
	* record.d (update_instance): avoid a G++ warning

2004-07-26  Sam Steingold  <sds@gnu.org>

	interface to the LOG subsystem
	* modules/berkeley-db/bdb.c (BDB:DBE-SET-OPTIONS, BDB:DBE-GET-OPTIONS):
	handle log options
	(dbe_get_tmp_dir, dbe_get_tx_max, dbe_get_tx_timestamp): define
	with DEFINE_DBE_GETTER1
	(dbe_get_lg_bsize, dbe_get_lg_dir, dbe_get_lg_max)
	(dbe_get_lg_regionmax, check_lsn, make_lsn): new functions
	(BDB:DB-STAT, BDB:LOCK-STAT, BDB:TXN-STAT): guard free()
	with begin_system_call()/end_system_call()
	(BDB:LOG-ARCHIVE, BDB:LOG-FILE, BDB:LOG-FLUSH, BDB:LOG-PUT)
	(BDB:LOG-STAT, BDB:LOG-CURSOR, BDB:LOGC-CLOSE, BDB:LOGC-GET)
	(BDB:LOG-COMPARE): implemented
	(BDB:TXN-STAT): use make_lsn() and uint32_to_I()
	* modules/berkeley-db/dbi.lisp: export LOG symbols
	(db-lock-stat): removed the prefixes from slot names
	(db-log-stat): new struct
	(close): added a method for LOGC

2004-07-27  Sam Steingold  <sds@gnu.org>

	* clos-method2.lisp (analyze-method-description): signal an error
	when a lambda-list entry is invalid

2004-06-04  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (standard-method): Add lambda-list slot.
	(initialize-instance-<standard-method>): Accept :lambda-list argument.
	Check it. Compute the signature from it.
	* clos-method2.lisp (analyze-method-description): Add a :LAMBDA-LIST
	initializer to the generated form.
	* clos-method3.lisp (method-lambda-list): New function.
	* clos-class3.lisp (install-class-direct-accessors): Provide
	:lambda-list arguments for all methods.
	* clos-class5.lisp (shared-initialize, reinitialize-instance,
	initialize-instance, allocate-instance, make-instance): Likewise.

2004-06-03  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (initialize-instance-<standard-method>): Check the
	qualifiers argument.

2004-07-26  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:DBE-SET-OPTIONS): finish the
	set_lk_conflicts() interface
	* genclisph.d (main): export array_atype()
	* array.d (array_atype): global, not local
	* genclisph.d (main): export array_rank() and get_array_dimensions()

2004-07-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (array_rank, get_array_dimensions): New declarations.
	* array.d (array_rank, get_array_dimensions): New functions.

2004-06-02  Bruno Haible  <bruno@clisp.org>

	Make METHOD objects CLOS STANDARD-OBJECT instances.
	* clos.lisp: Include clos-method4.
	* clos-method1.lisp (method): Define through defclass.
	(<method>): New variable.
	(standard-method): Define through defclass.
	(<standard-method>): New variable.
	(initialize-instance-<standard-method>): New function.
	(make-instance-<standard-method>): New function.
	(print-object-<standard-method>): Renamed from print-std-method.
	(standard-accessor-method): Define through defclass.
	(<standard-accessor-method>): New variable.
	(initialize-instance-<standard-accessor-method>): New function.
	(standard-reader-method): Define through defclass.
	(<standard-reader-method>): New variable.
	(make-instance-<standard-reader-method>): New function.
	(standard-writer-method): Define through defclass.
	(<standard-writer-method>): New variable.
	(make-instance-<standard-writer-method>): New function.
	* clos-methcomb2.lisp (compute-effective-method-function): Use
	make-instance-<standard-method> instead of make-standard-method.
	* clos-method2.lisp (analyze-method-description): Likewise.
	* clos-method3.lisp (initialize-instance@standard-method): New method.
	(initialize-instance@standard-accessor-method): New method.
	(reinitialize-instance@method): New method.
	* clos-class5.lisp (shared-initialize, reinitialize-instance)
	(initialize-instance, allocate-instance, make-instance): Use
	make-instance-<standard-method> instead of make-standard-method.
	* clos-method4.lisp: New file.
	* clos-print.lisp (print-object): Update.
	* makemake.in (LPARTS): Add clos-method4.
	* po/Makefile.devel (LISPSOURCES): Add clos-method4.
	* utils/clispload.lsp (*expected-failures*): Remove TYPES.3,
	STANDARD-METHOD-CPL.

2004-07-23  Sam Steingold  <sds@gnu.org>

	interface to the LOCK subsystem
	* modules/berkeley-db/bdb.c (OH_INVALID_IS_NULL): new object_handle_t
	(object_handle): handle it
	(BDB:DBE-SET-OPTIONS, BDB:DBE-GET-OPTIONS): handle lock options
	(fill_dbt): use return instead of pointers to return type
	(BDB:LOCK-DETECT, BDB:LOCK-GET, BDB:LOCK-ID, BDB:LOCK-ID-FREE)
	(BDB:LOCK-PUT, BDB:LOCK-CLOSE, BDB:LOCK-STAT): implemented
	* modules/berkeley-db/dbi.lisp (dblock, db-lock-stat): new structs
	(close): define a method for dblock

2004-07-23  Sam Steingold  <sds@gnu.org>

	* utils/modprep.lisp: DEFCHECKER can now handle constants that
	come from "enum" and therefore not available to CPP

2004-07-22  Sam Steingold  <sds@gnu.org>

	* genclisph.d (main): export CLSTEXT

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-class3.lisp: Define <slot-definition> and its subclasses and
	<eql-specializer> here.
	* clos-slotdef2.lisp: Move the class definition forms to
	clos-class3.lisp.
	* clos-specializer2.lisp: Likewise.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	All specializers must be types.
	* type.lisp (typep, subtype-integer): Treat EQL-specializers like
	EQL forms.
	* subtypep.lisp (canonicalize-type): Likewise.
	* compiler.lisp (c-TYPEP): Likewise.

2004-06-04  Bruno Haible  <bruno@clisp.org>

	* defs1.lisp (memoized): New macro.
	* clos-class3.lisp (install-class-direct-accessors): Use it.

2004-06-01  Bruno Haible  <bruno@clisp.org>

	* clos-class3.lisp (install-class-direct-accessors): For slots at
	fixed slot locations, generate more efficient accessors that use
	SYS::%RECORD-REF instead of SLOT-VALUE.

2004-07-22  Sam Steingold  <sds@gnu.org>

	* stream.d (bitbuff_ixs_sub): fixed bitbufferptr initialization
	Reported by Randolph Udodenko <udodenko@users.sourceforge.net>

2004-06-01  Bruno Haible  <bruno@clisp.org>

	Thinner type checks.
	* clos-macros.lisp (accessor-typecheck): New macro.
	(error-accessor-typecheck): New function, moved here from
	clos-class3.lisp.
	* clos-class3.lisp (error-accessor-typecheck): Move function away.
	* clos-slotdef3.lisp: Use error-accessor-typecheck instead of assert.
	* clos-specializer3.lisp: Likewise.
	* clos-class6.lisp: Likewise.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export standard-slot-definition.
	* clos-package.lisp: Likewise.
	* clos-slotdef1.lisp (*<standard-slot-definition>-defclass*): New
	variable.
	(standard-direct-slot-definition, standard-effective-slot-definition):
	Inherit from standard-slot-definition.
	* clos-slotdef2.lisp: Define class <standard-slot-definition>.

2004-07-21  Sam Steingold  <sds@gnu.org>

	CLOSE recursively closes all dependents
	* modules/berkeley-db/bdb.c (wrap_finalize): call MKHANDLE
	* modules/berkeley-db/dbi.lisp (dbe, db, dbc, txn, logc, mpoolfile):
	inherit from BDB-HANDLE
	* genclisph.d (main): export copy_list()

2004-07-21  John Hinsdale <hin@alma.com>

	* modules/oracle/oracle.lisp: Handle FLOAT type properly

2004-05-31  Bruno Haible  <bruno@clisp.org>

	Implement (SETF CLASS-NAME) as the MOP says.
	* clos-class3.lisp (ensure-class-using-class-<t>): Don't pass :name
	initializer to reinitialize-instance.
	(reinitialize-instance-<class>): Accept :name argument. Don't call
	install-class-direct-accessors when not needed.
	* clos-class6.lisp ((setf class-name)): Call reinitialize-instance.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	Let class redefinition go through REINITIALIZE-INSTANCE.
	* clos-class3.lisp (ensure-class-using-class-<t>): Call
	reinitialize-instance.
	(reinitialize-instance-<class>): New function, extracted from
	ensure-class-using-class-<t>.
	* clos-class4.lisp (reinitialize-instance@class): New method.

2004-07-20  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/rawsock.c (configdev): fixed STACK references

2004-05-31  Bruno Haible  <bruno@clisp.org>

	Move install-class-direct-accessors call to initialize-instance.
	* clos-class3.lisp (ensure-class-using-class-<t>): Don't call
	install-class-direct-accessors after making a new class.
	(initialize-instance-<built-in-class>,
	initialize-instance-<structure-class>,
	initialize-instance-<standard-class>): Call
	install-class-direct-accessors here.
	* clos-class6.lisp (initialize-instance@class): New method.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	Make it possible to choose between methods and functions as accessors.
	* lispbibl.d (Class): Add generic_accessors field.
	* clos-class1.lisp (slotted-class): Add generic-accessors slot.
	(class-generic-accessors, (setf class-generic-accessors)): New
	functions.
	(shared-initialize-<slotted-class>): Initialize generic-accessors slot.
	* clos-class3.lisp (DEFCLASS): Accept :GENERIC-ACCESSORS option. If
	nil, generate function declarations instead of method declarations.
	(*compile-accessor-functions*): New variable.
	(install-class-direct-accessors): If generic-accessors is nil, create
	normal functions instead of methods.
	(error-accessor-typecheck): New function.
	(shared-initialize-<structure-class>): Accept :generic-accessors
	argument.
	(define-structure-class): Pass :generic-accessors nil.
	(shared-initialize-<standard-class>): Accept :generic-accessors
	argument.
	* clos-class4.lisp (shared-initialize@structure-class): Accept
	:generic-accessors argument.
	(shared-initialize@standard-class): Likewise.
	* clos-class6.lisp (class-generic-accessors,
	(setf class-generic-accessors)): New generic functions.
	* compiler.lisp: Set *compile-accessor-functions* to nil temporarily.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Class): Move the direct_accessors field.
	* clos-class1.lisp (slotted-class): Add direct-accessors slot.
	(standard-class): Remove direct-accessors slot.
	(class-direct-accessors): Now belongs to slotted-class.
	(shared-initialize-<slotted-class>): Initialize direct-accessors slot.
	* clos-class3.lisp (shared-initialize-<standard-class>): Don't
	initialize direct-accessors slot here.
	* clos-class6.lisp (class-direct-accessors): Now belongs to
	slotted-class.

2004-07-19  Sam Steingold  <sds@gnu.org>

	* spvw_language.d (init_language): save the whales, free the mallocs!

2004-07-19  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (fill_dbt): do not allocate data on
	stack when DBT size is divisible by sizeof(uintD)
	(BDB:CURSOR-GET, BDB:CURSOR-PUT): pass DBC->dbp to record_length()
	(BDB:DB-SET-OPTIONS, BDB:DB-GET-OPTIONS): handle BT_MINKEY,
	H_FFACTOR, H_NELEM and Q_EXTENTSIZE

2004-05-30  Bruno Haible  <bruno@clisp.org>

	* clos-class3.lisp (install-class-direct-accessors,
	remove-accessor-methods, add-accessor-methods): New functions,
	extracted from ensure-class-using-class-<t>.
	(ensure-class-using-class-<t>): Use them.

2004-06-13  Bruno Haible  <bruno@clisp.org>

	* lambdalist.lisp (analyze-generic-function-lambdalist): New function.
	* clos-genfun3.lisp (analyze-defgeneric-lambdalist): Use it.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	Use SHARED-INITIALIZE instead of INITIALIZE-INSTANCE for the class
	initialization behaviour.
	* clos-stablehash1.lisp (shared-initialize-<standard-stablehash>):
	Replaces initialize-instance-<standard-stablehash>.
	* clos-stablehash2.lisp (shared-initialize@standard-stablehash):
	Replaces initialize-instance@standard-stablehash.
	* clos-specializer1.lisp (shared-initialize-<specializer>): Replaces
	initialize-instance-<specializer>.
	(shared-initialize-<eql-specializer>): Replaces
	initialize-instance-<eql-specializer>.
	(initialize-instance-<eql-specializer>): New function.
	* clos-specializer2.lisp (shared-initialize@specializer): Replaces
	initialize-instance@specializer.
	(shared-initialize@eql-specializer): Replaces
	initialize-instance@eql-specializer.
	* clos-specializer3.lisp (initialize-instance-<eql-specializer>):
	Set to #'initialize-instance.
	* clos-class1.lisp (shared-initialize-<class>): Replaces
	initialize-instance-<class>.
	(shared-initialize-<slotted-class>): Replaces
	initialize-instance-<slotted-class>.
	* clos-class3.lisp (DEFCLASS): Always pass :DEFAULT-INITARGS,
	:DOCUMENTATION, :FIXED-SLOT-LOCATIONS arguments.
	(ensure-class-using-class-<t>): In the redefinition case, call
	shared-initialize instead of initialize-instance.
	(shared-initialize-<built-in-class>): Replaces
	initialize-instance-<built-in-class>.
	(initialize-instance-<built-in-class>): New function.
	(shared-initialize-<structure-class>): Replaces
	initialize-instance-<structure-class>.
	(initialize-instance-<structure-class>): New function.
	(shared-initialize-<standard-class>): Replaces
	initialize-instance-<standard-class>.
	(initialize-instance-<standard-class>): New function.
	* clos-class4.lisp (shared-initialize@class): Replaces
	initialize-instance@class.
	(shared-initialize@built-in-class): Replaces
	initialize-instance@built-in-class.
	(shared-initialize@structure-class): Replaces
	initialize-instance@structure-class.
	(shared-initialize@standard-class): Replaces
	initialize-instance@standard-class.
	* clos-class6.lisp (initialize-instance-<built-in-class>,
	initialize-instance-<structure-class>,
	initialize-instance-<standard-class>): Set to #'initialize-instance.

2004-07-18  Sam Steingold  <sds@gnu.org>

	invalidate Fpointer instead of making it NULL on close
	* modules/berkeley-db/bdb.c(object_handle_t): renamed OH_ADDRESS
	to OH_INVALIDATE
	(object_handle): invalidate Fpointer on OH_INVALIDATE;
	(BDB:DB-CLOSE, BDB:CURSOR-CLOSE, BDB:TXN-ABORT, BDB:TXN-COMMIT)
	(BDB:TXN-DISCARD): use OH_INVALIDATE instead of OH_ADDRESS

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (build-effective-method-function-form): Add
	generic-function-variable argument.
	(compute-effective-method-as-function-form): Handle :GENERIC-FUNCTION
	effective-method option.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	Make class definition and redefinition customizable.
	* init.lisp: Export ensure-class, ensure-class-using-class.
	* clos-package.lisp: Likewise.
	* clos-class3.lisp (ensure-class-using-class-<t>): New function,
	extracted from ensure-class.
	(ensure-class-using-class): New function.
	(ensure-class): Just call ensure-class-using-class.
	* clos-class6.lisp (ensure-class-using-class): New generic function.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	* clos-class5.lisp (finalize-inheritance): Move to ...
	* clos-class6.lisp (finalize-inheritance): ... here. Add method for
	CLASS.

2004-07-16  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:DB-SET-OPTIONS, BDB:DB-GET-OPTIONS):
	accept :RE_SOURCE

2004-06-13  Bruno Haible  <bruno@clisp.org>

	* lambdalist.lisp (analyze-method-combination-lambdalist): New function.
	* clos-methcomb2.lisp (check-em-arguments-option): Use it instead of
	analyze-lambdalist.
	(build-effective-method-function-form): Likewise.

2004-06-10  Bruno Haible  <bruno@clisp.org>

	Add error checking for effective-method options.
	* clos-methcomb2.lisp (check-em-arguments-option,
	check-em-generic-function-option): New functions, extracted from
	define-method-combination.
	(check-em-duplicates-option): New function.
	(compute-effective-method-as-function-form): Call
	check-em-arguments-option and check-em-duplicates-option.
	(define-method-combination): Use check-em-arguments-option and
	check-em-generic-function-option.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	* clos-print.lisp (print-object): Add methods for slot-definition and
	eql-specializer.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	Make the reader/writer method classes customizable.
	* init.lisp: Export standard-reader-method, standard-writer-method,
	reader-method-class, writer-method-class.
	* clos-package.lisp: Likewise.
	* clos-class2.lisp (<standard-reader-method>, <standard-writer-method>):
	New variables.
	* clos-class3.lisp (ensure-class): Call reader-method-class to
	determine the class of reader methods, and writer-method-class to
	determine the class of writer methods. Add :slot-definition to the
	accessor method's initargs.
	(reader-method-class, writer-method-class): New functions.
	* clos-method1.lisp: Initialize <standard-reader-method>,
	<standard-writer-method>.
	* clos-class6.lisp (reader-method-class, writer-method-class): New
	generic functions.

2004-07-15  Sam Steingold  <sds@gnu.org>

	support binary i/o for fixed-record-length databases
	* modules/berkeley-db/bdb.c (fill_dbt): accept r_len argument for
	writing numbers to fixed record length databases
	(record_length): new function
	(BDB:DB-PUT): fixed for :QUEUE and :RECNO databases
	(gb_size): removed
	(giga_byte): new DEFVAR
	(size_to_giga_bytes): new function
	(BDB:DB-SET-OPTIONS): accept :CACHE for compatibility with
	BDB:DB-GET-OPTIONS and :RE_DELIM + :RE_PAD
	(DEFINE_DB_GETTER): renamed to DEFINE_DB_GETTER1
	(DEFINE_DB_GETTER2): new macro
	(get_re_delim, get_re_len, get_re_pad): define with it
	(BDB:DB-GET-OPTIONS): accept :RE_DELIM + :RE_PAD

2004-07-15  Sam Steingold  <sds@gnu.org>

	* makemake.in (distrib) [win32gcc]: distribute linkkit because
	the user may have mingw installed

2004-06-10  Bruno Haible  <bruno@clisp.org>

	More DEFINE-METHOD-COMBINATION error checking.
	* clos-methcomb2.lisp (specializers-agree-p, same-specializers-p):
	New functions, from clos-genfun3.lisp.
	(call-method-duplicates-error): New function.
	(effective-method-code-bricks): Add a duplicates argument.
	(build-effective-method-function-form): Likewise.
	(compute-effective-method-as-function-form): Support a :DUPLICATES
	effective-method option.
	(long-form-method-combination-expander): Convert the long-expander's
	second value into a :DUPLICATES effective-method option.
	(long-form-method-combination-collect-duplicates): New function.
	(compute-method-partition-lambdas): Generate code to check for
	duplicates.
	* clos-genfun3.lisp (specializers-agree-p, same-specializers-p): Moved
	to clos-methcomb2.lisp.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	Move the definition of accessor methods from DEFCLASS to ENSURE-CLASS.
	* clos-class3.lisp (defclass): Don't generate accessor-def-forms.
	(ensure-class): Generate accessors here, for all direct slots.

2004-07-14  John Hinsdale <hin@alma.com>

	* modules/oracle/orafns.c: On SQL error, truncate echoed bind
	parameters for readability and to avoid buffer overflows.
	Also grab parse error offset into a ub2, not ub4 (misread docs).

2004-07-14  Sam Steingold  <sds@gnu.org>

	* genclisph.d (main): export mark_fp_invalid() & record_flags_set()
	* modules/pcre/cpcre.c (PCRE:PCRE-FREE): use it

2004-07-14  John Hinsdale <hin@alma.com>

	* modules/oracle/orafns.c: Handle obscure Oracle requirement that
	implicit describes fetch column precision in two-byte destination.
	Allows Oracle module to work under Solaris (Oracle 8.1.7).

2004-07-13  Sam Steingold  <sds@gnu.org>

	* genclisph.d (main): renamed floor() to ifloor() to avoid
	conflict with POSIX <math.h> floor()
	Reported by John Hinsdale <hin@alma.com>

2004-07-13  John Hinsdale <hin@alma.com>

	* modules/oracle/orafns.c: Fix bugs in error reporting; use better
	supported calls in OCI to initialize; report initialization errors
	better

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* defs2.lisp (simple-destructuring-bind): New macro.
	* clos-methcomb2.lisp (short-form-method-combination-expander): Inline
	compute-short-form-effective-method-form. Remove redundant qualifiers
	check. Use simple-destructuring-bind.
	(compute-short-form-effective-method-form): Remove function.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	Make the class-default-initargs computation customizable.
	* init.lisp: Export compute-default-initargs.
	* clos-package.lisp: Likewise.
	* clos-class3.lisp (compute-default-initargs-<class>): New function.
	(compute-default-initargs): New function.
	(checked-compute-default-initargs): New function.
	(initialize-instance-<structure-class>,
	finalize-instance-standard-class): Call it.
	* clos-class6.lisp (compute-default-initargs): New generic function.

2004-07-13  Bruno Haible  <bruno@clisp.org>

	* intelem.d (UDS_to_I, DS_to_I): Make global.
	* lispbibl.d (UDS_to_I, DS_to_I): New declarations,
	* genclisph.d (main): Declare UDS_to_I, DS_to_I. Don't declare
	allocate_bignum.

2004-07-12  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (wrap_finalize): third argument is an
	object, not gcv_object_t, because "&``" does not work with -O
	(BDB:ENV-SET-OPTIONS): accept :TIMEOUT for compatibility
	with BDB:ENV-GET-OPTIONS
	* genclisph.d (check_list): export

2004-07-12  Sam Steingold  <sds@gnu.org>

	* init.lisp (defun): when *DEFUN-ACCEPT-SPECIALIZED-LAMBDA-LIST*
	is non-nil, convert specialized lambda lists to type declarations
	* misc.d (SYS::SET-ANSI): set *DEFUN-ACCEPT-SPECIALIZED-LAMBDA-LIST*
	* spvw.d (init_symbol_values): initialize it
	* constsym.d (defun_accept_spelalist): added

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (method-combination): New slot long-expander.
	* clos-methcomb2.lisp (long-form-method-combination-expander): Remove
	last argument. Fetch it from the method-combination instead.
	(define-method-combination): Simplify long-form expansion.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	Make the class-slots computation customizable.
	* init.lisp: Export compute-slots.
	* clos-package.lisp: Likewise.
	* clos-slotdef1.lisp (slot-definition): Restrict type of allocation
	slot.
	(initialize-instance-<slot-definition>): Check the allocation argument
	here.
	(initialize-instance-<direct-slot-definition>,
	initialize-instance-<effective-slot-definition>): ... not here.
	(standard-effective-slot-definition-p): New function.
	* clos-class3.lisp (compute-slots-<class>-primary): New function,
	extracted from std-compute-slots.
	(compute-slots-<slotted-class>-around): New function, based on
	std-compute-slots and std-layout-slots.
	(compute-slots, checked-compute-slots): New functions.
	(std-compute-slots, std-layout-slots): Remove functions.
	(compute-instance-size, compute-shared-size,
	create-shared-slots-vector, compute-slot-location-table): New functions.
	(initialize-instance-<structure-class>,
	finalize-instance-standard-class): Use the compute-slots functions
	instead of std-compute-slots, std-layout-slots.
	* clos-class6.lisp (compute-slots): New generic function.

2004-06-09  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (compute-effective-method-<standard-generic-function>):
	New function, extracted from compute-effective-method-as-function-form.
	(compute-effective-method): New function.
	(compute-effective-method-as-function-form): Call
	compute-effective-method.
	* clos-genfun5.lisp (compute-effective-method): New generic function.

2004-06-09  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (compute-effective-method-as-function): Small
	optimization.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export compute-effective-slot-definition.
	* clos-package.lisp: Likewise.
	* clos-class3.lisp (compute-effective-slot-definition-<class>): New
	function, extracted from std-compute-slots.
	(compute-effective-slot-definition): New function.
	(std-compute-slots): Use it.
	* clos-class6.lisp (compute-effective-slot-definition): New generic
	function.

2004-07-01  Sam Steingold  <sds@gnu.org>

	keys and values can also be STRING and (INTEGER 0)
	* modules/berkeley-db/bdb.c (SYSCALL1): new macro (with clean-up)
	(BDB:ENV-CLOSE, BDB:DB-CLOSE, BDB:DB-DEL, BDB:DB-PUT)
	(BDB:DB-KEY-RANGE, BDB:CURSOR-CLOSE, BDB:CURSOR-PUT): use it
	(BDB:ENV-SET-OPTIONS): DATA_DIR can be a list
	(BDB:ENV-GET-OPTIONS, BDB:DB-GET-OPTIONS): return all as a plist,
	not as multiple values
	(dbt_o_t): new typedef
	(check_dbt_type, check_dbt_object, free_dbt): new functions
	(fill_dbt): also return the type of the object
	(dbt_to_object): accept the object type as the second argument
	(BDB:DB-GET): accept :TYPE keyword argument
	(BDB:DB-OPEN): do not call physical_namestring() on strings
	because then it is resolved by Berkeley-DB relative to data_dirs
	(BDB:DB-SET-OPTIONS, BDB:DB-GET-OPTIONS): accept :RE_LEN
	(DEFINE_DB_GETTER): new macro
	(db_get_lorder, db_get_pagesize): use it
	(db_get_re_len): new function
	(BDB:CURSOR-GET): return KEY and VAL with specified type
	(BDB:TXN-BEGIN): finalize TXN with BDB::TXN-DISCARD
	(BDB:TXN-COMMIT, BDB:TXN-DISCARD, BDB:TXN-ABORT): invalidate TXN
	* modules/berkeley-db/dbi.lisp (with-cursor): new macro
	(with-open-db): must use BDB:DB-CREATE and then BDB:DB-OPEN
	(close): added a TXN method
	* genclisph.d (ceiling, wbit): enabled
	(allocate_bignum): added

2004-06-30  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): reset `argv_for' to `for_exec' after processing
	the non-option argument so that "-i" will not disable scripting
	Reported by VAUCHER L Ext SIRES <lvaucher.ext@francetelecom.com>
	* clisp-link.in: properly intersperse "-i" in TO_LOAD and TO_PRELOAD

2004-06-28  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (object_handle_t): new typedef
	(object_handle): third argument is an object_handle_t, not bool
	(object_handle_): removed
	updated all calls to object_handle_() and object_handle()
	(env_get_home_dir, env_get_open_flags, db_get_cache):
	accept second argument errorp
	(BDB:DB-STAT): added missing slot bt_over_pg
	(BDB:CURSOR-CLOSE): fixed STACK handling
	(BDB:CURSOR-GET): fixed keyword list
	* modules/berkeley-db/test.tst: new file
	* modules/berkeley-db/dbi.lisp (db-stat-btree): fixed slot names

2004-06-27  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/dbi.lisp (bdb-error): new condition
	* modules/berkeley-db/bdb.c (error_message): new static variable
	(error_callback, error_message_reset): new functions
	(error_bdb): signal BDB-ERROR, not ERROR; use error_message
	(BDB:ENV-CREATE, BDB:DB-CREATE): set error callback to error_callback()
	(BDB:ENV-SET-OPTIONS): fixed STACK access
	(env_get_home_dir, env_get_open_flags, BDB:DB-GET, BDB:CURSOR-GET):
	call error_message_reset()

2004-06-26  Arseny Slobodjuk  <ampy@ich.dvo.ru>

	Fixed handling of relative shortcuts on mingw.
	* w32shell.c (augment_relative_pathname): new function.
	(resolve_shell_shortcut_more): recurrent resolution of
	shortcuts to symbolic names. Handling of relative shortcuts.
	(real_path): fixed sharename handling (not tested).
	* pathname.d (FullName): rewritten to process ".." and ".".

2004-06-09  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (method-combination): Change calling convention
	of expander.
	* clos-methcomb2.lisp (build-effective-method-function-form): Renamed
	from compute-effective-method-function. Take arguments-lambda-list as
	additional argument.
	(compute-effective-method-as-function-form): After calling the
	expander, call build-effective-method-function-form.
	(standard-method-combination-expander): Return two values now, instead
	of the entire function-form.
	(compute-short-form-effective-method-form): Likewise. Simplify.
	(short-form-method-combination-expander): Don't call
	compute-effective-method-function on the result.
	(long-form-method-combination-expander): Likewise.
	(define-method-combination): Update.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	Make the class-precedence-list computation customizable.
	* init.lisp: Export compute-class-precedence-list.
	* clos-package.lisp: Likewise.
	* clos-class3.lisp (compute-class-precedence-list-<class>,
	compute-class-precedence-list, checked-compute-class-precedence-list):
	New functions.
	(initialize-instance-<built-in-class>,
	initialize-instance-<structure-class>,
	finalize-instance-standard-class): Use
	checked-compute-class-precedence-list instead of std-compute-cpl.
	* clos-class6.lisp (compute-class-precedence-list): New generic
	function.

2004-06-25  Sam Steingold  <sds@gnu.org>

	* lispbibl.d, spvw.d, xthread.d, zthread.d (thread_t):
	renamed to clisp_thread_t to avoid conflict with Darwin
	Reported by Denis Bueno <dbueno@stygian.net>

2004-06-09  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (compute-effective-method-as-function-form):
	New function.
	* clos-genfun2.lisp (compute-effective-method-as-function): Use it.

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export find-method-combination.
	* clos-package.lisp: Likewise.
	* clos-methcomb2.lisp (find-method-combination-<generic-function>-<symbol>):
	New function.
	(find-method-combination): New function.
	* clos-genfun5.lisp (find-method-combination): New generic function.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Export add-direct-subclass, remove-direct-subclass.
	* clos-package.lisp: Likewise.
	* clos-class3.lisp (add-direct-superclass-internal): Renamed from
	add-direct-superclass.
	(remove-direct-superclass-internal): Renamed from
	remove-direct-superclass.
	(add-direct-superclass, remove-direct-superclass): New functions.
	* clos-class6.lisp (add-direct-superclass, remove-direct-superclass):
	New generic functions.

2004-06-24  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (DB-GET-OPTIONS, DB-SET-OPTIONS): added
	* modules/berkeley-db/dbi.lisp: export them

2004-06-24  Sam Steingold  <sds@gnu.org>

	* utils/modprep.lisp (parse-signature): check that END is non-NIL

2004-06-24  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:DB-GET, BDB:CURSOR-GET):
	separate options and actions

2004-06-24  Sam Steingold  <sds@gnu.org>

	* pathname.d (physical_namestring): new function, for modules
	* genclisph.d (physical_namestring): export it
	* modules/berkeley-db/bdb.c, modules/syscalls/calls.c: use it

2004-06-24  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (ENV-GET-OPTIONS, ENV-SET-OPTIONS):
	get and set tas_spins, shm_key, timeouts and encryption
	(BDB:DB-JOIN, BDB:DB-KEY-RANGE, BDB:DB-VERIFY): new functions

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (get-method-combination): Renamed from
	find-method-combination. Make argument required. i18n.
	((setf get-method-combination)): Renamed from
	(setf find-method-combination).
	* clos-methcomb2.lisp (define-method-combination,
	coerce-to-method-combination): Update.
	* clos-genfun2.lisp (%make-gf): Update.
	* documentation.lisp (documentation, (setf documentation)): Update.

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (print-object-<method-combination>): Renamed from
	print-method-combination.
	* clos-print.lisp (print-object): Update.

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (method-combination): Reorder slots.
	* clos-methcomb2.lisp (define-method-combination): Don't set
	:identity-with-one-argument with long-form method-combination.

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (short-form-method-combination-expander):
	Remove useless typecase.
	(long-form-method-combination-expander): Likewise. The user-defined
	DEFINE-METHOD-COMBINATION body must return a form.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	Change the metaclass of CLASS from STRUCTURE-CLASS to STANDARD-CLASS.
	* lispbibl.d (Class): Change to an extension of Instance. Remove
	metaclass field. Add direct_generic_functions, direct_methods,
	initialized fields.
	(TheClass): Define using TheInstance.
	(if_classp): Use instancep and test for the three most frequent
	metaclasses directly.
	* predtype.d (CLOS::%DEFCLOS): Accept 3 class-versions and <class>.
	* hashtabl.d (sxhash_atom): For CLOS instances, use the class name,
	not the class itself.
	* init.lisp: Export the symbols CLASS, BUILT-IN-CLASS, STRUCTURE-CLASS,
	STANDARD-CLASS, CLASS-NAME, CLASS-DIRECT-SUPERCLASSES,
	CLASS-PRECEDENCE-LIST, CLASS-DIRECT-SUBCLASSES, CLASS-DIRECT-SLOTS,
	CLASS-SLOTS, CLASS-DIRECT-DEFAULT-INITARGS, CLASS-DEFAULT-INITARGS,
	VALIDATE-SUPERCLASS.
	Load clos-metaobject1, clos-class1, clos-class2, clos-class3.
	* type.lisp (def-atomic-type): Don't remove the macro after use.
	* clos-package.lisp: Export the symbols CLASS, BUILT-IN-CLASS,
	STRUCTURE-CLASS, STANDARD-CLASS, CLASS-NAME, CLASS-DIRECT-SUPERCLASSES,
	CLASS-PRECEDENCE-LIST, CLASS-DIRECT-SUBCLASSES, CLASS-DIRECT-SLOTS,
	CLASS-SLOTS, CLASS-DIRECT-DEFAULT-INITARGS, CLASS-DEFAULT-INITARGS,
	VALIDATE-SUPERCLASS.
	* clos-metaobject1.lisp: New file.
	* clos-slotdef1.lisp (slot-definition): Inherit from metaobject.
	* clos-specializer1.lisp (specializer): Inherit from metaobject.
	* clos-class1.lisp: New file.
	* clos-class2.lisp: Update comments.
	* clos-class3.lisp (empty-ht): Moved to clos-class1.lisp.
	(structure-stablehash): Moved to clos-stablehash2.lisp.
	(class, built-in-class, slotted-class, structure-class, standard-class):
	Moved to clos-class1.lisp.
	(%defclos): Pass 3 class-versions and <class>.
	(ensure-class): Tweaks for bootstrapping. When redefining a metaobject
	class, warn but don't obsolete the instances. Before changing a member
	of the class-precedence-list from symbol to class, call
	check-allowed-superclass. Update defaulting of direct-superclasses.
	(add-default-superclass): Remove function.
	(class-name, default-direct-superclasses): New functions.
	(validate-superclass, check-allowed-superclass): New functions.
	(std-compute-slots): Remove second argument. Use class-direct-slots
	for all kinds of superclasses.
	(make-instance-<built-in-class>): Renamed from
	make-instance-built-in-class. Don't call check-metaclass-mix here.
	Use allocate-metaobject-instance.
	(initialize-instance-<built-in-class>): Renamed from
	initialize-instance-built-in-class. Call check-metaclass-mix here.
	Call superclass initializer.
	(make-instance-<structure-class>): Renamed from
	make-instance-structure-class. Use allocate-metaobject-instance.
	(initialize-instance-<structure-class>): Renamed from
	initialize-instance-structure-class. Call superclass initializer.
	Lots of changes.
	(define-structure-class): Update.
	(make-instance-<standard-class>): Renamed from
	make-instance-standard-class. Use allocate-metaobject-instance.
	(initialize-instance-<standard-class>): Renamed from
	initialize-instance-standard-class. Call superclass initializer.
	Lots of changes.
	(finalize-class): Before changing a member of the class-precedence-list
	from symbol to class, call check-allowed-superclass.
	(def-unbound): Remove function.
	(finalize-inheritance-standard-class): Use sys::%unbound.
	(make-instances-obsolete-standard-class-nonrecursive): For metaobject
	classes, just warn.
	(update-subclasses-for-redefined-class): Don't call
	add-default-superclass.
	(update-subclasses-for-redefined-class-nonrecursive): Likewise.
	(list-all-finalized-subclasses): Likewise.
	Completely revamped bootstrapping.
	(%defclos): Pass 3 class-versions and <class>.
	* defstruct.lisp (clos::define-structure-class,
	clos::undefine-structure-class): Remove preliminary functions.
	(structure-object): Remove definition, now done in clos-class3.lisp.
	* clos.lisp: Load clos-class[456] instead of clos-class[235].
	* clos-slotdef2.lisp: Don't use #'make-instance here.
	* clos-stablehash2.lisp (<standard-stablehash>): Move definition to
	clos-class3.lisp.
	(structure-stablehash): Moved to here.
	* clos-specializer2.lisp: Don't use #'make-instance here.
	* clos-class4.lisp: New file.
	* clos-class5.lisp (class-name, (setf class-name)): Move to
	clos-class6.lisp.
	(initialize-instance@standard-class,
	initialize-instance@structure-class): Move to clos-class3.lisp.
	(class-prototype, class-finalized-p): Move to clos-class6.lisp.
	* clos-genfun2.lisp (*dynamically-modifiable-generic-function-names*):
	Add validate-superclass.
	* clos-slotdef3.lisp: Use #'make-instance here.
	* clos-specializer3.lisp: Likewise.
	* clos-class6.lisp: New file.
	* clos-print.lisp: Update.
	* compiler.lisp (block, tagbody): Remove the corresponding classes.
	* gray.lisp: Customize validate-superclasses.
	* condition.lisp (define-condition): Update handling of default
	direct-superclasses.
	* makemake.in (LPARTS): Add clos-metaobject1, clos-class[123] and
	clos-class[456].
	* po/Makefile.devel (LISPSOURCES): Likewise.
	* utils/clispload.lisp (*expected-failures*): Remove
	BUILT-IN-CLASS-CPL and STANDARD-CLASS-CPL.

2004-06-23  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/dbi.lisp: export TXN functions
	(lsn, db-txn-active, db-txn-stat): new structures
	* modules/berkeley-db/bdb.c (BDB:ENV-CLOSE): clean-up the STACK
	(set_verbose): new function
	(BDB:ENV-SET-OPTIONS): use it to fix verbosity handling
	(env_get_verbose): renamed from env_verbose()
	(env_get_tmp_dir): renamed from env_tmp_dir()
	(env_get_data_dirs): renamed from env_data_dirs()
	(env_get_tx_max): renamed from env_tx_max()
	(env_get_tx_timestamp): renamed from env_tx_timestamp()
	(env_get_home_dir, env_get_open_flags, env_get_flags): added
	(BDB:ENV-GET-OPTIONS): also return home dir and open flags
	(BDB:DB-OPEN): use posfixnum_default2()
	(check_gid): new function
	(BDB:TXN-PREPARE): use it
	(gid_to_vector): new function
	(BDB:TXN-RECOVER): use it
	(BDB:TXN-STAT): new function
	(BDB:DB-STAT): fixed memory management

2004-06-23  Sam Steingold  <sds@gnu.org>

	* genclisph.d (posfixnum_default2): new function
	(posfixnum_default): defined in terms of posfixnum_default2()

2004-06-23  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (ENV-GET-OPTIONS): accept :DB_XIDDATASIZE
	(check_byte_vector): new function
	(fill_dbt): use it
	(TXN-CHECKPOINT, TXN-PREPARE, TXN-RECOVER, TXN-SET-TIMEOUT):
	new functions

2004-06-23  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c (PCRE:PCRE-EXEC): signal an error
	instead of crashing on a pcre library bug

2004-06-23  Sam Steingold  <sds@gnu.org>

	* time.d (convert_time_from_universal): new function
	* genclisph.d (main): export it
	* modules/berkeley-db/bdb.c (ENV-SET-OPTIONS, ENV-GET-OPTIONS):
	accept :TX_TIMESTAMP and :TX_MAX
	(BDB:TXN-ID): new function

2004-06-23  Sam Steingold  <sds@gnu.org>

	* genclisph.d (main): undef PACKAGE_* to avoid some warnings
	* modules/rawsock/rawsock.c: include "config.h" after "clisp.h"
	to avoid some warnings
	* modules/syscalls/calls.c: ditto
	* modules/pcre/cpcre.c: ditto

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-method2.lisp (compute-effective-method-as-function): Convert
	result from a form to a function.
	* clos-methcomb2.lisp (compute-effective-method-function,
	standard-method-combination-expander): Don't do the conversion here.

2004-06-08  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (define-method-combination): Provide bindings
	also for the supplied-p variables of optional and keyword arguments
	in the :arguments lambda-list.

2004-05-27  Bruno Haible  <bruno@clisp.org>

	* clos-class3.lisp: Reorder.
	(plist-to-alist, alist-to-plist): Remove functions.

2004-05-26  Bruno Haible  <bruno@clisp.org>

	Let accessors belong to specific classes.
	* init.lisp: Export accessor-method-slot-definition.
	* clos-package.lisp: Likewise.
	* clos-method1.lisp (standard-accessor-method): New class.
	(standard-reader-method, standard-writer-method): New classes.
	* clos-method3.lisp (accessor-method-slot-definition): New generic
	function.
	* clos-genfun3.lisp (declaim-method): New macro.
	* clos-class3.lisp (defclass): Generate explicit calls to
	make-standard-reader-method and make-standard-writer-method.

2004-05-25  Bruno Haible  <bruno@clisp.org>

	Move the direct-default-initargs and default-initargs slots up to
	class CLASS.
	* lispbibl.d (Class): Move direct_default_initargs, default_initargs
	fields.
	* clos-class3.lisp (class): Add direct-default-initargs,
	default-initargs slots.
	(slotted-class): Remove default-initargs slot.
	(standard-class): Remove direct-default-initargs slot.
	(finalize-instance-standard-class, initialize-instance-structure-class):
	Use the default-initargs of all superclasses, regardless of the
	metaclass.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d ((SETF HASH-TABLE-WEAK-P)): Fix GC-safety bug introduced
	in last patch. Check the hash table argument before the new-value
	argument.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	* places.lisp (def-setf-alias): New macro.

2004-06-23  Bruno Haible  <bruno@clisp.org>

	* defpackage.lisp (defpackage): Use (SETF PACKAGE-DOCUMENTATION).

2004-06-22  Sam Steingold  <sds@gnu.org>

	* constsym.d (set_hash_table_weak_p, set_package_lock, setelt)
	(set_hash_table_warn_if_needs_rehash_after_gc, set_long_float_digits):
	use "(SETF FOO)" instead of "%SET-FOO"
	* hashtabl.d ((SETF HASH-TABLE-WARN-IF-NEEDS-REHASH-AFTER-GC))
	((SETF HASH-TABLE-WEAK-P)): updated calling conventions
	* package.d ((SETF EXT:PACKAGE-LOCK)): ditto
	* sequence.d ((SETF ELT)): ditto
	* places.lisp (package-lock, hash-table-weak-p, elt, long-float-digits)
	(hash-table-warn-if-needs-rehash-after-gc): use SETF-FUNCTION
	instead of DEFSETF

2004-06-22  Sam Steingold  <sds@gnu.org>

	* defpackage.lisp (defpackage): use (SETF PACKAGE-DOCUMENTATION)
	* documentation.lisp (documentation): use PACKAGE-DOCUMENTATION
	((setf documentation)): use (SETF PACKAGE-DOCUMENTATION)
	* clos-package.lisp, screen.lisp: use the :DOCUMENTATION
	option in DEFPACKAGE

2004-06-22  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (fehler_string): removed again
	* error.d (fehler_string): ditto
	* package.d ((SETF PACKAGE-DOCUMENTATION)): use check_string()

2004-06-22  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Package): Add pack_docstring field.
	* genclisph.d (main): Update.
	* package.d (make_package): Initialize pack_docstring to NIL.
	(SYS::PACKAGE-DOCUMENTATION, (SETF PACKAGE-DOCUMENTATION)): New
	functions.
	* error.d (fehler_string): Revived function.
	* places.lisp (PACKAGE-DOCUMENTATION): New setter definition.

2004-06-22  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (<method>): New variable.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (add-next-method-local-functions): New function,
	extracted from analyze-method-description.
	(call-method, make-method): New macros.
	(make-method-error, call-method-arg1-error, call-method-arg2-error):
	New functions.
	(effective-method-code-bricks): New function.
	(compute-effective-method-function): Simplify a lot through the use of
	effective-method-code-bricks. Use an inline lambda to handle the
	:arguments lambda list, instead of clobbering the effective method's
	lambda list. Correctly handle the cases when the section lengths in the
	two lambda lists differ.
	(standard-method-combination-expander): Simplify a lot through the use
	of effective-method-code-bricks.
	* clos-method2.lisp (analyze-method-description): Use
	add-next-method-local-functions.

2004-05-25  Bruno Haible  <bruno@clisp.org>

	* clos-class5.lisp: Include contents of clos-class3.lisp.
	* clos-class3.lisp: Renamed from clos-class2.lisp. Old contents moved
	to clos-class5.lisp.
	* clos-class2.lisp: Renamed from clos-class1.lisp. Old contents moved
	to clos-class3.lisp.
	* clos.lisp: Update.

2004-06-21  Sam Steingold  <sds@gnu.org>

	* clisp.spec (debug_package): set to %{nil} to prevent CLISP
	binaries from being stripped
	(modules): added rawsock

2004-06-21  Sam Steingold  <sds@gnu.org>

	* makemake.in (unixconf.h): make sure that it is indeed changed

2004-06-21  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/dbi.lisp (CLOSE):
	define methods for ENV, DB and CURSOR
	* modules/berkeley-db/bdb.c (BDB:ENV-CLOSE, BDB:CURSOR-CLOSE)
	(BDB:DB-CLOSE): reset the Fpointer value and return a value,
	do not crash on repeated calls
	(wrap_finalize): new function
	(BDB:ENV-CREATE, BDB:DB-CREATE, BDB:MAKE-CURSOR, BDB:CURSOR-DUP):
	use it to close ENV, DB & CURSOR objects on GC

2004-06-21  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:MAKE-CURSOR, BDB:CURSOR-CLOSE)
	(BDB:CURSOR-COUNT, BDB:CURSOR-DEL, BDB:CURSOR-DUP)
	(BDB:CURSOR-GET, BDB:CURSOR-PUT): implemented
	the "Database Cursor" subsystem
	* modules/berkeley-db/dbi.lisp: export the above

2004-06-21  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:ENV-GET-OPTIONS): new Lisp DEFUN
	(env_verbose, env_tmp_dir, env_data_dirs): new functions
	(BDB:DB-CREATE): permit NIL environment, call MKDB correctly
	(BDB:DB-FD): fixed STACK handling
	(BDB:DB-OPEN): default mode to 0644
	(BDB:DB-PUT): fixed flag handling

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (compute-applicable-methods-effective-method): Do
	the method selection here.
	(compute-effective-method-as-function): New function.
	* clos-methcomb2.lisp (standard-method-combination-expander,
	short-form-method-combination-expander,
	long-form-method-combination-expander): Add methods argument, remove
	args argument. Don't do the method selection here.
	(define-method-combination): Update.

2004-05-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Class): Add direct_subclasses field.
	* clos-class2.lisp (class): Add slot direct-subclasses-table.
	(ensure-class): Call add-direct-subclass when a member of the
	direct-subclasses list changes from symbol to class.
	(add-direct-subclass, remove-direct-subclass, list-direct-subclasses):
	New functions.
	(update-subclasses-sets): New function.
	(initialize-instance-standard-class): Initialize
	direct-subclasses-table. Call update-subclasses-sets.
	(finalize-class): Call add-direct-subclass when a member of the
	direct-subclasses list changes from symbol to class.
	(initialize-instance-built-in-class): Initialize
	direct-subclasses-table. Call update-subclasses-sets.
	(initialize-instance-structure-class): Initialize
	direct-subclasses-table. Call update-subclasses-sets.

2004-06-19  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (HASH-TABLE-WARN-IF-NEEDS-REHASH-AFTER-GC): new accessor
	(%SET-HASH-TABLE-WARN-IF-NEEDS-REHASH-AFTER-GC): new setter
	* places.lisp (hash-table-warn-if-needs-rehash-after-gc): defsetf
	* init.lisp (hash-table-warn-if-needs-rehash-after-gc): export
	* constsym.d, subr.d (hash_table_warn_if_needs_rehash_after_gc)
	(set_hash_table_warn_if_needs_rehash_after_gc): added

2004-06-19  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/dbi.lisp (with-open-db): simplified

2004-06-19  Sam Steingold  <sds@gnu.org>

	* genclisph.d (symbol_): fixed the definition

2004-06-18  Sam Steingold  <sds@gnu.org>

	* macros1.lisp (do/do*-expand): do not bind DOC: it is ignored anyway

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (compute-applicable-methods-effective-method):
	Renamed from compute-effective-method.
	(compute-dispatch): Update.
	* clos-class5.lisp (make-instance-table-entry1)
	(make-instance-table-entry2, initial-reinitialize-instance): Update.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (coerce-to-method-combination): Don't need to
	clone the method-combination if there are no options.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	Check the method-combination options at defgeneric execution time.
	* clos-methcomb1.lisp (method-combination): New slot check-options.
	* clos-methcomb2.lisp (invalid-sort-order-error)
	(any-method-combination-check-options): New functions.
	(standard-method-combination-check-options): New function.
	(standard-method-combination-expander): Remove options check from here.
	(standard): Update.
	(short-form-method-combination-check-options): New function.
	(+, and, append, list, max, min, nconc, or, progn): Update.
	(compute-method-partition-lambdas): Return also a lambda for
	check-options.
	(define-method-combination): Emit :check-options initargs.
	(coerce-to-method-combination): Add gf-name argument. Call the
	check-options function.
	* clos-genfun4.lisp (make-generic-function, do-defgeneric): Update.

2004-05-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Class): Renamed field direct_subclasses to
	finalized_direct_subclasses.
	* clos-class2.lisp (standard-class): Rename slot direct-subclasses to
	finalized-direct-subclasses-table.
	(add-finalized-direct-subclass): Renamed from add-direct-subclass.
	(remove-finalized-direct-subclass): Renamed from
	remove-direct-subclass.
	(list-finalized-direct-subclasses): Renamed from
	list-direct-subclasses.
	(list-all-finalized-subclasses): Renamed from list-all-subclasses.
	All callers updated.

2004-06-13  Bruno Haible  <bruno@clisp.org>

	* lambdalist.lisp (analyze-modify-macro-lambdalist): New function.
	* places.lisp (define-modify-macro): Use it.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (define-method-combination): Check the :arguments
	lambda-list.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb1.lisp (method-combination): Remove order slot.
	* clos-methcomb2.lisp (compute-short-form-effective-method-form):
	Take the order from the options, not from the method-combination.
	Improve error checking.

2004-06-06  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp (qualifiers-match-p): Remove function.
	(compute-method-partition-lambdas): Use LDIFF and EQUAL to match the
	qualifiers list against the pattern.

2004-05-16  Bruno Haible  <bruno@clisp.org>

	Move slots, direct-slots up to CLASS.
	* lispbibl.d (Class): Move the slots and direct_slots fields.
	* clos-class2.lisp (class): Add slots, direct-slots.
	(slotted-class): Remove slots.
	(standard-class): Remove direct-slots.
	(initialize-instance-built-in-class): Initialize direct-slots and
	slots to empty.
	(make-instance-structure-class, initialize-instance-structure-class):
	Accept a direct-slots-as-metaobjects argument.
	(define-structure-class): Pass the already computed direct-slots to
	make-instance-structure-class.
	* clos-class5.lisp (initialize-instance@structure-class): Accept
	precomputed direct-slots argument.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* clos-specializer1.lisp: New file.
	* clos-specializer2.lisp: New file.
	* clos-specializer3.lisp: New file.
	* clos-package.lisp: Export specializer related symbols from CLOS
	package.
	* init.lisp: Likewise. Load clos-specializer1.
	* clos.lisp: Load clos-specializer2, clos-specializer3.
	* makemake.in (LPARTS): Add clos-specializer{1,2,3}.
	* po/Makefile.devel (LISPSOURCES): Add clos-specializer{1,2,3}.

2004-06-13  Bruno Haible  <bruno@clisp.org>

	* lambdalist.lisp (analyze-lambdalist, analyze-defsetf-lambdalist):
	Improved error messages.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-genfun5.lisp (missing-required-method): New function.
	* clos-methcomb1.lisp (method-combination): Reorder the slots.
	* clos-methcomb2.lisp (invalid-method-error, method-combination-error):
	Signal an error of type ERROR, not SOURCE-PROGRAM-ERROR. Tweak error
	message.
	(invalid-method-sort-order-error): New function.
	(compute-effective-method-function, qualifiers-match-p):
	Internationalize.
	(parse-method-groups): New function, extracted from
	compute-method-partition-lambdas. Improved syntax checking. Improved
	error messages.
	(compute-method-partition-lambdas): Accept a body argument. Remove
	*-group-variable and its associated unjustified error. Remove code that
	can never be executed. Generate code that operates directly on
	variables instead of on a property list. Emit code to call
	MISSING-REQUIRED-METHOD and INVALID-METHOD-SORT-ORDER-ERROR.
	(define-method-combination): Improved syntax checking. Improved error
	messages. Use sys::parse-body. In the long-form combination, don't pass
	:qualifiers. Keep gf-variable and user-gf-variable distinct, so that
	the user cannot accidentally change the value of the gf-variable.
	(do-define-method-combination): Renamed from %define-method-combination.
	Remove dynamic-extent declaration.
	* format.lisp (format-quote): New function.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* clos-macros.lisp: New file.
	* clos-class2.lisp (add-direct-subclass, remove-direct-subclass,
	list-direct-subclasses): Define through def-weak-set-accessors.
	* init.lisp: Load clos-macros.
	* makemake.in (LPARTS): Add clos-macros.
	* po/Makefile.devel (LISPSOURCES): Add clos-macros.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Load clos-stablehash1.
	* clos.lisp: Load clos-stablehash2.
	* clos-stablehash1.lisp: New file.
	* clos-stablehash2.lisp: New file.
	* clos-class5.lisp (standard-stablehash): Moved to clos-stablehash1.
	* makemake.in (LPARTS): Add clos-stablehash1, clos-stablehash2.
	* po/Makefile.devel (LISPSOURCES): Add clos-stablehash1,
	clos-stablehash2.

2004-06-13  Bruno Haible  <bruno@clisp.org>

	Fixed DEFSETF lambda-list handling.
	* init.lisp: Load lambdalist.lisp before places.lisp.
	* lambdalist.lisp: Define PUSH locally.
	(analyze-defsetf-lambdalist): New function.
	* places.lisp (get-setf-expansion): Pass environment to defsetf long
	expander.
	(defsetf): Use analyze-defsetf-lambdalist and handle &environment.

2004-06-05  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp: Reorder.

2004-05-15  Bruno Haible   <bruno@clisp.org>

	* init.lisp (*documentation*): Change the hash table test to
	STABLEHASH-EQUAL, since some of the keys are lists, not symbols.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	Use STABLEHASH-EQ as test for hash tables indexed by symbols.
	* init.lisp (*documentation*): Use hash table test STABLEHASH-EQ.
	* type.lisp (encoding-zeroes): Use hash table test STABLEHASH-EQUAL.
	* subtypep.lisp (get-charset-range): Likewise.
	* compiler.lisp (instruction-codes, function-codes, c-form-table): Use
	hash table test STABLEHASH-EQ.
	(c-CASE): More accurate determination of the hash table test depending
	on the keys.
	(EQL=EQ): Return true for short-floats also.
	(one-value-ops, for-value-table): Use hash table test STABLEHASH-EQ.
	* clos-class2.lisp (finalize-instance-standard-class): For the slot
	location table, use test STABLEHASH-EQ.
	(std-compute-slots): Use test STABLEHASH-EQL instead of EQL.
	(initialize-instance-structure-class: For the slot location table,
	use test STABLEHASH-EQ.
	* clos-genfun2.lisp (prototype-table): Use hash table test
	STABLEHASH-EQUAL.
	* foreign1.lisp (*c-type-table*): Use hash table test STABLEHASH-EQ.
	(*object-table*): Use hash table test STABLEHASH-EQUAL.
	(*type-table*): Use hash table test STABLEHASH-EQ.
	* affi1.lisp (*library-functions*): Use hash table test STABLEHASH-EQ.

2004-06-04  Bruno Haible  <bruno@clisp.org>

	Fix LOAD-TIME-VALUE.
	* compiler.lisp (const): Add ltv-form slot.
	(fnode): Add consts-ltv-forms slot.
	(c-LOAD-TIME-VALUE): Store the entire *form* in the const.
	(value-form-index): Add a ltv-form argument.
	(constvalue-index): Update.
	(kvalue-form-index): Add a ltv-form argument.
	(const-index): Update.

2004-06-03  Bruno Haible  <bruno@clisp.org>

	Improved lambda list checking in DEFSTRUCT and DEFMETHOD.
	* lambdalist.lisp: New file, extracted from compiler.lisp.
	* init.lisp: Load it.
	* compiler.lisp (analyze-lambdalist, lambdalist-error): Moved to
	lambdalist.lisp.
	(c-analyze-lambdalist): New function.
	(lambda-list-to-signature, c-LAMBDABODY, c-LABELS, c-FUNCALL-INLINE):
	Use it instead of analyze-lambdalist.
	* defstruct.lisp (ds-make-boa-constructor): Use analyze-lambdalist.
	* clos-method2.lisp (analyze-method-description): Likewise.
	* clos-methcomb2.lisp (compute-effective-method-function): Update.
	* clos-package.lisp: Update.
	* makemake.in (LPARTS): Add lambdalist.
	* po/Makefile.devel (LISPSOURCES): Add lambdalist.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* spvw.d (init_symbol_values): Initialize
	*WARN-ON-HASHTABLE-NEEDING-REHASH-AFTER-GC* to NIL.
	* hashtabl.d (warn_forced_gc_rehash): New function.
	(hash_lookup_builtin, hash_lookup_builtin_with_rehash): Call it when
	*WARN-ON-HASHTABLE-NEEDING-REHASH-AFTER-GC* is true.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (clrhash): Reorganize the hash table immediately,
	instead of delaying the reorganization.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* io.d (structure_reader): Accept both the new syntax with :TEST and
	the old syntax.
	(pr_orecord): For hash tables, make the output in the three possible
	cases more consistent.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	Add a hash code to symbols.
	* lispbibl.d (symbol_): Add hashcode field. Disable filler for
	LINUX_NOEXEC_HEAPCODES.
	* spvw.d (init_symbol_tab_1): Pre-initialize the symbol's hash code.
	* spvw_update.d (update_symbol_tab): Update the hashcode as well.
	* spvw_garcol.d (gc_markphase): Mark the hashcode as well.
	* spvw_typealloc.d (make_symbol): Pre-initialize the hash code.
	* constsym.d (LISPSYM_B): Pre-initialize the symbol's hash code.
	Disable filler for LINUX_NOEXEC_HEAPCODES.
	* hashtabl.d (hashcode1stable): Handle symbols specially.
	(gcinvariant_hashcode1stable_p): Return true also for symbols.
	(gcinvariant_hashcode2stable_p): Likewise.
	(gcinvariant_hashcode3stable_atom_p): Likewise.
	* genclisph.d (main): Update symbol_ definition.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* clos-method1.lisp (lambda-list-keyword-p): Move to clos-method2.lisp.
	* clos-method2.lisp (lambda-list-keyword-p): New function, from
	clos-method1.lisp.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* clos-genfun2.lisp (callinfo, gf-signature, gf-argorder, gf-methods,
	gf-method-combination): Move to clos-genfun1.lisp.
	* clos-genfun1.lisp (callinfo, gf-signature, gf-argorder, gf-methods,
	gf-method-combination): New functions, from clos-genfun2.lisp.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* clos-methcomb2.lisp: Merge all of clos-genfun1, clos-methcomb2,
	clos-methcomb3, clos-methcomb4, clos-methcomb5.
	* clos-genfun1.lisp (method-applicable-p, sort-applicable-methods):
	Moved to clos-methcomb2.lisp.
	* clos-methcomb3.lisp: Remove file.
	* clos-methcomb4.lisp: Remove file.
	* clos-methcomb5.lisp: Remove file.
	* clos.lisp: Don't load them any more.
	* makemake.in (LPARTS): Remove clos-methcomb3, clos-methcomb4,
	clos-methcomb5.
	* po/Makefile.devel (LISPSOURCES): Likewise.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* clos-genfun1.lisp (methods-agree-p, specializers-agree-p,
	same-specializers-p): Move to clos-genfun3.lisp.
	* clos-genfun3.lisp (methods-agree-p, specializers-agree-p,
	same-specializers-p): New functions, from clos-genfun1.lisp.

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* clos.lisp: Reorder method and method combination includes.

2004-06-10  Bruno Haible  <bruno@clisp.org>

	* trace.lisp (tracer): Add max-depth slot.
	(trace1): Implement :max-depth option.

2004-05-13  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (empty-ht): Warn if this hash table ever gets used
	nontrivially.

2004-05-13  Bruno Haible  <bruno@clisp.org>

	* sequence.d (seq_duplicates): Use a hash table test FASTHASH-EQ
	instead of EQ, FASTHASH-EQL instead of EQL, FASTHASH-EQUAL instead of
	EQUAL.
	* compiler.lisp (c-CASE): Likewise.
	* room.lisp (%space): Likewise.

2004-05-14  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (hashcode_tuple): Use inlined hashcode3stable_atom.
	* clos-genfun2.lisp (compute-dispatch): When the number of dispatching
	arguments is > 1, use a hash table with test STABLEHASH-EQUAL.
	* clos-class5.lisp (*update-instance-for-different-class-table*):
	Use hash table test FASTHASH-EQUAL.

	* loop.lisp (loop-keywordp): Use hash table test FASTHASH-EQUAL.

2004-05-13  Bruno Haible  <bruno@clisp.org>

	Make the hashcode of classes GC-invariant.
	* lispbibl.d (Class): New field 'hashcode'.
	* hashtabl.d (CLOS::CLASS-GETHASH): Inline hash_lookup and
	hashcode1stable. Use the class' hashcode directly.
	* clos-class2.lisp (class): Inherit from structure-stablehash.
	(std-compute-superclasses, add-direct-subclass, list-all-subclasses):
	Use a hash table with test STABLEHASH-EQ.
	* clos-class5.lisp (*make-instance-table*,
	*reinitialize-instance-table*,
	*update-instance-for-redefined-class-table*): Likewise.
	* clos-genfun2.lisp (compute-dispatch): When the number of dispatching
	arguments is 1, use a hash table with test STABLEHASH-EQ.

2004-05-13  Bruno Haible  <bruno@clisp.org>

	Use FASTHASH-EQ as test for hash tables indexed by characters.
	* io.d (allocate_perchar_table, copy_perchar_table,
	allocate_syntax_table, copy_readtable_contents): Use FASTHASH-EQ as
	test for MAKE-HASH-TABLE.

2004-05-14  Bruno Haible  <bruno@clisp.org>

	New hash-table tests FASTHASH-EQL/EQUAL and STABLEHASH-EQL/EQUAL.
	* lispbibl.d (Hashtable): Add ht_gcinvariantfn field.
	* spvw.d (init_symbol_values): Initialize *EQL-HASHFUNCTION*,
	*EQUAL-HASHFUNCTION*.
	* hashtabl.d (gcinvariant_hashcode1_p): New function.
	(gcinvariant_hashcode1stable_p): New function.
	(gcinvariant_hashcode2_p): New function.
	(hashcode2stable): New function.
	(gcinvariant_hashcode2stable_p): New function.
	(hashcode3_cons0, hashcode3_cons1, hashcode3_cons2, hashcode3_cons3):
	Mark as inline.
	(gcinvariant_hashcode3_cons0_p, gcinvariant_hashcode3_cons1_p)
	(gcinvariant_hashcode3_cons2_p, gcinvariant_hashcode3_cons3_p)
	(gcinvariant_hashcode3_p): New functions.
	(hashcode3stable_atom, hashcode3stable_cons0, hashcode3stable_cons1)
	(hashcode3stable_cons2, hashcode3stable_cons3, hashcode3stable): New
	functions.
	(gcinvariant_hashcode3stable_atom_p)
	(gcinvariant_hashcode3stable_cons0_p)
	(gcinvariant_hashcode3stable_cons1_p)
	(gcinvariant_hashcode3stable_cons2_p)
	(gcinvariant_hashcode3stable_cons3_p, gcinvariant_hashcode3stable_p):
	New functions.
	(gcinvariant_hashcode4_cons0_p, gcinvariant_hashcode4_cons1_p)
	(gcinvariant_hashcode4_cons2_p, gcinvariant_hashcode4_cons3_p)
	(gcinvariant_hashcode4_p): New functions.
	(gcinvariant_Pseudofun): New type.
	(gcinvariantfn): New macro.
	(hashcode_gc_invariant_p): Use an indirection through gcinvariantfn.
	(get_eql_hashfunction, get_equal_hashfunction): New functions.
	(MAKE-HASH-TABLE): Recognize the tests {FAST,STABLE}HASH-{EQL,EQUAL}.
	Store the gcinvariant pseudofunction in the hash table.
	(hash_table_test): Return FASTHASH-EQL or STABLEHASH-EQL instead of
	EQL, FASTHASH-EQUAL or STABLEHASH-EQUAL instead of EQUAL.
	(SYSTEM::FASTHASH-STABLE-P, SYSTEM::STABLEHASH-STABLE-P): Use
	gcinvariant_hashcode1_p and gcinvariant_hashcode1stable_p, resp.
	* pseudofun.d: Add hashcode2stable, hashcode3stable, and all
	gcinvariant_hashcode* functions.
	* init.lisp: Export fasthash-eql, stablehash-eql, fasthash-equal,
	stablehash-equal from EXT.
	* defs1.lisp (ext:fasthash-eql, ext:stablehash-eql, ext:fasthash-equal)
	(ext:stablehash-equal): New function aliases.

2004-05-12  Bruno Haible  <bruno@clisp.org>

	New hash-table tests FASTHASH-EQ and STABLEHASH-EQ.
	* lispbibl.d (htflags_invalid_B, htflags_gc_rehash_B): New macros.
	(mark_ht_invalid, mark_ht_valid, ht_validp): No need to rehash a
	table if all its objects have a GC-invariant hash code.
	(set_ht_invalid_if_needed): New macro.
	(htflags_warn_gc_rehash_B): New macro.
	(ht_test_code): Update.
	(Class): Add field subclass_of_stablehash_p.
	(StablehashStructure, StablehashInstance): New types.
	* spvw.d (init_symbol_values): Initialize *EQ-HASHFUNCTION*.
	* spvw_update.d: Provide customization through
	update_hashtable_invalid.
	* spvw_garcol.d (gar_col_normal, gar_col_compact, move_conses)
	[GENERATIONAL_GC]: Set update_hashtable_invalid to false.
	* spvw_memfile.d: Update.
	* hashtabl.d (hashcode1stable): New function.
	(htflags_test_eq_B, htflags_test_eql_B, htflags_test_equal_B)
	(htflags_test_equalp_B, htflags_stablehash_B): New macros.
	(hashcode_raw): Use hashcode1 only for FASTHASH-EQ.
	(hashcode_builtin): Likewise.
	(hash_lookup_builtin): Update.
	(instance_of_stablehash_p, hashcode_gc_invariant_p): New functions.
	(warn_key_forces_gc_rehash): New function.
	(hash_store): Update the htflags_gc_rehash_B bit. Optionally warn
	when it is being set.
	(hash_prepare_store): Update.
	(clrhash): Update the htflags_gc_rehash_B bit.
	(get_eq_hashfunction): New function.
	(MAKE-HASH-TABLE): Add :warn-if-needs-rehash-after-gc argument.
	Accept the tests FASTHASH-EQ and STABLEHASH-EQ.
	(hash_table_test): Return FASTHASH-EQ or STABLEHASH-EQ instead of EQ.
	(SYSTEM::FASTHASH-STABLE-P, SYSTEM::STABLEHASH-STABLE-P): New
	functions.
	* io.d (pr_orecord): Improve printing of hash tables.
	* init.lisp: Export fasthash-eq, stablehash-eq from EXT.
	Export standard-stablehash, structure-stablehash from CLOS and EXT.
	* clos-package.lisp: Export standard-stablehash, structure-stablehash.
	* defs1.lisp (ext:fasthash-eq, ext:stablehash-eq): New function
	aliases.
	* clos-class2.lisp (structure-stablehash): New class.
	(slotted-class): Add slot subclass-of-stablehash-p.
	(finalize-instance-standard-class): Initialize it.
	(std-compute-subclass-of-stablehash-p): New function.
	(initialize-instance-structure-class): Initialize it here too.
	* clos-class5.lisp (standard-stablehash): New class.
	* utils/clispload.lsp (*expected-failures*): Add HASH-TABLE-TEST.[1-4].

2004-06-08  Sam Steingold  <sds@gnu.org>

	* modules/regexp/regexi.c (REGEXP-EXEC): check
	that the pattern is not NULL

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* lisparit.d (SYS::RANDOM-POSFIXNUM): New function.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* init.lisp, type.lisp, subtypep.lisp, compiler.lisp, loop.lisp:
	* clos-class2.lisp, clos-closs5.lisp, clos-genfun2.lisp, room.lisp:
	* foreign1.lisp, affi1.lisp: Annotate all make-hash-table calls
	with :key-type and :value-type.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (MAKE-HASH-TABLE): Add arguments :KEY-TYPE, :VALUE-TYPE.

2004-05-10  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (hashcode_raw_user): Renamed from hashcode5.
	(hashcode_raw, hashcode_raw_user): Update.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (hashcode_builtin, hashcode_user): New functions.
	(hash_lookup_builtin): Use hashcode_builtin instead of hashcode.
	(hash_lookup_user): Use hashcode_user instead of hashcode.

2004-06-08  Arseny Slobodjuk  <ampy@ich.dvo.ru>

	* makemake.in (ARGQ): new variable, shell command
	argument separator apostrophes. Is empty for command.com.
	(cflags.h): use it to fix MSVC build.
	(stdbool.h, stdint.h): use it to shorten the code.
	(all): make lisp.bsc (source code browser database)
	when msvc & debug.
	(lisp.bsc): new target when msvc & debug.
	(clisp.html): apostrophe problem again.

2004-06-07  Sam Steingold  <sds@gnu.org>

	* .gdbinit (full): do not load NCLX demos

2004-06-07  Sam Steingold  <sds@gnu.org>

	* modules/regexp/test.tst: commented out non-POSIX regexps

2004-06-07  Bruno Haible  <bruno@clisp.org>

	* init.lisp (open-for-load): Use uppercase ~S in format strings so that
	the warnings can be shown during bootstrap. Use ~A, not ~S, to display
	pathnames.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* hashtabl.d (hash_prepare_store): Fix bug introduced on 2003-05-13:
	EQUAL and EQUALP hash codes must not be cached across a GC.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	Unify the two hash table counts.
	* lispbibl.d (Hashtable): Remove ht_count field.
	(hashtable_length): Decrement.
	* hashtabl.d (HT_GOOD_P): Remove check of ht_count.
	(rehash): Store the count in the kvtable.
	(hash_store): Increment the count in the kvtable.
	(resize, clrhash): Store the count in the kvtable.
	(REMHASH): Decrement the count in the kvtable.
	(HASH-TABLE-COUNT): Return the count in the kvtable.
	(SYS::%SET-HASH-TABLE-WEAK-P): Copy also the count, in all cases.
	* io.d (pr_orecord): Update.
	* predtype.d (hash_table_equalp): Update.
	(typep_class, typep_classname): Use ht_size instead of ht_count.
	* spvw_debug.d (nobject_out1): Update.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	Let the GC clean up weak hash tables.
	* spvw_weak.d (weak_hashed_alist_update_one, weak_hashed_alist_update):
	New functions.
	(weak_clean_dead): Call weak_hashed_alist_update when appropriate.
	* hashtabl.d (hash_lookup_builtin, hash_lookup_user): Don't test
	whether the key/value pair has been garbage-collected.

2004-06-06  Sam Steingold  <sds@gnu.org>

	* pathname.d (TRANSLATE-LOGICAL-PATHNAME): accept :ABSOLUTE
	* subr.d, subrkw.d (translate_logical_pathname): updated

2004-06-06  Arseny Slobodjuk  <ampy@ich.dvo.ru>

	* lispbibl.d (offsetofa): Define without brackets for MSVC
	to make subr_xlength a constant.

2004-06-03  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 956755 ]: NAMESTRING's second arg is non-compliant
	* pathname.d (TRANSLATE-PATHNAME): accept :ABSOLUTE argument to
	merge in the OS default pathname
	(NAMESTRING): do not accept a second optional argument, as per ANSI
	(DYNLOAD-MODULES): do not call NAMESTRING with 2 arguments
	* cfgwin32.lisp, edit.lisp (edit-file): call TRANSLATE-PATHNAME
	:ABSOLUTE T instead of NAMESTRING with 2 arguments
	* runprog.lisp (xstring): ditto
	* constobj.d (version): bump because of NAMESTRING signature change
	* subr.d, subrkw.d (namestring, translate_pathname): updated

2004-05-30  Bruno Haible  <bruno@clisp.org>

	* record.d (do_allocate_instance): Call FINALIZE-INHERITANCE instead
	of FINALIZE-CLASS. Fix GC-safety bug.
	(CLOS::%MAKE-INSTANCE): Call FINALIZE-INHERITANCE instead of
	FINALIZE-CLASS.

2004-05-30  Bruno Haible  <bruno@clisp.org>

	* clos-slotdef1.lisp (convert-direct-slots): Check the return value
	from direct-slot-definition-class.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	Move the ht_itable and ht_freelist into ht_kvtable.
	* lispbibl.d (Hashtable): Remove ht_itable, ht_freelist fields.
	(hashtable_length): Decrement by 2.
	(HashedAlist): New type.
	(TheHashedAlist): New macro.
	(kvtable_data, ht_kvt_data): Remove macros.
	(map_hashtable, map_hashtable_nogc): Update.
	* hashtabl.d (HT_GOOD_P): Remove ht_itable check.
	(rehash, hash_lookup_builtin, hash_lookup_user, hash_store): Update.
	(allocate_kvt): Update the allocation size. Initialize the freelist
	field.
	(resize): Store the new itable in the kvtable. No need to initialize
	the freelist here.
	(hash_prepare_store, clrhash): Update.
	(MAKE-HASH-TABLE): Store the new itable in the kvtable. No need to
	initialize the freelist here. Fix GC-safety bug before an error
	message.
	(REMHASH, MAPHASH, SYS::HASH-TABLE-ITERATE): Update.
	(SYS::%SET-HASH-TABLE-WEAK-P): Copy also the itable and freelist from
	the old to the new kvtable.
	(CLOS::CLASS-TUPLE-GETHASH): Update.
	* io.d (pr_kvtable): Update. Optimize a loop invariant.
	* predtype.d (hash_table_equalp): Update. Don't pass nullobj to equalp.
	* spvw_debug.d (nobject_out1): Update.
	* spvw_weak.d (weak_clean_dead): For WeakHashedAlist, return true.

2004-06-03  Sam Steingold  <sds@gnu.org>

	* comptran.d (R_R_atanh_R_R): fixed ATANH on complex numbers

2004-06-03  Sam Steingold  <sds@gnu.org>

	* list.d (replace_circular_list): new function
	(LAST): check the list argument for circularity, do not accept ATOMs
	(check_list_length): use replace_circular_list()

2004-06-03  Sam Steingold  <sds@gnu.org>

	* clos-class2.lisp (list-direct-subclasses): avoid a compiler warning

2004-06-03  Sam Steingold  <sds@gnu.org>

	* condition.lisp (retry-function-call): new function
	* clos-genfun5.lisp (no-applicable-method, no-primary-method):
	use RETRY-FUNCTION-CALL to make recoverable
	(no-next-method): use CERROR to make recoverable

2004-06-03  Sam Steingold  <sds@gnu.org>

	* condition.lisp (check-value): use RETRY restart instead of CONTINUE
	(retry): new function, invokes RETRY restart (similar to CONTINUE,
	but is not triggered by EOF/Ctr-D)
	(check-value, correctable-error): associate the new restarts with
	the condition

2004-05-29  Bruno Haible  <bruno@clisp.org>

	* clos-package.lisp: Import ext:proper-list-p.
	* clos-slotdef1.lisp (initialize-instance-<slot-definition>): Use it.
	Improve error messages.
	(initialize-instance-<direct-slot-definition>): Likewise.
	(initialize-instance-<effective-slot-definition>): Likewise.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	Many improvements to BACKQUOTE.
	* backquote.lisp (BQ-NCONCABLE): Remove macro. Now cleaned up by the
	macroexpander.
	(bq-expand): Don't test *backquote-optimize* any more. Call
	bq-append-multiple.
	(bq-transform): Call bq-list.
	(*backquote-optimize-cons*, *backquote-optimize-list*)
	(*backquote-optimize-append*, *backquote-optimize-nconc*)
	(*backquote-optimize-vector*): New variables replace
	*BACKQUOTE-OPTIMIZE*.
	(bq-splicing-p, bq-non-splicing): New functions.
	(bq-cons, bq-list, bq-append, bq-nconc): New functions.
	(bq-append-multiple): New function.
	(bq-optimize-for-list): Remove function.
	(bq-optimize-for-vector): Take the optimized list as arguments. Several
	fixes.
	(bq-optimize-append, bq-optimize-list*, bq-optimize-list, bq-eval)
	(bq-constant-p, eval-self-p, maybe-quote, maybe-unquote)
	(quoted-bq-operator-p, bq-reduce-nesting): Remove functions.
	(backquote-cons): Call bq-cons.
	(backquote-append): Call bq-append.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (hash_lookup_builtin, hash_lookup_builtin_with_rehash):
	Remove Nptr_ argument.
	* hashtabl.d (lookup_Pseudofun): Remove Nptr_ argument.
	(hash_lookup_builtin, hash_lookup_builtin_with_rehash)
	(hash_lookup_user, hash_lookup): Likewise.
	(MAKE-HASH-TABLE, gethash, GETHASH, SYSTEM::PUTHASH, REMHASH)
	(CLOS::CLASS-GETHASH): Update.
	* pseudofun.d: Update.

2004-06-02  Sam Steingold  <sds@gnu.org>

	more consistent macro/function naming, more error recovery
	* stream.d (check_stream, check_streamtype, check_wr_int): removed
	(get_streamtype_replacement): new function
	(CHECK_streamtype, CHECK_builtin_stream, ASSERT_wr_int): new macros
	(test_stream_args): remove, replace with ...
	(check_stream_args): new function
	(SYNONYM-STREAM-SYMBOL, BROADCAST-STREAM-STREAMS)
	(CONCATENATED-STREAM-STREAMS, GENERIC-STREAM-CONTROLLER)
	(TWO-WAY-STREAM-INPUT-STREAM, TWO-WAY-STREAM-OUTPUT-STREAM)
	(ECHO-STREAM-INPUT-STREAM, ECHO-STREAM-OUTPUT-STREAM)
	(test_n_bytes_args): use CHECK_streamtype
	(stream_handles): fixed a bug: missing `return' in fixnum case
	(MAKE-TWO-WAY-STREAM, MAKE-ECHO-STREAM): use check_stream_args()
	(GENERIC-STREAM-P, TERMINAL-RAW, INPUT-STREAM-P, OUTPUT-STREAM-P)
	(STREAM-EXTERNAL-FORMAT, INTERACTIVE-STREAM-P, READ-BYTE-LOOKAHEAD)
	(READ-BYTE-WILL-HANG-P, WRITE-BYTE, LINE-NUMBER, ALLOW-READ-EVAL):
	updated for the check_stream() changes
	(BUILT-IN-STREAM-ELEMENT-TYPE): use CHECK_builtin_stream()
	(bitbuff_ixu_sub, bitbuff_ixs_sub, wr_by_iau8_unbuffered)
	(wr_by_iau8_buffered, WRITE-BYTE, WRITE-INTEGER): use CHECK_wr_int()
	* io.d (test_disp_sub_char): completely recoverable, shift STACK args
	(SET-DISPATCH-MACRO-CHARACTER, GET-DISPATCH-MACRO-CHARACTER): update
	(test_stream_arg): remove, replace with ...
	(check_stream_arg): new function
	(RPAR-READER, STRING-READER, QUOTE-READER, LINE-COMMENT-READER)
	(test_no_infix, CHAR-READER, radix_1, RADIX-READER, UNINTERNED-READER)
	(BIT-VECTOR-READER, VECTOR-READER, ARRAY-READER, READ-EVAL-READER)
	(LOAD-EVAL-READER, LABEL-DEFINITION-READER, NOT-READABLE-READER)
	(SYNTAX-ERROR-READER, CLOSURE-READER, PPRINT-NEWLINE, %CIRCLEP)
	(%PPRINT-LOGICAL-BLOCK, FORMAT-TABULATE, WRITE, PRIN1, PRINT, PPRINT)
	(PRINC, WRITE-CHAR, write_string_up, TERPRI, FRESH-LINE, FINISH-OUTPUT)
	(FORCE-OUTPUT, CLEAR-OUTPUT, WRITE-UNREADABLE, LINE-POSITION): use it
	(test_istream, test_ostream): remove, replace with ..
	(check_istream, check_ostream): new functions
	(read_w, READ-DELIMITED-LIST, READ-LINE, READ-CHAR, UNREAD-CHAR)
	(PEEK-CHAR, LISTEN, READ-CHAR-WILL-HANG-P, READ-CHAR-NO-HANG)
	(CLEAR-INPUT): use check_istream()
	(PARSE-INTEGER): recover from bad radix
	(PRINT-STRUCTURE): use check_stream()
	(WRITE-SPACES, PPRINT-INDENT, ): use check_ostream()
	* error.d, lispbibl.d (check_stream_replacement): added
	(fehler_stream, fehler_streamtype): removed
	* debug.d (DESCRIBE-FRAME): use check_stream()
	instead of fehler_stream()
	* sequence.d (READ-CHAR-SEQUENCE, WRITE-CHAR-SEQUENCE)
	(READ-BYTE-SEQUENCE, WRITE-BYTE-SEQUENCE): ditto
	* constsym.d (x11_socket_stream, generic_stream): added

2004-06-02  Sam Steingold  <sds@gnu.org>

	* list.d (up2_test, up2_test_not, up_test, up_test_not, up_if)
	(up_if_not): simplify return statement

2004-06-02  Bruno Haible  <bruno@clisp.org>

	* list.d (check_cons): Remove macro.
	(check_cons): New function.
	(RPLACA, SYS::%RPLACA, RPLACD, SYS::%RPLACD): Use it.
	(SYS::LIST-ACCESS, SYS::LIST-ACCESS-SET): Likewise.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp (bq-expand-list): Use iteration instead of recursion.

2004-05-16  Bruno Haible  <bruno@clisp.org>

	Generate direct slots for DEFSTRUCT.
	* clos-slotdef1.lisp (*<structure-direct-slot-definition>-defclass*):
	Add an initff slot.
	(structure-direct-slot-definition-initff): New accessor.
	(initialize-instance-<structure-direct-slot-definition>): Accept
	initff argument.
	(make-instance-<structure-direct-slot-definition>): Update.
	(make-load-form-<structure-direct-slot-definition>): New function.
	* defstruct.lisp (defstruct): Generate a list of direct slots as part
	of the defstruct-description.
	* io.d (structure_reader, pr_structure_default): Update.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	Merge ht_kvtable and ht_ntable. For weak hash tables, use
	WeakHashedAlist instead of WeakAlist.
	* lispbibl.d (Rectype_WeakHashedAlist_Key,
	Rectype_WeakHashedAlist_Value, Rectype_WeakHashedAlist_Either,
	Rectype_WeakHashedAlist_Both): New enum items.
	(Hashtable): Remove ht_ntable field.
	(hashtable_length): Decrement.
	(kvtable_data): Update.
	(WeakHashedAlist): New type.
	(TheWeakHashedAlist): New macro.
	(Lrecord_nonweak_length): Update.
	(map_hashtable, map_hashtable_nogc): Update.
	* spvw_gcmark.d (gc_mark): Handle Rectype_WeakHashedAlist_*.
	* spvw_weak.d (max_watchset_count, get_watchset,
	propagate_through_weak, weak_clean_dead, weak_must_activate): Handle
	Rectype_WeakHashedAlist_*.
	* spvw_circ.d (get_circ_mark, get_circ_unmark): Handle
	Rectype_WeakHashedAlist_*.
	* spvw_debug.d (nobject_out1): Update.
	* hashtabl.d (HT_GOOD_P): Remove ht_ntable check.
	(rehash, hash_lookup_builtin, hash_lookup_user): Use KVptr+2 instead of
	Nptr.
	(hash_store): Likewise.
	(hash_table_weak_type): ht_kvtable is now a Rectype_WeakHashedAlist_*.
	(allocate_kvt): Allocate a vector with 3*maxcount entries, or a
	WeakHashedAlist.
	(prepare_resize): Don't allocate an ntable any more.
	(resize): Fill extended kvtable instead of ntable.
	(clrhash, MAPHASH, HASH-TABLE-COUNT): Update.
	(SYS::HASH-TABLE-ITERATE): Update.
	(SYS::%SET-HASH-TABLE-WEAK-P): Update.
	(CLASS-TUPLE-GETHASH): Use KVptr+2 instead of the ntable.
	* io.d (pr_kvtable): Update.
	(pr_orecord): Update hashtable handling. Add Rectype_WeakHashedAlist_*
	handling.
	* predtype.d (hash_table_equalp): Update.
	(TYPE-OF, CLASS-OF): Handle Rectype_WeakHashedAlist_*.
	(enum_hs_internal_weak_hashed_alist): New enum item.
	(heap_statistics_mapper): Handle Rectype_WeakHashedAlist_*.

2004-06-01  Sam Steingold  <sds@gnu.org>

	more errors are recoverable
	* list.d (COPY-LIST, NRECONC): use check_list() instead of fehler_list()
	(fehler_cons): replaced with check_cons_replacement() and check_cons()
	(RPLACA, %RPLACA, RPLACD, %RPLACD, LIST-ACCESS, LIST-ACCESS-SET):
	use check_cons()

2004-06-01  Sam Steingold  <sds@gnu.org>

	* list.d (check_list_length): check that the argument is a
	non-circular list and compute its length
	(BUTLAST, NBUTLAST): use it

2004-06-01  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (hashcode4) [PATHNAME_WIN32]: declare global

2004-05-31  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (c-TYPEP): Generate CLOS::TYPEP-CLASS call also when
	the class has no proper name.

2004-05-29  Bruno Haible  <bruno@clisp.org>

	* record.d (SYS::%UNBOUND): New function.

2004-05-27  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (proper_list_p): New declaration.
	* list.d (proper_list_p): New function.
	* predtype.d (EXT:PROPER-LIST-P): New function.
	* error.d (fehler_proper_list): Tweak error message.
	* init.lisp: Export ext:proper-list-p.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp (bq-nconcable): Renamed from bq-nconc.

2004-05-10  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (add-direct-subclass): Use a weak hash-table when
	the list has more than 10 elements.
	(remove-direct-subclass, list-direct-subclasses): Recognize the
	possibility that direct-subclasses is a hash-table.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (hash_lookup_builtin, hash_lookup_builtin_with_rehash):
	New declarations.
	(set_ht_invalid, set_ht_valid): New macros.
	* spvw_garcol.d (gar_col_normal, gar_col_compact, move_conses): Use
	set_ht_invalid instead of mark_ht_invalid.
	* spvw_memfile.d (loadmem_from_handle): Likewise.
	* spvw_circ.d (subst_circ_mark): Likewise.
	* hashtabl.d (rehash): Use set_ht_valid instead of mark_ht_valid.
	(hash_lookup_builtin): Assume table is valid.
	(hash_lookup_builtin_with_rehash): New function.
	(resize, clrhash): Use set_ht_invalid instead of mark_ht_invalid.
	* pseudofun.d: Add hash_lookup_builtin_with_rehash.

2004-05-30  Sam Steingold  <sds@gnu.org>

	* _distmakefile (clisp) [UNIX_BINARY_DISTRIB]: do not depend on
	src/clisp.c, use '"' for quoting

2004-05-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (symbol_): Check the size only if LINUX_NOEXEC_HEAPCODES.

2004-05-28  Bruno Haible  <bruno@clisp.org>

	* makemake.in: Treat GCC 4 like GCC 3.4.

2004-05-28  Sam Steingold  <sds@gnu.org>

	* init.lisp (open-for-load) [compiler]: recompile the bad file
	when *LOAD-OBSOLETE-ACTION* is :COMPILE

2004-05-21  Bruno Haible  <bruno@clisp.org>

	Remove SELFMADE_MMAP.
	* lispbibl.d: Remove SELFMADE_MMAP functionality.
	* spvw.d: Likewise.
	* spvw_heap.d: Likewise.
	* spvw_global.d: Likewise.
	* spvw_fault.d: Likewise.
	* spvw_sigsegv.d: Likewise.
	* spvw_garcol.d: Likewise.
	* spvw_genera1.d: Likewise.
	* spvw_memfile.d: Likewise.
	* unixaux.d: Likewise.
	* win32aux.d: Likewise.
	* pathname.d: Likewise.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp (bq-expand): Use APPEND, not NCONC, to concatenate
	the parts of a vector. (Think of `#(,@(f1) ,@(f2)).)

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Hashtable): New field ht_lookupfn.
	(hashtable_length): Increment.
	* hashtabl.d (lookup_Pseudofun): New type.
	(lookupfn): New macro.
	(hash_lookup_builtin, hash_lookup_user): New functions.
	(hash_lookup): Turn into a macro.
	(MAKE-HASH-TABLE): Initialize ht_lookupfn.
	* pseudofun.d: Add hash_lookup_builtin, hash_lookup_user.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Hashtable): Add fields ht_hashcodefn, ht_testfn.
	(hashtable_length): Increment by 2.
	* hashtabl.d (hashcode2, hashcode3, hashcode4): Make global.
	(hashcode_Pseudofun, test_Pseudofun): New types.
	(hashcodefn, testfn): New macros.
	(hashcode_raw, hash_lookup): Use the pseudofuns.
	(MAKE-HASH-TABLE): Initialize ht_hashcodefn and ht_testfn.
	* pseudofun.d: Declare pseudofuns eql, equal, equalp, hashcode[234].

2004-05-27  Sam Steingold  <sds@gnu.org>

	an improper docstring does not warrant an error
	* control.d (parse_doc_decl): replaces fehler_docstring()
	(fehler_docstring): Remove function.
	(LET, LET*, LOCALLY, SYMBOL-MACROLET, MULTIPLE-VALUE-BIND, PARSE-BODY):
	use it instead of fehler_docstring()

2004-05-25  Bruno Haible  <bruno@clisp.org>

	Make DEBUG_GCSAFETY test sharper.
	* lispbibl.d (gcinvariant_oint_p, nonimmprobe): New macros.
	(gcv_object_t::operator object, gcv_object_t::gcv_object_t)
	(pgci_pointable, ngci_pointable): Use nonimmprobe.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp (backquote-reader, bq-expand): Treat vectors of
	element types other than T like strings and bit-vectors.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (multibuild-linux-x86): Add builds with both
	HEAPCODES variants, and build with spvw_mixed_blocks-staggered
	and -fixedmemsize.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	Make it possible to combine GENERATIONAL_GC, HEAPCODES, NO_MORRIS_GC.
	* spvw_garcol.d (update): Provide a definition for the case
	GENERATIONAL_GC && HEAPCODES && !MORRIS_GC.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	Make it possible to test both SPVW_MIXED_BLOCKS_OPPOSITE and
	SPVW_MIXED_BLOCKS_STAGGERED.
	* spvw.d (SPVW_MIXED_BLOCKS_OPPOSITE): Define if CONS_HEAP_GROWS_DOWN.
	(SPVW_MIXED_BLOCKS_STAGGERED): Define if CONS_HEAP_GROWS_UP.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	Make it possible to simulate microcomputer memory management on Unix.
	* lispbibl.d (VIRTUAL_MEMORY): Don't define if NO_VIRTUAL_MEMORY is
	defined.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (BT_CHECK, unwind_back_trace): Depend on DEBUG_BACKTRACE,
	not DEBUG_SPVW.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	Let DEFSTRUCT generate regular (SETF FOO-BAR) functions instead of
	DEFSETF expanders.
	* defstruct.lisp (ds-make-readers): Renamed from ds-make-accessors.
	(ds-make-writers): Renamed from ds-make-defsetfs. Generate a DEFUN
	instead of a DEFSETF. Remove EVAL-WHEN hack.
	(defstruct): Update.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* clos-slotdef3.lisp: Redefine the accessor functions with added
	type-checking.

2004-05-09  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Hashtable): Change type of ht_size to uintL.
	(hashtable_length): Update.
	(hashtable_xlength): New macro.
	(allocate_hash_table): Use hashtable_xlength.
	* hashtabl.d (HT_GOOD_P, hashcode_cook, hashcode, rehash, hash_lookup,
	CLASS-TUPLE-GETHASH): Use an unboxed ht_size.
	(resize, MAKE-HASH-TABLE): Update.
	* spvw_debug.d (nobject_out1): Update.

2004-05-26  Bruno Haible  <bruno@clisp.org>

	* spvw.d (main): Change effect of varobjects_misaligned on heap_limit.
	* spvw_garcol.d (gar_col_normal): Likewise.

2004-05-20  Bruno Haible  <bruno@clisp.org>

	Increase memory sizes for builds with fixed memory size.
	* makemake.in (interpreted.mem, halfcompiled.mem): Grant 1400 KW.
	(*.fas): Grant 1800 KW.
	(stage/*.fas): Grant 750 KW.
	(check-ansi-tests, check-ansi-tests-debug): Grant 30000 KW.

2004-05-26  Sam Steingold  <sds@gnu.org>

	* pathname.d (MAKE-LOGICAL-PATHNAME): accept :DEVICE :UNSPECIFIC
	because PATHNAME-DEVICE for LOGICAL-PATHNAME returns :UNSPECIFIC

2004-05-26  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (src--distrib): touch src/VERSION to avoid the
	common problem of autoconf calls on user machine

2004-05-26  Sam Steingold  <sds@gnu.org>

	* makemake.in (distrib) [win32]: remove quotes that confuse find(1)

2004-05-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (oint_type_mask, oint_data_shift, oint_data_mask)
	[LINUX_NOEXEC_HEAPCODES]: Move down by one bit, so we need only 1/8th
	of the address space for the immediate objects.
	(immediate_object_p, machinep): Update.
	* spvw.d (main) [LINUX_NOEXEC_HEAPCODES]: Attempt to reserve the range
	0xC0000000..0xDFFFFFFF.

2004-05-25  Bruno Haible  <bruno@clisp.org>

	* eval.d (nest_var): Use fake_gcv_object. Needed for DEBUG_GCSAFETY.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp (bq-expand): Inline bq-expand-cons, bq-expand-vector.
	(bq-expand-cons, bq-expand-vector): Remove functions.
	(bq-expand-list): Simplify.

2004-05-20  Bruno Haible  <bruno@clisp.org>

	Speed up the FILL-STREAMs.
	* fill-out.lisp (stream-write-char-sequence@fill-stream): New method.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	* defstruct.lisp (ds-accessor-name): New function.
	(ds-make-accessors, ds-make-defsetfs): Use it.

2005-04-15  Bruno Haible  <bruno@clisp.org>

	* clos-slotdef1.lisp (*<slot-definition>-...-location*): New constants.
	(slot-definition-...): Use them.
	* clos-slotdef3.lisp (slot-definition-...): Likewise.

2004-05-08  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Rectype_WeakKVT): Remove enum value.
	(weakkvt_t, WeakKVT): Remove types.
	(weakkvt_length, Weakkvt_length, TheWeakKVT): Remove macros.
	(Lrecord_nonweak_length): Update.
	(if_recordp): Remove handling of Rectype_WeakKVT.
	(weakkvtp): Remove macro.
	(allocate_weakkvt): Remove declaration.
	* spvw.d (main): Don't initialize O(all_weakkvtables).
	* spvw_garcol.d (gar_col_normal): Remove obsolete and broken handling
	of weakkvt objects.
	* spvw_gcmark.d (gc_mark): Remove handling of Rectype_WeakKVT.
	* spvw_typealloc.d (allocate_weakkvt_low, allocate_weakkvt): Remove
	functions.
	* io.d (pr_weakkvt): Remove function.
	(pr_orecord): Remove handling of Rectype_WeakKVT.
	* predtype.d (TYPE-OF, CLASS-OF): Remove handling of Rectype_WeakKVT.
	(enum_hs_weakkvt): Remove enum value.
	(heap_statistics_mapper): Remove handling of Rectype_WeakKVT.

2004-05-08  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (map-direct-subclasses): Remove function.
	(add-direct-subclass, remove-direct-subclass, list-direct-subclasses):
	Use a weak-list instead of a list of weak-pointers.

2004-05-26  Bruno Haible  <bruno@clisp.org>

	* functions.lisp (function-lambda-expression): Moved to here from
	defs2.lisp.
	(function-name): Likewise. Make more efficient.
	* defs2.lisp (function-lambda-expression, function-name): Move to
	functions.lisp.

2004-05-25  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 959549 ]: Win32 bug: LISTEN eats the first character
	* stream.d (listen_handle): always place the byte read() into *byte
	(low_fill_buffered_handle): do not lose the byte read by listen_handle()

2004-05-25  Sam Steingold  <sds@gnu.org>

	* clos-class2.lisp (make-instance-structure-class)
	(define-structure-class): avoid some compilation warnings
	* clos-class5.lisp (update-instance-for-redefined-class): ditto

2004-05-25  Sam Steingold  <sds@gnu.org>

	do not use the side-effect class of functions that might change,
	as per <http://www.lisp.org/HyperSpec/Body/sec_3-2-2-3.html>
	* control.d (FUNCTION-SIDE-EFFECT): also return FDEFINITION and NAME
	* eval.d (FUNTAB): also inline FUNCTION-SIDE-EFFECT and FUNCTION-NAME-P
	* constobj.d (version): bump
	* compiler.lisp (proclaimed-inline-p): new function
	(f-side-effect): use the side-effect class only for functions
	in the same compilation unit, proclaimed INLINE, residing in
	locked packages, or anonymous

2004-05-25  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (function-name): new inline function
	* compiler.lisp (function-signature): use it
	* documentation.lisp (documentation): ditto

2004-05-24  Bruno Haible  <bruno@clisp.org>

	* built.d: New file.
	* lispbibl.d (built_flags): New declaration.
	* spvw.d (init_object_tab): Call it.
	* makemake.in (CPARTS): Add built. Let built.o, not spvw.o, depend on
	cflags.h.
	* po/Makefile.devel (DSOURCES): Add built.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* backquote.lisp: Reorder.
	(backquote, bq-nconc): Moved to here from init.lisp.
	(*unquote-occurred*): Renamed from *unquote-occured*.
	(bq-expand-vector): Renamed from bq-vec-expand.
	(bq-optimize-for-list): Renamed from bq-optimize.
	(bq-optimize-for-vector): Renamed from bq-optimize-vec.
	* init.lisp (backquote, bq-nconc): Moved to backquote.lisp.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	Make SPVW_MIXED_BLOCKS_STAGGERED work with LINUX_NOEXEC_HEAPCODES.
	* lispbibl.d (nonimmediate_heapnr) [HEAPCODES]: New macro.
	* spvw_genera1.d (rebuild_old_generation_cache): Use it.

2004-05-22  Bruno Haible  <bruno@clisp.org>

	Make DEBUG_GCSAFETY work with LINUX_NOEXEC_HEAPCODES.
	* lispbibl.d (nonimmsubrp): New function/macro.
	(gcv_object_t::gcv_object_t, pgci_pointable, ngci_pointable): Use it.

2004-05-23  Bruno Haible  <bruno@clisp.org>

	* spvw_allocate.d (make_space_gc) [SPVW_BLOCKS]: Take
	varobjects_misaligned into account.
	* spvw_memfile.d (loadmem_from_handle): Take varobjects_misaligned into
	account.

2004-05-08  Bruno Haible  <bruno@clisp.org>

	Make weak hash tables work.
	* lispbibl.d (ht_weak_p): Simplify.
	(ht_weak): Remove macro.
	(kvtable_data): Simplify. Use WeakAlist.
	(hash_table_weak_type): New declaration.
	* hashtabl.d (hash_lookup): When the key is unbound, no need to test
	the value for unbound as well.
	(hash_store): Increment the count in the weak-alist vector as well.
	(hash_table_weak_type, allocate_kvt): New functions.
	(prepare_resize): Use allocate_kvt.
	(resize): Update. Initialize the count in the weak-alist vector too.
	(HASH-TABLE-COUNT): Take the count from the weak-alist vector.
	(EXT:HASH-TABLE-WEAK-P): Update.
	(SYS::%SET-HASH-TABLE-WEAK-P): Mostly rewritten.
	* io.d (pr_orecord): Use hash_table_weak_type instead of ht_weak.
	* predtype.d (hash_table_equalp): Likewise.

2004-04-26  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (std-compute-cpl): Use "the list" declaration,
	to enable compiler optimization.
	* clos-class5.lisp (valid-make-instance-keywords)
	(valid-reinitialize-instance-keywords)
	(valid-update-instance-for-redefined-class-keywords)
	(valid-update-instance-for-different-class-keywords): Likewise.
	* clos-genfun2.lisp (compute-dispatch): Likewise.
	* clos-genfun5.lisp (compute-applicable-methods): Likewise.
	* clos-methcomb3.lisp (standard-method-combination-expander): Likewise.

2004-05-23  Sam Steingold  <sds@gnu.org>

	allow () to match NIL in destructuring lambda lists
	* utils/clispload.lsp (regression-test::*expected-failures*):
	removed MACROLET.39
	* defmacro.lisp (%null-tests): proclaim SPECIAL
	(empty-pattern): new function
	(analyze1): treat () as an empty pattern, not symbol NIL
	(make-macro-expansion): bind %NULL-TESTS and call them
	* places.lisp (define-setf-expander, defsetf): ditto
	* macros2.lisp (deftype): ditto

2004-05-23  Sam Steingold  <sds@gnu.org>

	* clos-class0.lisp (print-object): avoid a compilation warning

2004-05-22  Sam Steingold  <sds@gnu.org>

	* spvw.d (init_object_tab): init O(system_type) here...
	* constobj.d (system_type): ...not here
	* makemake.in: only spvw.d depends on cflags.h, not everything

2004-05-22  Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (defstruct): avoid a compiler warning

2004-05-22  Sam Steingold  <sds@gnu.org>

	* spvw.d (init_object_tab): fixed a typo in features_initstring

2004-05-22  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp (regression-test::*expected-failures*):
	Add PRINT.ARRAY.2.12, PRINT.ARRAY.2.14, PRINT.ARRAY.2.16,
	PRINT.ARRAY.2.18, PRINT.ARRAY.2.19.

2004-05-22  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp (regression-test::*expected-failures*):
	Remove MAKE-INSTANCES-OBSOLETE.2, PRINT.SYMBOL.PREFIX.3. Paul fixed
	them.

2004-05-22  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (symbol_): Add a filler for LINUX_NOEXEC_HEAPCODES. Check
	that the size is a multiple of varobject_alignment.
	* genclisph.d (main): Update.
	* constsym.d (LISPSYM_B): Add initializer for filler.

2004-05-22  Bruno Haible  <bruno@clisp.org>

	* spvw_weak.d (MARK): Use canon() instead of canonaddr().

2004-05-21  Bruno Haible  <bruno@clisp.org>

	New heapcodes scheme for Linux/x86 systems.
	* lispbibl.d: Recognize CFLAGS macros STANDARD_HEAPCODES,
	LINUX_NOEXEC_HEAPCODES.
	(STANDARD_HEAPCODES, LINUX_NOEXEC_HEAPCODES): New macros.
	(LINUX_NOEXEC_HEAPCODES): Use garcol_bit_o = 0.
	(machine_bias, varobject_bias, cons_bias, immediate_bias, subr_bias,
	imm_type_shift, fixnum_type, sfloat_type, char_type, read_label_type,
	system_type, sign_bit_t, sign_bit_o, bignum_bit_o, number_immediatep,
	varobjects_misaligned, nonimmediate_bias_mask,
	nonimmediate_heapcode_mask, type_data_object, type_zero_oint,
	immediate_object_p, gcinvariant_object_p, gcinvariant_bias_p)
	[LINUX_NOEXEC_HEAPCODES]: New definitions for LINUX_NOEXEC_HEAPCODES.
	(varobject_alignment): Define to 8 for LINUX_NOEXEC_HEAPCODES.
	(consp, varobjectp): Generalize for LINUX_NOEXEC_HEAPCODES.
	(subrp) [LINUX_NOEXEC_HEAPCODES]: New definition for
	LINUX_NOEXEC_HEAPCODES.
	(immsubrp) [HEAPCODES]: New macro.
	(machinep) [LINUX_NOEXEC_HEAPCODES]: New definition for
	LINUX_NOEXEC_HEAPCODES.
	(case_Rectype_Subr_above): New macro.
	(FB5, FB4, FB3, FB2, FB1): New definitions for
	LINUX_NOEXEC_HEAPCODES.
	(makebottomword, framesize): New macros.
	(framecode) [LINUX_NOEXEC_HEAPCODES]: New definition for
	LINUX_NOEXEC_HEAPCODES.
	(topofframe, framebottomword): Simplify by using framesize,
	makebottomword.
	* genclisph.d (main): Update. Emit definitions of HEAPCODES,
	makebottomword.
	* spvw.d (main): If TRIVIALMAP_MEMORY & SPVW_MIXED_BLOCKS_STAGGERED
	& LINUX_NOEXEC_HEAPCODES, use 0xBF000000 as upper bound for all heaps.
	* spvw_garcol.d (alive) [HEAPCODES]: Make it work for
	LINUX_NOEXEC_HEAPCODES too.
	* spvw_gcmark.d (gc_mark) [HEAPCODES]: Make it work for
	LINUX_NOEXEC_HEAPCODES too.
	* spvw_memfile.d (loadmem_update) [HEAPCODES]: Make it work for
	LINUX_NOEXEC_HEAPCODES too; SUBRs are indistiguishable from Records
	here.
	* eval.d (eval1) [HEAPCODES]: Update for changed representation of
	subrs.
	* io.d (prin_object_dispatch) [HEAPCODES]: Update for changed
	representation of subrs.
	* hashtabl.d (sxhash_atom) [HEAPCODES]: Update for changed
	representation of subrs.
	* predtype.d (TYPE-OF, CLOS:CLASS-OF, heap_statistics_mapper)
	[HEAPCODES]: Update for changed representation of subrs.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (char_int): Make it work when some heapcode bits are
	in the high bits, not only in the low bits.
	* genclisph.d (main): Update.

2004-05-21  Bruno Haible  <bruno@clisp.org>

	Make it possible to enforce an alignment == 4 mod 8 of all varobjects
	in HEAPCODES mode.
	* lispbibl.d (varobjects_misaligned, VAROBJECTS_ALIGNMENT_DUMMY_DECL):
	New macros.
	(conses_misaligned): New macro.
	(subr_t): Check that the size is a multiple of varobject_alignment.
	(DYNAMIC_8BIT_VECTOR, DYNAMIC_STRING): Enforce varobjects_misaligned.
	(subr_tab_, symbol_tab_): Add a varobjects_misaligned dummy decl.
	* genclisph.d (main): Emit varobjects_misaligned,
	VAROBJECTS_ALIGNMENT_DUMMY_DECL, varobject_alignment definitions.
	Update subr_tab_, symbol_tab_ definitions.
	* spvw.d (subr_anz, symbol_anz): Take varobjects_misaligned into
	account.
	(for_all_subrs, for_all_constsyms): Likewise.
	(init_subr_tab_1, init_symbol_tab_1, init_symbol_tab_2): Likewise.
	(init_symbol_functions): Likewise.
	(main): Likewise. Let heap_start point past the misaligned bytes.
	If SINGLEMAP_MEMORY || TRIVIALMAP_MEMORY, preallocate the first heap
	page. If SPVW_PAGES, initialize heap->misaligned.
	(dynload_modules): Take varobjects_misaligned into account.
	* spvw_heap.d (Heap) [SPVW_PAGES]: Add misaligned field.
	* spvw_global.d (check_gc_consistency): Take varobjects_misaligned into
	account.
	* spvw_garcol.d (gar_col_normal): If GENERATIONAL_GC, let generation 1
	respect varobjects_misaligned.
	(gc_compact_heap): Don't set a page's page_start and page_end before
	it is moved to the free_pages pool.
	* spvw_genera1.d (build_old_generation_cache): Allow for the
	possibility that heap_gen0_start has varobjects_misaligned.
	* spvw_allocate.d (make_space_gc_true): Take varobjects_misaligned into
	account.
	(make_space_gc_false): Assume map_pagesize is a power of 2.
	(make_space_gc) [SPVW_PAGES]: Take a Heap* as argument, not a Pages*.
	Take varobjects_misaligned into account. Set a page's page_start and
	page_end when taking it from the free_pages pool.
	(make_space) [SPVW_PAGES]: Update.
	* spvw_memfile.d (WRITE_page_alignment, READ_page_alignment): Add
	parens where needed.
	(savemem): Write out zero-bytes to enforce the varobjects_misaligned.
	(loadmem_from_handle): Take varobjects_misaligned into account.
	If SINGLEMAP_MEMORY || TRIVIALMAP_MEMORY, mmap also the zero-bytes
	that enforce the varobjects_misaligned.
	* spvwtabf.d (subr_tab_data): Enforce varobject_alignment. Add
	varobjects_misaligned dummy bytes at the beginning.
	(subr_tab_data_size): Take varobjects_misaligned into account.
	* spvwtabs.d (symbol_tab_data): Enforce varobject_alignment. Add
	varobjects_misaligned dummy bytes at the beginning.
	* modules.d (MODULE, modules): Add the varobjects_misaligned bytes at
	the beginning of the module's subr_tab.
	* affi.d (module__affi__subr_tab): Likewise.
	* utils/modprep.lisp (print-tables-1, print-tables-2): Likewise.
	* utils/modpreptest.out: Update.

2004-05-18  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (number_immediatep): New macro.
	(positivep, _R_sign) [!TYPECODES]: Use it.
	* flo_rest.d (floatcase): Likewise.

2004-05-18  Bruno Haible  <bruno@clisp.org>

	Make the Subr objects look like XRecords, to simplify gc_mark.
	* lispbibl.d (Rectype_Subr): New enumeration item.
	(subr_t): Add XRECORD_HEADER and move the lispfunction after the
	GC-visible fields.
	(subr_const_offset, subr_const_anz): Remove macros.
	(subr_length, subr_xlength): New macros.
	* genclisph.d (main): Update definitions of subr_t and LISPFUN_F.
	* subr.d (LISPFUN_D, LISPFUN_F, LISPFUN_G): Also initialize the subrs'
	GCself and type, flags and length.
	* spvw.d (init_subr_tab_1, init_other_modules_1, init_module_2,
	dynload_modules): Also initialize the subrs' GCself.
	* spvw_update.d (update_subr_tab): Don't use subr_const_offset.
	* spvw_garcol.d (gc_markphase): Treat subrs like constsyms.
	(alive): The mark bit is now at the beginning of the Subr.
	(unmark_fixed_varobjects): Unmark the constsyms and subrs, even if
	GENERATIONAL_GC.
	* spvw_gcmark.d (down_subr, up_subr): Only needed if HEAPCODES.
	(gc_mark): Treat subrs like other SXRecords.

	* lispbibl.d (subr_tab_ptr_as_object): Make more portable.
	* genclisph.d (main): Update.

2004-05-18  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Rename NO_TYPECODES to HEAPCODES.
	* spvw.d: Likewise.
	* encoding.d: Likewise.
	* genclisph.d: Likewise.
	* makemake.in: Likewise.

2004-05-21  Sam Steingold  <sds@gnu.org>

	* io.d (pr_array): respect CUSTOM:*PRINT-EMPTY-ARRAYS-ANSI*
	* constsym.d (print_empty_arrays_ansi): added
	* misc.d (SET-ANSI): set CUSTOM:*PRINT-EMPTY-ARRAYS-ANSI*
	* spvw.d (init_symbol_values): defvar CUSTOM:*PRINT-EMPTY-ARRAYS-ANSI*
	* places.lisp (*ansi*): mention in documentation

2004-05-21  Sam Steingold  <sds@gnu.org>

	* stream.d (SOCKET-STREAM-SHUTDOWN): avoid a GCC warning

2004-05-21  Sam Steingold  <sds@gnu.org>

	* stream.d (wr_ch_terminal3, wr_ch_array_terminal3): respect
	the terminal stream encoding EOL slot

2004-05-21  Sam Steingold  <sds@gnu.org>

	* spvw.d (init_object_tab): added memory model information to
	*FEATURES*
	* constobj.d (software_type): use "cflags.h"
	* makemake.in (cflags.h): new target

2004-05-08  Bruno Haible  <bruno@clisp.org>

	New data types containing weak references.
	* lispbibl.d (Rectype_MutableWeakList, Rectype_MutableWeakAlist)
	(Rectype_Weakmapping, Rectype_WeakList, Rectype_WeakAnd, Rectype_WeakOr)
	(Rectype_WeakAndMapping, Rectype_WeakOrMapping, Rectype_WeakAlist_Key)
	(Rectype_WeakAlist_Value, Rectype_WeakAlist_Either)
	(Rectype_WeakAlist_Both): New enum values.
	(WeakList, MutableWeakList, WeakAnd, WeakOr, Weakmapping)
	(WeakAndMapping, WeakOrMapping, WeakAlist, MutableWeakAlist): New types.
	(mutableweaklist_length, weakmapping_length, mutableweakalist_length):
	New macros.
	(TheMutableWeakList, TheWeakList, TheWeakAnd, TheWeakOr)
	(TheWeakmapping, TheWeakAndMapping, TheWeakOrMapping)
	(TheMutableWeakAlist, TheWeakAlist): New macros.
	(SXrecord_nonweak_length, Lrecord_nonweak_length): Return 0 also for
	the new weak data types.
	(activate_weak): New declaration.
	* spvw_gcmark.d: New file, extracted from spvw_garcol.d.
	(gc_mark): Handle Rectype_WeakList, Rectype_WeakAnd, Rectype_WeakOr,
	Rectype_WeakAndMapping, Rectype_WeakOrMapping, Rectype_WeakAlist_* as
	Lrecords.
	* spvw_weak.d: New file.
	* spvw_garcol.d (gc_mark): Move away to spvw_gcmark.d. Include
	spvw_gcmark.c, spvw_weak.c.
	(gar_col_normal): Invoke gc_mark_weakpointers and clean_weakpointers.
	Remove old handling of O(all_weakpointers).
	* spvw_circ.d (get_circ_mark, get_circ_unmark): Handle
	Rectype_MutableWeakList, Rectype_MutableWeakAlist, Rectype_Weakmapping,
	Rectype_WeakList, Rectype_WeakAnd, Rectype_WeakOr,
	Rectype_WeakAndMapping, Rectype_WeakOrMapping, Rectype_WeakAlist_*.
	* spvw.d (main): Initialize markwatchset.
	* spvw_memfile.d (loadmem_from_handle): Likewise.
	* weak.d: New file.
	* record.d (mk_weakpointer, MAKE-WEAK-POINTER, WEAK-POINTER-P)
	(check_weakpointer_replacement, check_weakpointer, WEAK-POINTER-VALUE)
	(SETF WEAK-POINTER-VALUE): Move to weak.d.
	* io.d (pr_orecord): Handle Rectype_MutableWeakList,
	Rectype_MutableWeakAlist, Rectype_Weakmapping, Rectype_WeakList,
	Rectype_WeakAnd, Rectype_WeakOr, Rectype_WeakAndMapping,
	Rectype_WeakOrMapping, Rectype_WeakAlist_*.
	* predtype.d (TYPE-OF, CLASS-OF): Handle Rectype_MutableWeakList,
	Rectype_MutableWeakAlist, Rectype_Weakmapping, Rectype_WeakList,
	Rectype_WeakAnd, Rectype_WeakOr, Rectype_WeakAndMapping,
	Rectype_WeakOrMapping, Rectype_WeakAlist_*.
	(enum_hs_weak_list, enum_hs_weak_alist, enum_hs_weakmapping)
	(enum_hs_internal_weak_list, enum_hs_weak_and_relation)
	(enum_hs_weak_or_relation, enum_hs_weak_and_mapping)
	(enum_hs_weak_or_mapping, enum_hs_internal_weak_alist): New enum values.
	(heap_statistics_mapper): Handle Rectype_MutableWeakList,
	Rectype_MutableWeakAlist, Rectype_Weakmapping, Rectype_WeakList,
	Rectype_WeakAnd, Rectype_WeakOr, Rectype_WeakAndMapping,
	Rectype_WeakOrMapping, Rectype_WeakAlist_*.
	* init.lisp: Export symbols relating to weak-list, weak-and-relation,
	weak-or-relation, weak-mapping, weak-and-mapping, weak-or-mapping,
	weak-alist from EXT.
	* places.lisp (setf weak-pointer-value): Define as a function alias.
	(setf weak-list-list, setf weak-mapping-value)
	(setf weak-and-mapping-value, setf weak-or-mapping-value)
	(setf weak-alist-contents, setf weak-alist-value): New aliases.
	* makemake.in (CPARTS): Add weak.
	(SPVW_INCLUDES): Add spvw_gcmark, spvw_weak.
	* po/Makefile.devel (DSOURCES): Add spvw_gcmark, spvw_weak, weak.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	Make it possible to attach a documentation string to classes without
	a proper name.
	* lispbibl.d (Class): Add documentation field.
	* clos-class2.lisp (class): Add documentation slot.
	(ensure-class): Don't call sys::%set-documentation.
	(initialize-instance-standard-class, initialize-instance-built-in-class)
	(initialize-instance-structure-class): Initialize the documentation
	slot.
	* documentation.lisp (documentation, (setf documentation)): For
	classes, use the documentation string in the class. For symbols and
	'type, look in the class first.

2004-05-15  Bruno Haible  <bruno@clisp.org>

	Fix bug that prevents functions named (SETF FOO) from being inlined
	(bug introduced in clisp-2.26).
	* compiler.lisp (c-GLOBAL-FUNCTION-CALL, c-APPLY): Compare function
	names with EQUAL, not EQ.

2004-05-05  Bruno Haible  <bruno@clisp.org>

	* type.lisp (upgraded-complex-part-type): Change result to be as
	precise as possible. Add environment argument.
	* subtypep.lisp (COMPLEX): Call upgraded-complex-part-type where
	appropriate.

2004-05-05  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_pair): New function.
	(pr_kvtable): Use it.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	Change the default-initargs representation to match the MOP.
	* record.d (CLOS::%MAKE-INSTANCE): Assume each default initarg is
	in the form (symbol form func) instead of (symbol . initer).
	* clos-class2.lisp (defclass): Produce :DIRECT-DEFAULT-INITARGS
	as a list of (symbol form func).
	(ensure-class, equal-default-initargs,
	finalize-instance-standard-class, initialize-instance-structure-class):
	Update.

2004-05-17  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Rewrite a preprocessor expression, to avoid a gcc
	warning.

2004-05-17  Sam Steingold  <sds@gnu.org>

	* condition.lisp: add package prefix in the WITHOUT-PACKAGE-LOCK form

2004-05-17  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): do not print memory model information here
	* misc.d (SOFTWARE-TYPE): return O(software_type)
	instead of "ANSI C program"
	* constobj.d (software_type): memory model information

2004-05-16  Bruno Haible  <bruno@clisp.org>

	Fix (SIGNUM negative-single-float) on 64-bit machines.
	* aridecl.d (make_FF) [IMMEDIATE_FFLOAT]: Cast the data to 32 bits,
	otherwise a negative sign overflows into the type bits.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* clos-class5.lisp (change-class): Don't copy the values of slots that
	are shared in the new class.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* record.d (check_initialization_argument_list): Change error type
	to PROGRAM-ERROR.
	* clos-class5.lisp (check-initialization-argument-list): Likewise.

2004-05-16  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c (BDB:ENV-CREATE): 4.2 uses
	DB_RPCCLIENT while 4.1 used DB_CLIENT

2004-05-16  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main) [TYPECODES && HAVE_SMALL_SSTRING]: Fix the
	definition of TheS8string, TheS16string, TheS32string.

2004-05-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (NO_ARI_ASM): Define if SAFETY==3.
	(begin_arith_call, end_arith_call): Don't test SAFETY any more.
	* arilev1.d (LOOP_INLINE_ASM, LOOP_EXTERN_ASM): Likewise.

2004-05-16  Sam Steingold  <sds@gnu.org>

	* unix/malloc.c (printf_address): align output
	(test_malloc): new function
	(main): when no arguments give, try the whole range

2004-05-16  Bruno Haible  <bruno@clisp.org>

	* spvw_garcol.d (gc_mark) [TYPECODES]: Fix bug in handling of
	reallocated simple-string (2004-02-18 patch).

2004-05-15  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (with-no-package-lock-internal): new macro:
	evaluates the package list
	(without-package-lock): use WITH-NO-PACKAGE-LOCK-INTERNAL
	* compiler.lisp (c-WITHOUT-PACKAGE-LOCK): wrap c-FORM call in
	WITH-NO-PACKAGE-LOCK-INTERNAL so that it works during
	macroexpansion too (e.g., with DEFMETHOD)

2004-05-15  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/sock.lisp (open-unix-socket): pass second
	argument to NAMESTRING (CLISP extension, to be removed)
	(close): define a method which calls SOCK-CLOSE

2004-05-15  Sam Steingold  <sds@gnu.org>

	* modules/clx/mit-clx/defsystem.lisp (compile-clx, load-clx):
	compile and load "shape"

2004-05-14  Sam Steingold  <sds@gnu.org>

	* init.lisp (*documentation*): still non-weak: although works on
	cygwin, might still break on other platforms

2004-05-14  Sam Steingold  <sds@gnu.org>

	new macro DEFCHECKER for modules
	* utils/modprep.lisp: OBJDEF-INIT can now be a list
	(write-string-c-style): new function
	(init-to-tag): use it
	(string-upcase-verbose): new function
	(new-objdef): use it
	(cpp-helper): new defstruct
	(flag-set): include it
	(checker): new defstruct for DEFCHECKER
	(*checkers*, new-checker): added
	(def-something-p): replaces DEF-FLAG-SET-P
	(parse): call it for both DEFFLAGSET and DEFCHECKER
	(print-tables-1): print OBJDEF-INIT with possible conditions,
	print *CHECKERS*
	* modules/rawsock/rawsock.c (check_socket_domain, check_socket_type)
	(check_socket_protocol): use DEFCHECKER
	* modules/syscalls/calls.c (mknod_type_check): ditto

2004-05-14  Sam Steingold  <sds@gnu.org>

	* init.lisp (*documentation*): weak hash table now

2004-05-13  Sam Steingold  <sds@gnu.org>

	new macro DEFFLAGSET for modules
	* utils/modprep.lisp (parse-name): new function
	(defun-p): use it
	(flag-set, *flag-sets*, new-flag-set, def-flag-set-p): added
	(parse): call DEF-FLAG-SET-P
	(print-tables-1): output flag sets
	* modules/berkeley-db/bdb.c, modules/pcre/cpcre.c:
	* modules/rawsock/rawsock.c, modules/regexp/regexi.c: use DEFFLAGSET
	* genclisph.d (posfixnum_default): new inline function

2004-05-13  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/rawsock.c (my_check_argument):
	pushSTACK(NIL) for PLACE

2004-05-13  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c [__sun__]: make sure that we do get
	prototypes for confstr() and lgamma_r()

2004-05-13  Sam Steingold  <sds@gnu.org>

	* dribble.lisp (dribble-toggle): FRESH-LINE before the final message

2004-05-13  Bruno Haible  <bruno@clisp.org>

	* error.d (check_array_replacement): Use a more factual, less arrogant
	error message.

2004-05-13  Sam Steingold  <sds@gnu.org>

	* utils/clispload.lsp (regression-test::*expected-failures*):
	Paul fixed ENSURE-DIRECTORIES-EXIST.8

2004-05-02  Bruno Haible  <bruno@clisp.org>

	New type of records, LRECORD: no flags but max. 2^24 elements.
	* lispbibl.d (weakkvt_type): Remove macro.
	(mdarray_type): Choose highest values less than the other array type
	codes.
	(lrecord_type): New macro.
	(case_weakkvt): Remove macro.
	(case_lrecord): New macro.
	(case_array): Remove weakkvt_type.
	(case_sxrecord): New macro.
	(case_record): Add lrecord_type.
	(lrecord_tfl): New macro.
	(record_): Move the rectype to be the first field after GCself.
	(LRECORD_HEADER): New macro.
	(lrecord_, Lrecord): New types.
	(lrecord_length, Lrecord_length): New macros.
	(SRECORD_HEADER, XRECORD_HEADER): Update.
	(rectype_longlimit): New enumeration value.
	(Rectype_WeakKVT): Change so it is >= rectype_longlimit.
	(Stream): Move the strmtype to be the first field here as well.
	(TheSarray): Remove weakkvt_type.
	(TheWeakKVT, TheRecord): Update.
	(TheLrecord): New macro.
	(TheVarobject, ThePointer): Add instance_type, lrecord_type.
	(SXrecord_length): Renamed from Record_length.
	(SXrecord_nonweak_length): Renamed from Record_nonweak_length.
	(Lrecord_nonweak_length, Record_length, Record_nonweak_length): New
	macros.
	(lrecordp): New macro.
	(weakkvtp): Use lrecordp.
	(case_Rectype_WeakKVT_above): Remove macro.
	(case_Rectype_array_above): Remove Rectype_WeakKVT.
	(allocate_lrecord): New declaration.
	(allocate_srecord, allocate_xrecord): Update.
	* spvw_multimap.d (MM_TYPECASES): Handle lrecords as well.
	* spvw_global.d (init_mem_heaptypes): Don't handle weakkvt specially.
	* spvw_objsize.d (size_lrecord): New macro.
	(objsize): Handle lrecords as well. Don't handle weakkvt specially.
	(objsize_sxrecord): Renamed from objsize_record.
	(objsize_lrecord): New function.
	(init_objsize_table): Handle lrecords as well. Don't handle weakkvt
	specially.
	* spvw_update.d (do_update_sxrecord): Renamed from do_update_record.
	(do_update_lrecord): New macro.
	(update_sxrecord): Renamed from update_record.
	(update_lrecord): New macro.
	(update_varobject): Treat sxrecords and lrecords separately.
	* spvw_garcol.d (down_weakkvt, up_weakkvt): Remove macros.
	(down_lrecord, up_lrecord): New macros.
	(down_sxrecord): Renamed from down_record.
	(up_sxrecord): Renamed from up_record.
	(gc_mark): Handle lrecords as well. Don't handle weakkvt specially.
	* spvw_genera1.d (walk_area_record): Handle lrecords as well.
	(walk_area): Don't handle weakkvt specially.
	(build_old_generation_cache): Likewise. Handle lrecords as well.
	* spvw_typealloc.d (allocate_weakkvt_low): Use lrecord_type
	instead of lrecord_type.
	(allocate_lrecord, allocate_lrecord_): New functions.
	(allocate_srecord_, allocate_xrecord_, make_ratio, make_complex):
	Update.
	* spvw_circ.d (get_circ_mark, get_circ_unmark, subst_circ_mark, subst)
	(subst_circ_unmark): Handle lrecords as well.
	* io.d (prin_object_dispatch): Handle lrecords as well.
	* predtype.d (equalp): Compare lrecords like with EQ.
	(TYPE-OF): Handle lrecords as well. For weakkvt, return a symbol, not
	a list.
	(CLOS:CLASS-OF): Handle lrecords as well.
	(heap_statistics_mapper): Handle lrecords as well.
	* hashtabl.d (hashcode4_atom, sxhash_atom): Handle lrecords as well.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp (*expected-failures*): Add IMAGPART.4,
	MAKE-INSTANCES-OBSOLETE.2, TYPES.7B, TYPES.7C, USER-CLASS-DISJOINTNESS,
	USER-CLASS-DISJOINTNESS-2, TAC-3.16. Remove SHARED-INITIALIZE.ERROR.4.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	Add keyword argument checking to UPDATE-INSTANCE-FOR-REDEFINED-CLASS
	and UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.
	* clos-class5.lisp (*update-instance-for-redefined-class-table*)
	(*update-instance-for-different-class-table*): New variables.
	(note-uirc-change, note-uidc-change): New functions.
	(defun note-si-change): Update also
	*update-instance-for-redefined-class-table* and
	*update-instance-for-different-class-table*.
	(valid-reinitialize-instance-keywords): New function, extracted from
	initial-reinitialize-instance.
	(valid-update-instance-for-redefined-class-keywords)
	(valid-update-instance-for-different-class-keywords)
	(check-initialization-argument-list): New functions.
	(initial-reinitialize-instance): Call
	valid-reinitialize-instance-keywords.
	(update-instance-for-different-class): Call
	valid-update-instance-for-different-class-keywords and check the
	initargs.
	(update-instance-for-redefined-class): Call
	valid-update-instance-for-redefined-class-keywords and check the
	initargs.
	* clos-genfun3.lisp (|#'update-instance-for-redefined-class|)
	(|#'update-instance-for-different-class|): New variables.
	(std-add-method, std-remove-method): Conditionally call
	note-uirc-change, note-uidc-change.

2004-05-12  Sam Steingold  <sds@gnu.org>

	* array.d (fehler_array, test_array): removed
	(subscripts_to_index): do not call test_array()
	(AREF, SYS::STORE, SBIT, BIT): use check_array()
	instead of relying on subscripts_to_index()
	(ROW-MAJOR-AREF, SYS::ROW-MAJOR-STORE, ARRAY-RANK)
	(ARRAY-DIMENSION, ARRAY-DIMENSIONS, ARRAY-TOTAL-SIZE)
	(ARRAY-IN-BOUNDS-P, ARRAY-ROW-MAJOR-INDEX, ADJUSTABLE-ARRAY-P)
	(ARRAY-HAS-FILL-POINTER-P, ADJUST-ARRAY):
	use check_array() instead of test_array()
	* error.d (check_array_replacement): implemented
	* lispbibl.d (check_array) [!COMPILE_STANDALONE]: implemented
	(check_array_replacement): declared
	* genclisph.d: ditto

2004-05-12  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCFLAGS) [SPARC64]: Use only -O, not -O2.

2004-05-01  Bruno Haible  <bruno@clisp.org>

	Rename LRECORD to VRECORD.
	* lispbibl.d (vrecord_tfl): Renamed from lrecord_tfl.
	(VRECORD_HEADER): Renamed from LRECORD_HEADER.
	(vrecord_): Renamed from lrecord_.
	(Vrecord): Renamed from Lrecord.
	(vrecord_length): Renamed from lrecord_length.
	(sarray_, sarray_length, sbvector_, svector_, weakkvt_t, ClassVersion)
	(Codevec, DYNAMIC_8BIT_VECTOR): Update.
	* spvw_typealloc.d (allocate_vector, allocate_weakkvt_low)
	(allocate_bit_vector): Update.
	* genclisph.d (main): Update.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* arilev0.d (divu_3232_3232_) [SPARC64]: Define also for SPARC64.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* lfloat.d (LF_shorten_LF, LF_LF_plus_LF, LF_square_LF, LF_LF_mal_LF)
	(LF_LF_durch_LF, I_to_LF): Cast LF_exp_high+1 down to 32 bits.
	Needed for 64-bit platforms.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (bit_test): Make it work on SPARC64.
	* genclisph.d (main): Update accordingly.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* arisparc64.d: Add register declaration for %g2.
	(copy_loop_down): Fix wrong register.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* arilev0.d (mulu32) [SPARC64]: Fix asm syntax.

2004-05-11  Sam Steingold  <sds@gnu.org>

	* lispbibl.d [SPARC64]: use Bits 63..48 for type code, bits 47..0
	for address always, not just when defined(NO_SINGLEMAP).
	Needed for Solaris.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	Optimize constants a little better.
	* compiler.lisp (c-NIL): Use *seclass-foldable* instead of
	*seclass-pure*.
	(c-CONST): Use *seclass-foldable* instead of *seclass-pure*, if
	appropriate.
	(c-PROGN, c-AND, c-OR, c-QUOTE, c-SETQ, c-PSETQ, c-MULTIPLE-VALUE-SETQ)
	(c-TAGBODY): Use *seclass-foldable* instead of *seclass-pure*.

2004-05-11  Bruno Haible  <bruno@clisp.org>

	* arilev0.d (divu_3216_1616) [SPARC64]: Add missing newline in asm
	statement.
	(divu_3216_3216, divu_3232_3232, divu_6432_3232) [SPARC64]: Likewise.

2004-05-11  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-form-table): treat =,/=,>,>=,<,<= specially
	(c-COMPARE-NUMBERS): try to convert = and other numeric
	comparisons to ZEROP &c

2004-05-08  Bruno Haible  <bruno@clisp.org>

	* control.d (check_setq_body): Fix GC-safety bug introduced on
	2003-05-20.
	* eval.d (progv): Likewise.
	* i18n.d (SYS::SET-CURRENT-LANGUAGE): Fix GC-safety bug introduced on
	2003-05-01.
	* misc.d (push_envar): Fix GC-safety bug introduced on 2003-07-28.
	* pathname.d (PARSE-NAMESTRING): Fix GC-safety bug introduced on
	2002-08-01.

2004-05-03  Bruno Haible  <bruno@clisp.org>

	* subrkw.d: Reorder, to match the order in subr.d.

2004-04-30  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (MULTIBUILD_OPTIONS): New variable.
	(multibuild-linux-x86): New target.

2004-04-30  Bruno Haible  <bruno@clisp.org>

	Fixes for the TYPECODES model on 32-bit platforms.
	* intlog.d (I_I_logand_I, I_I_lognand_I, I_I_logandc2_I): Fix bug
	when combining a fixnum with a bignum.

	* utils/clispload.lsp: Skip memory intensive test on 32-bit
	SPVW_PURE_BLOCKS platforms.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* condition.lisp (check-value): Fix bug in the CONTINUE restart.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* record.d (CLOS::%CHANGE-CLASS): Remove third argument. Simplify.
	* clos-class5.lisp (change-class): Nop.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* defstruct.lisp (ds-slot-name, ds-slot-initargs, ds-slot-offset)
	(ds-slot-initer, ds-slot-initfunctionform, ds-slot-type)
	(ds-slot-readonly): Remove macros. Use clos::slot-definition-*
	accessors everywhere.
	(copy-<structure-effective-slot-definition>): Renamed from copy-ds-slot.
	* clos-class2.lisp: Update callers here as well.

2004-05-10  Sam Steingold  <sds@gnu.org>

	* subr.d, hashtabl.d (GETHASH): seclass_default because
	user-defined HASH-TABLE-TEST can do anything

2004-04-24  Bruno Haible  <bruno@clisp.org>

	Metaobject protocol for slot definitions.
	* lispbibl.d (classversion_length): New macro.
	(SlotDefinition): New type.
	(TheSlotDefinition): New macro.
	* record.d (SYS::%STRUCTURE-REF): Use new slot-definition-* accessors.
	(CLOS::ALLOCATE-METAOBJECT-INSTANCE): New function.
	(slot_in_arglist): Use new SlotDefinition accessors.
	(CLOS::%SHARED-INITIALIZE): Use new slot-definition-* accessors.
	Update for new initer layout: Avoid funcalling the initfunction by
	looking whether it's a constant_initfunction.
	(CLOS::%REINITIALIZE-INSTANCE): Use new SlotDefinition accessors.
	(do_initialize_instance): Use new slot-definition-* accessors.
	Update for new initer layout: Avoid funcalling the initfunction by
	looking whether it's a constant_initfunction.
	(CLOS::%MAKE-INSTANCE): Update for new initer layout: Avoid funcalling
	the initfunction by looking whether it's a constant_initfunction.
	* io.d (some_printable_slots, pr_structure_default): Use new
	SlotDefinition accessors.
	* clos-slotdef1.lisp: New file.
	* clos-slotdef2.lisp: New file.
	* clos-slotdef3.lisp: New file.
	* init.lisp: Export symbols of the slot-definition MOP.
	Load clos-slotdef1.
	* clos-package.lisp: Export symbols of the slot-definition MOP.
	* clos.lisp: Load clos-slotdef2 and clos-slotdef3.
	* defstruct.lisp (make-ds-slot, ds-slot-name, ds-slot-initargs,
	ds-slot-offset, ds-slot-initer, ds-slot-default, ds-slot-type,
	ds-slot-readonly, copy-ds-slot): Rewrite using slot-definition.
	(ds-slot-initfunctionform, ds-pseudo-slot-default): New macros.
	(ds-typep, ds-typep-expansion, ds-canonicalize-type): Use
	ds-pseudo-slot-default.
	(ds-arg-default): Rewritten using new initer semantics.
	(ds-make-pred, ds-make-constructor-body): Use ds-pseudo-slot-default.
	(defstruct): New initer semantics. Old initer semantics was completely
	unintelligible. Avoid add-backquote and add-unquote. Use new
	slot-definition-* accessors.
	* clos-class2.lisp (replace-class-version): New function.
	(defclass): Don't put :ACCESSORS into the slot specifiers for
	ensure-class. Use make-initfunction-form and put :INITFORM instead of
	:INITER into the slot-specifiers. Use make-initfunction-form also for
	the :DIRECT-DEFAULT-INITARGS argument.
	(make-initer): Remove function.
	(slot-definition, standard-slot-definition): Remove. Replaced by
	clos-slotdef1.lisp.
	(make-slotdef): Remove function.
	(ensure-class): Invoke convert-direct-slots. Invoke equal-direct-slots
	instead of equal-slots. In case of class redefinition, update
	slot-definition instances instead of lists.
	(equal-direct-slots): Renamed from equal-slots.
	(equal-slot): Remove function. Moved to clos-slotdef1.lisp.
	(initialize-instance-standard-class): Accept te direct-slots list in two
	different forms.
	(finalize-instance-standard-class): Use new slot-definition-* accessors.
	Use only the initfunction instead of the initer.
	(std-compute-slots): Works on direct-slot-definition instances now,
	instead of plists. Create effective-slot-definition instances, instead
	of slotdef instances. Don't lose the type and documentation of each
	slot. Rework the initform/initfunction handling. Call the MOP function
	effective-slot-definition-class.
	(std-layout-slots): Use new slot-definition-* accessors.
	(class-version-compute-slotlists): Likewise.
	(initialize-instance-structure-class): Likewise. Invoke
	convert-direct-slots.
	(define-structure-class): Use new slot-definition-* accessors.
	* clos-class5.lisp (change-class, update-instance-for-different-class):
	Use new slot-definition-* accessors.
	(slot-names): Likewise.
	* loadform.lisp (make-load-form-saving-slots): Use new
	slot-definition-* accessors.
	* documentation.lisp (documentation, (setf documentation)): Add a
	method for slot-definition.
	* makemake.in (LPARTS): Add clos-slotdef1, clos-slotdef2,
	clos-slotdef3.
	* po/Makefile.devel (LISPSOURCES): Add clos-slotdef1, clos-slotdef2,
	clos-slotdef3.

2004-05-07  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (unix) [__OpenBSD__]: define

2004-05-07  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/configure.in: <netinet/if_ether.h> requires
	<net/if.h> to be included before it, which, in turn, requires
	<sys/socket.h> to be included before it (on Solaris)

2004-05-07  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/configure.in: check for the library where erf()
	is implemented
	* modules/syscalls/link.sh.in (NEW_LIBS): "-m" will be in @LIBS@
	becausd of the above check

2004-05-07  Bruno Haible  <bruno@clisp.org>

	* makemake.in (CC_CPLUSPLUS): New variable.
	(XCFLAGS): When using g++ >= 3.4, add -Wno-invalid-offsetof.

2004-05-07  Bruno Haible  <bruno@clisp.org>

	* clos-package.lisp: Trivially import a few symbols not yet defined.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	Add ability to fix slot locations for all subclasses.
	* lispbibl.d (Class): Add fixed_slot_locations field.
	* clos-class2.lisp (standard-class): Add fixed-slot-locations field.
	(defclass): Pass the :fixed-slot-locations option to ensure-class.
	(ensure-class): Compare also the fixed-slot-locations value.
	(initialize-instance-standard-class): Handle a fixed-slot-locations
	argument.
	(std-compute-slots): Create a slotdef with location, if the slot is
	inherited from a superclass with fixed-slot-locations.
	(std-layout-slots): Respect constraints for slot locations already
	specified by a superclass.

2004-05-06  Sam Steingold  <sds@gnu.org>

	* modules/rawsock/rawsock.c: Solaris compilation fixes:
	include <string.h> for memcpy() &Co
	include <net/if.h> before <netinet/if_ether.h>
	declare check_socket_domain() before it is first used

2004-05-06  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 948784 ]: crash in pcre_free
	* modules/pcre/cpcre.c (module__pcre__init_function_2): reset
	pcre_malloc to malloc() and pcre_free to free() to avoid
	the FINALIZE crash

2004-04-24  Bruno Haible  <bruno@clisp.org>

	Fix problematic initialization protocol of standard-class and
	structure-class.
	* clos-class2.lisp (initialize-instance-standard-class): Call
	%initialize-instance. Initialize a few slots to nil.
	(initialize-instance-structure-class): Call %initialize-instance.
	* clos-class5.lisp (initialize-instance@standard-class,
	initialize-instance@structure-class): Remove (call-next-method) that
	doesn't belong here.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* clos-print.lisp: Renamed from clos-class4.lisp.
	* clos.lisp: Update.
	* makemake.in (LPARTS): Add clos-print, remove clos-class4.
	* po/Makefile.devel (LISPSOURCES): Add clos-print, remove clos-class4.

2004-05-05  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (hashcode_string): use all string elements

2004-05-05  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (SET-FILE-STAT, CONVERT-MODE, UMASK, MKNOD):
	implemented
	* modules/syscalls/posix.lisp: exported them

2004-05-05  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c (PCRE-FREE): set fp_pointer to NULL
	* modules/regexp/regexi.c (REGEXP-FREE): ditto

2004-05-05  Bruno Haible  <bruno@clisp.org>

	* makemake.in: Use "sed -n -e '$p'" instead of "tail -n 1".
	Needed for Solaris.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	Make very early CLOS available before DEFSTRUCT.
	* clos-class0.lisp: New file.
	* init.lisp: Load it.
	* clos-class2.lisp (class-version): Move away to clos-class0.lisp.
	* clos-class4.lisp (print-object): Undefine first. Don't use TYPEP
	on class-version.
	* clos.lisp: After clos-class5.lisp, set *classes-finished* and then
	only load clos-class4.lisp.
	* makemake.in (LPARTS): Add clos-class0.
	* po/Makefile.devel (LISPSOURCES): Add clos-class0.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* clos-package.lisp: Tweak.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* clos-package.lisp: New file, extracted from clos.lisp.
	* clos.lisp: Move the package setup away.
	* init.lisp: Load clos-package before defstruct.lisp.
	* makemake.in (LPARTS): Add clos-package.
	* po/Makefile.devel (LISPSOURCES): Add clos-package.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* places.lisp: Add defsetf for %record-ref and %structure-ref here.
	* compiler.lisp: Remove defsetf for %record-ref.
	* defstruct.lisp: Remove defsetf for %structure-ref.

2004-04-18  Bruno Haible  <bruno@clisp.org>

	* clos-class5.lisp (class-prototype): Don't mark the class as being
	instantiated.

2004-05-03  Sam Steingold  <sds@gnu.org>

	* disassem.lisp (disassemble): return when cannot disassemble

2004-05-03  Sam Steingold  <sds@gnu.org>

	* package.d (in_make_package): fixed a GC-safety bug which
	DEBUG_GCSAFETY cannot detect: object slots addresses, even though
	they are declared gcv_object_t, are _NOT_ valid gcv_object_t*!!

2004-04-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (SstringCase) [!UNICODE]: Add 5th argument.
	* subtypep.lisp (subtypep-CHARACTER-pre-simplify): Make it work when
	#-UNICODE.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* record.d (check_generic_function_replacement): New function,
	extracted from check_generic_function.
	(check_generic_function): Turn into an inline function.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	Appendix to 2004-03-15 patch.
	* record.d (check_initialization_argument_list): ~ -> ~S.
	* sequence.d (remove_op, delete_op, substitute_op): Likewise.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* init.lisp: Remove vestiges of syscalls.

2004-04-18  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (ensure-class): Handle errors that might occur
	during class redefinition.
	(update-subclasses-for-redefined-class): Take a 4th argument.

2004-05-02  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 946645 ]: rename-package does not accept
	package-designators
	* package.d (RENAME-PACKAGE): second argument can be a package
	designator

2004-05-02  Bruno Haible  <bruno@clisp.org>

	* makemake.in: Use "tail -n 1" instead of "tail -1".
	Suggested by SuSE.

2004-04-18  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Class): Add direct_accessors field.
	* clos-class2.lisp (standard-class): Add direct-accessors field.
	(defclass): Store DEFMETHOD results in the class' direct-accessors.
	(ensure-class): Remove accessor methods installed by previous version
	of the class.

2004-04-22  Bruno Haible  <bruno@clisp.org>

	Special representation of slot initfunctions for constants.
	* lispbibl.d (init_cclosures): New declaration.
	* eval.d (bytecode_enum_t): Define unconditionally.
	(init_cclosures): New function.
	* spvw.d (init_object_tab): Call it.
	* record.d (SYS::MAKE-CONSTANT-INITFUNCTION,
	SYS::CONSTANT-INITFUNCTION-P): New functions.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	* record.d (check_weakpointer_replacement, check_weakpointer): New
	functions.
	(check_weak_pointer): Remove function.
	(WEAK-POINTER-VALUE, SET-WEAK-POINTER-VALUE): Update.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* functions.lisp: New file, extracted from trace.lisp, compiler.lisp.
	* init.lisp: Load it.
	* trace.lisp (check-function-name): Moved to functions.lisp.
	* compiler.lisp (signature): Moved to functions.lisp.
	* clos.lisp: Update.
	* makemake.in (LPARTS): Add functions.
	* po/Makefile.devel (LISPSOURCES): Add functions.

2004-04-15  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (ensure-class): Pass the old finalized and
	direct-superclasses status to update-subclasses-for-redefined-class.
	(update-subclasses-for-redefined-class,
	update-subclasses-for-redefined-class-nonrecursive): Update the
	direct-subclasses lists of the superclasses correctly.

2004-04-29  Bruno Haible  <bruno@clisp.org>

	* disassem.lisp (*disassemble-use-live-process*): New variable.
	(disassemble-machine-code): Use it.
	* .gdbinit (ansi_tests): Set it to nil.

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* reploop.lisp (main-loop, break-loop, step-hook-fn): Install a ABORT
	restart.

2004-04-23  Bruno Haible  <bruno@clisp.org>

	Make DEFPACKAGE available earlier during bootstrap.
	* defpackage.lisp: New file, extracted from defs2.lisp.
	* defs2.lisp (defpackage): Remove macro.
	* init.lisp: Load defpackage.
	* makemake.in (LPARTS): Add defpackage.
	* po/Makefile.devel (LISPSOURCES): Add defpackage.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main) [TYPECODES]: Emit consp, atomp, mconsp, matomp
	correctly.

2004-04-13  Bruno Haible  <bruno@clisp.org>

	Make the pointers to the direct subclasses weak.
	* clos-class2.lisp (finalize-instance-standard-class): Use
	add-direct-subclass.
	(map-direct-subclasses, add-direct-subclass, remove-direct-subclass):
	New functions.
	(list-direct-subclasses): Use map-direct-subclasses.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	Simplify handling of weak pointers.
	* lispbibl.d (weakpointer_length): Set to the total length.
	(weakpointer_xlength): Remove macro.
	(weakkvt_non_data): Remove macro.
	(weakkvt_length): New macro.
	(Weakkvt_length): Use it.
	(Record_nonweak_length): New macro.
	* spvw_update.d (do_update_record): Don't use update_weak_pointers
	any more.
	(update_weakpointer, update_weakpointers, update_weakpointers_mod):
	Remove macros.
	(update_weakkvtable, update_weakkvtables, update_weakkvtables_mod):
	Remove macros.
	* spvw_garcol.d (down_record): Use Record_nonweak_length.
	(gar_col_normal): Remove calls to update_weakpointers_mod,
	update_weakkvtables_mod.
	(move_conses): Likewise.
	* spvw_memfile.d: Update.
	* spvw_typealloc.d (allocate_weakkvt_low): Update.
	* spvw_circ.d (subst_circ_mark, subst, subst_circ_unmark): Likewise.
	* record.d (mk_weakpointer): Declare inline. Use 0 instead of
	weakpointer_xlength.
	* hashtabl.d (hashcode4_atom): Use Record_nonweak_length.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	Make weak-pointers work also on SPVW_PAGES platforms.
	* spvw_update.d (do_update_record): Depending on update_weak_pointers,
	update also the hidden pointers of Weakpointer and WeakKVT objects.
	* spvw_garcol.d (gar_col_normal): Define update_weak_pointers to false.
	(gar_col_compact): Don't call update_weakpointers_mod,
	update_weakkvtables_mod. Instead, define update_weak_pointers to true.
	(move_conses): Call update_weakpointers instead of
	update_weakpointers_mod, update_weakkvtables instead of
	update_weakkvtables_mod. Define update_weak_pointers to false.
	* spvw_memfile.d (savemem): Don't call update_weakpointers,
	update_weakkvtables. Instead, define update_weak_pointers to true.
	(loadmem_from_handle): Likewise.

2004-04-29  Sam Steingold  <sds@gnu.org>

	* pathname.d (PARSE-NAMESTRING): Fix a GC-safety bug.

2004-04-28  Sam Steingold  <sds@gnu.org>

	* comptran.d (N_cosh_N): Fix a GC-safety bug.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	* charstrg.d (stringof): Fix a GC-safety bug.

2004-04-28  Bruno Haible  <bruno@clisp.org>

	Make DEBUG_GCSAFETY work with g++ 3.4.0.
	* lispbibl.d (INIT_SUBR_TAB, INIT_SYMBOL_TAB, INIT_OBJECT_TAB): Treat
	g++ 3.4 like g++ 3.3.
	* spvw_garcol.d (gc_sweep1_sstring_target, gc_sweep1_instance_target):
	Use assignment instead of initialization. Works around GCC bug #15180,
	that will be fixed in GCC 3.5.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* loadform.lisp (mlf-init-function): Return a FUNCTION form with a
	suitable name. Add (DECLARE (COMPILE)) when appropriate.
	(make-init-form): Use EVAL instead of COMPILE.

2004-04-24  Bruno Haible  <bruno@clisp.org>

	* describe.lisp (write-to-short-string): Move to ...
	* defs1.lisp (write-to-short-string): ... here.

2004-04-23  Bruno Haible  <bruno@clisp.org>

	Restore debuggability during loading of init.lisp.
	* debug.d (ext_show_stack): New function.

2004-04-22  Bruno Haible  <bruno@clisp.org>

	Restore debuggability during loading of init.lisp.
	* debug.d (SYS::INITIAL-BREAK-DRIVER): New function.
	* init.lisp (cerror): Invoke INITIAL-BREAK-DRIVER instead of
	*BREAK-DRIVER*.

2004-04-22  Bruno Haible  <bruno@clisp.org>

	* macros2.lisp (assert): Fix macro broken on 2003-05-01.

2004-04-13  Bruno Haible  <bruno@clisp.org>

	Fix MAKE-INSTANCES-OBSOLETE's warning message.
	* clos-class2.lisp (*make-instances-obsolete-caller*): New variable.
	(ensure-class): Bind it.
	(make-instances-obsolete-standard-class-nonrecursive): Use it in the
	warning message.

2004-04-27  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (CRYPT, ENCRYPT, SETKEY): implemented
	(get_block, set_block): helpers for ENCRYPT and SETKEY
	* modules/syscalls/posix.lisp (crypt, encrypt, setkey) [UNIX]: export

2004-04-27  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): fixed last patch: pattern may be NIL

2004-04-27  Kaz Kylheku  <kaz@ashi.footprints.net>

	* backquote.lisp (quoted-bq-operator-p, bq-constant-p, bq-eval):
	New functions.
	(bq-optimize-list): Use special rules to determine what is a
	constant expression, and how to evaluate it.
	E.g instance (LIST 1 (QUOTE (UNQUOTE (+ 2 2)))) is reduced
	to (QUOTE (1 4)) because (QUOTE (UNQUOTE (+ 2 2))) is considered a
	BQ-CONSTANT-P expression, with the rule that it evaluates to 4
	under BQ-EVAL.
	(bq-optimize-list*): If the last element is (QUOTE ...), do not
	break it up into individual elements if it is a quoted backquote
	operator.  E.g. (LIST* 1 (QUOTE (UNQUOTE X))) must not turn
	into (LIST 1 'UNQUOTE 'X).

2004-04-13  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (finalize-instance-standard-class): Register this
	class also as subclass of <standard-object>, even if <standard-object>
	is not explicitly listed among the direct subclasses. Needed so
	that (make-instances-obsolete 'standard-object) works.

2004-04-26  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): use FUNCTION-FORM-FUNFORM instead of
	ad hoc inline code; avoid creating an unnecessary auxiliary
	variable (shortens the byte code)

2004-04-26  Sam Steingold  <sds@gnu.org>

	* makemake.in (init): do not treat "bindings" modules
	subdirectory specially

2004-04-26  Sam Steingold  <sds@gnu.org>

	* error.d (check_classname): new function for modules
	* genclisph.d (main): declare check_classname()
	* rawsock/rawsock.c, pcre/cpcre.c, berkeley-db/bdb.c, dirkey/dirkey.c:
	use check_classname() and typep_classname() instead of ad hoc checks

2004-04-25  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (fehler_class): New declaration.
	(typep_class, typep_classname): New declarations.
	* error.d (fehler_class): New function, moved here from record.d.
	* record.d (fehler_keine_klasse): Remove function.
	(CLOS::ALLOCATE-STD-INSTANCE): Use fehler_class instead.
	* predtype.d (typep_class, CLOS::TYPEP-CLASS, typep_classname): New
	functions.
	* genclisph.d (main): Emit typep_class, typep_classname declarations.
	* type.lisp (clos::subclassp): Remove preliminary definition.
	(typep): Use clos::typep-class instead of clos::subclassp.
	(c-TYPEP): Emit call to clos::typep-class instead of clos::subclassp.
	* clos-class5.lisp (note-i-meta-change, valid-make-instance-keywords):
	Use clos::typep-class instead of clos::subclassp.
	* modules/clx/new-clx/clx.f (isa_instance_of_p, isa_struct_p): Remove
	functions. Use typep_classname instead.

2004-04-13  Bruno Haible  <bruno@clisp.org>

	Let make-instances-obsolete recurse into each subclass only once, even
	in case of multiple inheritance.
	* clos-class2.lisp (make-instances-obsolete-standard-class): Apply
	make-instances-obsolete-standard-class-nonrecursive to all subclasses.
	(make-instances-obsolete-standard-class-nonrecursive): New function.
	(update-subclasses-for-redefined-class): Apply
	update-subclasses-for-redefined-class-nonrecursive to all subclasses.
	(update-subclasses-for-redefined-class-nonrecursive): New function.
	(list-direct-subclasses, list-all-subclasses): New functions.

2004-04-25  Sam Steingold  <sds@gnu.org>

	* describe.lisp (describe-object): since 2004-02-19,
	PATHNAME-DEVICE of a LOGICAL-PATHNAME can be :UNSPECIFIC

2004-04-23  Sam Steingold  <sds@gnu.org>

	* rawsock/rawsock.c, rawsock/sock.lisp: renamed CLOSESOCK to
	SOCK-CLOSE for consistency with SOCK-READ and SOCK-WRITE
	(sockaddr-family-size, sockaddr-data): added

2004-04-23  Sam Steingold  <sds@gnu.org>

	* clx/mit-clx/dependent.lisp (make-process-lock, process-wakeup):
	do not signal an error
	(holding-lock): no warning

2004-04-13  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Class): Move the direct_subclasses slot.
	* clos-class2.lisp (class): Remove the direct-subclasses slot.
	(standard-class): Add it here instead.
	(finalize-instance-standard-class): Access class-direct-subclasses only
	if the superclass is a standard-class.
	(initialize-instance-built-in-class): Don't add this class to the
	class-direct-subclasses of the superclaass.
	(initialize-instance-structure-class): Likewise.

2004-04-22  Sam Steingold  <sds@gnu.org>

	* rawsock/sock.lisp (open-unix-socket): new function
	(cmsghdr, linger): removed
	* rawsock/rawsock.c (MAKE-SOCKADDR, SOCKETPAIR, ACCEPT, BIND)
	(CONNECT, GETPEERNAME, GETSOCKNAME, LISTEN, RECV, RECVMSG)
	(SOCK-READ, SEND, SENDMSG, SOCK-WRITE): added
	* rawsock/link.sh.in: fixed TO_PRELOAD
	* rawsock/configure.in: check for stropts.h, poll.h and sys/un.h

2004-04-22  Sam Steingold  <sds@gnu.org>

	SOCKET-OPTIONS now handles all 16 POSIX options
	* stream.d (SOCKET-OPTIONS): accept SO_DEBUG, SO_ACCEPTCONN,
	SO_BROADCAST, SO_REUSEADDR, SO_DONTROUTE
	* constobj.d (type_socket_option): added the above 5 options
	* constsym.d: ditto

2004-04-22  Sam Steingold  <sds@gnu.org>

	* stream.d (stream_handles): accept fixnums as pointing to
	themselves as FDs, this allows RAWSOCK sockets to be used with
	SOCKET-STATUS and SOCKET-OPTIONS

2004-04-22  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (direction_t): Work around a g++ 3.4.0 bug.

2004-04-22  Sam Steingold  <sds@gnu.org>

	* pathname.d (namestring_correctly_parseable_p): fixed the last patch

2004-04-22  Sam Steingold  <sds@gnu.org>

	* utils/clispload.lsp: _really_ set
	custom:*warn-on-floating-point...contagion* to nil

2004-04-22  Sam Steingold  <sds@gnu.org>

	Rely on FILL-STREAM to format warnings and error messages.
	* realelem.d (warn_floating_point_rational_contagion): removed
	manual newlines from the message
	* flo_rest.d (warn_floating_point_contagion): ditto

2004-04-22  Sam Steingold  <sds@gnu.org>

	* pathname.d (pathname_version_maybe): define
	(file_namestring_parts, namestring_correctly_parseable_p): use it

2004-04-22  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Enable the use of global register variables for
	gcc >= 3.4.

2004-04-22  Bruno Haible  <bruno@clisp.org>

	Make it compile with g++ 3.4.
	* lispbibl.d (offsetofa): Define differently for C++.
	(restartf_t): Define without nonreturning for C++.

2004-04-22  Sam Steingold  <sds@gnu.org>

	rawsock now compiles on cygwin
	* rawsock/rawsock.c (my_check_type): replaces my_type_error()
	(my_check_argument, check_struct, check_struct_data): new function
	(check_buffer_arg): return object
	(RESIZE-BUFFER, SOCKADDR-FAMILY): new lisp functions
	(SOCKET, RECVFROM, SENDTO): accept all POSIX arguments
	* rawsock/sock.lisp (sockaddr, msghdr, cmsghdr, linger): new structs

2004-04-22  Sam Steingold  <sds@gnu.org>

	* genclisph.d (check_fpointer, check_fpointer_replacement): moved
	to a later place so that clisp.h will be compilable

2004-04-22  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Emit definitions for check_fpointer,
	check_posfixnum, check_string.

2004-04-22  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Use "#if notused" instead of C comments to mark
	definitions not yet used.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: Handle class redefinition as specified.
	* lispbibl.d (Class): Remove class_id field. Remove shared_slots,
	previous_definition slots. Add current_version, instantiated slot.
	Rename prototype slot.
	(ClassVersion): New type.
	(Instance): Remove class and cl_id fields. Add class_version field.
	(instflags_beingupdated_B): New macro.
	(TheClassVersion): New macro.
	(instance_un_realloc): Use a single test instead of a loop.
	(update_instance): Take a second argument.
	(instance_valid_p): Look at class-version instead of id field.
	(instance_update): Take a second argument.
	(instanceof): Don't call instance_update. Update.
	* spvw_garcol.d (gc_sweep1_instance_forward): Use the class_version
	field for the forward pointer.
	* record.d (class_of): Don't call instance_update if the instance is
	already being updated.
	(CLOS::ALLOCATE-STD-INSTANCE): Set the class-version field instead of
	class and id fields.
	(do_allocate_instance): Update.
	(ptr_to_slot): Update shared slot access: The location's CAR is now a
	class-version.
	(slot_up): Invoke the local class_of instead of CLASS-OF.
	(CLOS::SET-SLOT-VALUE, CLOS:SLOT-EXISTS-P): Likewise.
	(CLOS::%CHANGE-CLASS): Turn the user visible object into a forward
	pointer, instead of creating a chain of forward pointers.
	(update_instance): Take a second argument. Completely rewritten.
	(CLOS::%MAKE-INSTANCE): Invoke the local class_of instead of CLASS-OF.
	* hashtabl.d (sxhash_atom): Don't call instance_update. Update.
	* predtype.d (TYPE-OF, CLOS:CLASS-OF): Likewise.
	(heap_statistics_mapper): Update.
	* stream.d (stream_get_read_eval, stream_set_read_eval): Call
	instance_update. Update.
	* genclisph.d (main): Update definition of Instance.
	* clos-class2.lisp (class): Remove id slot.
	(standard-class): Remove shared-slots, previous-definition slots.
	Add current-version, instantiated slots.
	(class-version): New structure.
	(slot-difference): Remove function.
	(ensure-class): Call make-instances-obsolete before re-initializing
	the class. Move the versioning stuff to make-instances-obsolete.
	Remove the computation of added/discarded slot lists. Update the
	subclasses after redefining a class.
	(initialize-instance-standard-class): Initialize the current-version
	slot. When clearing the precedence-list, clear the all-superclasses
	table as well.
	(finalize-instance-standard-class): Default instance-size is now 1,
	not 2. The shared-slots are now stored in the class-version. Don't
	erase the values of shared slots that remain shared.
	(std-layout-slots): Let the cons point to the class-version, not to
	the class.
	(make-instances-obsolete): New preliminary function.
	(make-instances-obsolete-standard-class): New function.
	(update-subclasses-for-redefined-class): New function.
	(class-version-compute-slotlists): New function.
	(<standard-object>): Update instance-size. Install a class-version.
	(unbound): Update.
	* clos-class4.lisp (PRINT-OBJECT on CLASS): When the class is not
	properly initialized, print UNINITIALIZED instead of giving an error.
	* clos-class5.lisp (update-instance-for-different-class): Compute
	list of added slots as specified in ANSI CL.
	(make-instances-obsolete on STANDARD-CLASS): Just invoke
	make-instances-obsolete-standard-class.

2004-04-21  Bruno Haible  <bruno@clisp.org>

	* pathname.d (file_namestring_parts, namestring_correctly_parseable_p):
	Don't lose support for platforms which have versions in the filesystem.

	* stream.d (handle_to_stream): Fix begin/end_system_call() calls.

2004-04-21  Don & Fred Cohens  <fc@all.net, don-sourceforge@isis.cs3-inc.com>
	    Sam Steingold  <sds@gnu.org>

	new module for low-level socket access
	* modules/rawsock: new directory

2004-04-21  Sam Steingold  <sds@gnu.org>

	* disassem.lisp (disassemble): do not signal an error when cannot
	disassemble a built-in C function
	* utils/clispload.lsp [WIN32]: do not mark DISASSEMBLE.* as
	expected failures

2004-04-21  Bruno Haible  <bruno@clisp.org>

	* stream.d (STREAM-EXTERNAL-FORMAT): For terminal_stream, return the
	terminal stream's strm_encoding on those platforms where it is used.

2004-04-21  Bruno Haible  <bruno@clisp.org>

	* disassem.lisp (disassemble-machine-code): Add the function object as
	argument. Give a nice message when gdb is not found.

2004-04-21  Bruno Haible  <bruno@clisp.org>

	* utils/clispload.lsp: Set *warn-on-floating-point...contagion* to nil.

2004-04-21  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCC_GCC_VERSION): Invoke gcc -v in the C locale.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (restartf_t): Define as nonreturning. Avoids gcc warnings.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (popSP, finish_entry_frame): Rename macro parameter.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	Make the WIDE_SOFT model work again.
	* genclisph.d (main): Emit definition for one_o.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	* condition.lisp (check-value): Fix typo. Avoid compiler warning.

2004-04-12  Bruno Haible  <bruno@clisp.org>

	* intlog.d (I_I_ash_I): Fix bug when y = most-negative-fixnum = -2^32.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: Optionally return floating-point results when
	ANSI CL says so.
	* realelem.d (warn_floating_point_rational_contagion): New function.
	(RA_F_exact_contagion_R): New function.
	(R_R_mal_R, R_R_durch_R, R_I_expt_R): Use RA_F_exact_contagion_R.
	* realtran.d (R_R_atan_R, R_R_log_R): Likewise.
	* comptran.d (N_phase_R): Add argument want_exact. Use
	RA_F_exact_contagion_R.
	(N_log_N, N_N_log_N): Update.
	(N_I_expt_N, N_N_expt_N): Use R_R_contagion_R and RA_F_exact_contagion_R.
	* lisparit.d (PHASE): Pass want_exact=false.
	(init_arith): Initialize *FLOATING-POINT-RATIONAL-CONTAGION-ANSI* and
	*PHASE-ANSI* to NIL, and *WARN-ON-FLOATING-POINT-RATIONAL-CONTAGION* to
	T.
	* misc.d (SYS::SET-ANSI): Set *FLOATING-POINT-RATIONAL-CONTAGION-ANSI*
	and *PHASE-ANSI* as well.
	* places.lisp (*ansi*): Update documentation.
	* utils/clispload.lsp (*expected-failures*): Remove ATAN.4,
	EXPT.{3,4,5,6}, EXPT.{8,9,10,11}, PHASE.{1,2,3,4,5,6,7}.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	* package.d (correct_packname): Fix typo in restart description.

2004-04-20  Sam Steingold  <sds@gnu.org>

	* utils/clispload.lsp (disassemble-machine-code) [win32, cygwin]: do
	not redefine

2004-04-20  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_symbol): Follow CLHS also in the "pathological case that
	the symbol has no home package but is nevertheless somehow accessible
	in the current package".

2004-04-20  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_symbol): Print keywords that are accessible in the current
	package with a colon. Required by CLHS 22.1.3.3.1.

2004-04-20  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_string): When *print-readably* = NIL, print nil-vectors
	of length 0 like strings. Required by CLHS 22.1.3.4.

2004-04-20  Sam Steingold  <sds@gnu.org>

	* utils/clispload.lsp (*expected-failures*): updated

2004-04-19  Sam Steingold  <sds@gnu.org>

	pathnames always have VERSION slot, even though it is not printed
	* lispbibl.d (HAS_VERSION): removed
	(Pathname): always has the version slot
	* spvw_debug.d (nobject_out1): ditto
	* constobj.d (type_version): always full-blown
	(semicolon_string): always present
	(zero_string): removed
	* pathname.d (pathname_version_maybe, test_optional_version_): removed
	(xpathname_version): updated for that
	(PATHNAME-VERSION, has_version_wildcards): just use xpathname_version()
	(nametype_namestring_parts_): removed
	(file_namestring_parts): pass NIL as the version argument to
	nametype_namestring_parts() because physical pathname version are
	not printed
	(MERGE-PATHNAMES): fixed version defaulting logic
	(namestring_correctly_parseable_p): non-NIL version means
	unprintable readably
	(DEFAULT_VERSION): new CPP macro for DIRECTORY
	(directory_search_scandir, directory_search): set pathname_version
	to DEFAULT_VERSION to ensure that DIRECTORY does not return wild
	pathnames

2004-04-20  Bruno Haible  <bruno@clisp.org>

	* po/de.po: Update translations.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	Nicer bootstrapping.
	* init.lisp (format, cerror, warn): Provide some more capable
	preliminary definitions.
	(sys::check-redefinition): Change the format string so that it works
	with the preliminary FORMAT.
	(load): Use FORMAT instead of emulating it.
	* savemem.lisp (saveinitmem): Likewise.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	Speed up the argument type checks.
	* lispbibl.d (check_fpointer): Turn into an inline function.
	(check_fpointer_replacement): New declaration.
	(check_list): Turn into an inline function.
	(check_list_replacement): New declaration.
	(check_symbol): Turn into an inline function.
	(check_symbol_replacement): New declaration.
	(check_symbol_non_constant): Turn into an inline function.
	(check_symbol_non_constant_replacement): New declaration.
	(check_posfixnum): Turn into an inline function.
	(check_posfixnum_replacement): New declaration.
	(check_integer): Turn into an inline function.
	(check_integer_replacement): New declaration.
	(check_pos_integer): Turn into an inline function.
	(check_pos_integer_replacement): New declaration.
	(check_char): Turn into an inline function.
	(check_char_replacement): New declaration.
	(check_string): Turn into an inline function.
	(check_string_replacement): New declaration.
	(check_function): Turn into an inline function.
	(check_function_replacement): New declaration.
	(check_funname): Turn into an inline function.
	(check_funname_replacement): New declaration.
	(check_uint8): Turn into an inline function.
	(check_uint8_replacement): New declaration.
	(check_sint8): Turn into an inline function.
	(check_sint8_replacement): New declaration.
	(check_uint16): Turn into an inline function.
	(check_uint16_replacement): New declaration.
	(check_sint16): Turn into an inline function.
	(check_sint16_replacement): New declaration.
	(check_uint32): Turn into an inline function.
	(check_uint32_replacement): New declaration.
	(check_sint32): Turn into an inline function.
	(check_sint32_replacement): New declaration.
	(check_uint64): Turn into an inline function.
	(check_uint64_replacement): New declaration.
	(check_sint64): Turn into an inline function.
	(check_sint64_replacement): New declaration.
	(check_uint): Turn into an inline function.
	(check_uint_replacement): New declaration.
	(check_sint): Turn into an inline function.
	(check_sint_replacement): New declaration.
	(check_ulong): Turn into an inline function.
	(check_ulong_replacement): New declaration.
	(check_slong): Turn into an inline function.
	(check_slong_replacement): New declaration.
	(check_ffloat): Turn into an inline function.
	(check_ffloat_replacement): New declaration.
	(check_dfloat): Turn into an inline function.
	(check_dfloat_replacement): New declaration.
	(check_structure): Turn into an inline function.
	(check_structure_replacement): New declaration.
	(check_real): Turn into an inline function.
	(check_real_replacement): New declaration.
	* error.d (check_fpointer_replacement): Renamed from check_fpointer.
	(check_list_replacement): Renamed from check_list. Assume the argument
	already failed the type check.
	(check_symbol_replacement): Renamed from check_symbol. Assume the
	argument already failed the type check.
	(check_symbol_non_constant_replacement): Renamed from
	check_symbol_non_constant.
	(check_posfixnum_replacement): Renamed from check_posfixnum. Assume the
	argument already failed the type check.
	(check_integer_replacement): Renamed from check_integer. Assume the
	argument already failed the type check.
	(check_pos_integer_replacement): Renamed from check_pos_integer. Assume
	the argument already failed the type check.
	(check_char_replacement): Renamed from check_char. Assume the argument
	already failed the type check.
	(check_string_replacement): Renamed from check_string. Assume the
	argument already failed the type check.
	(check_function_replacement): Renamed from check_function. Assume the
	argument already failed the type check.
	(check_funname_replacement): Renamed from check_funname. Assume the
	argument already failed the type check.
	(check_uint8_replacement): Renamed from check_uint8. Assume the
	argument already failed the type check.
	(check_sint8_replacement): Renamed from check_sint8. Assume the
	argument already failed the type check.
	(check_uint16_replacement): Renamed from check_uint16. Assume the
	argument already failed the type check.
	(check_sint16_replacement): Renamed from check_sint16. Assume the
	argument already failed the type check.
	(check_uint32_replacement): Renamed from check_uint32. Assume the
	argument already failed the type check.
	(check_sint32_replacement): Renamed from check_sint32. Assume the
	argument already failed the type check.
	(check_uint64_replacement): Renamed from check_uint64. Assume the
	argument already failed the type check.
	(check_sint64_replacement): Renamed from check_sint64. Assume the
	argument already failed the type check.
	(check_uint_replacement): Renamed from check_uint. Assume the
	argument already failed the type check.
	(check_sint_replacement): Renamed from check_sint. Assume the
	argument already failed the type check.
	(check_ulong_replacement): Renamed from check_ulong. Assume the
	argument already failed the type check.
	(check_slong_replacement): Renamed from check_slong. Assume the
	argument already failed the type check.
	(check_ffloat_replacement): Renamed from check_ffloat. Assume the
	argument already failed the type check.
	(check_dfloat_replacement): Renamed from check_dfloat. Assume the
	argument already failed the type check.
	* record.d (check_structure_replacement): Renamed from check_structure.
	Assume the argument already failed the type check.
	* lisparit.d (check_number): Turn into an inline function.
	(check_number_replacement): New function.
	(check_real_replacement): Renamed from check_real. Assume the argument
	already failed the type check.
	(check_float): Turn into an inline function.
	(check_float_replacement): New function.
	(check_rational): Turn into an inline function.
	(check_rational_replacement): New function.
	* eval.d (eval1, apply, funcall): Use check_funname_replacement instead
	of check_funname.
	* control.d (funname_to_symbol, FLET, LABELS): Likewise.
	* genclisph.d (main): Update. Emit definitions for inline,
	single_float_p, double_float_p, uint_p, sint_p, ulong_p, slong_p.

2004-04-19  Sam Steingold  <sds@gnu.org>

	* pathname.d (simplify_directory): signal an error on (:ABSOLUTE :UP)
	as per <http://www.lisp.org/HyperSpec/Body/sec_19-2-2-4-3.html>

2004-04-19  Sam Steingold  <sds@gnu.org>

	* spvw.d (quit): do (FRESH-LINE *ERROR-OUTPUT*) before (WRITE-LINE
	"Bye") because in batch mode *ERROR-OUTPUT* and *STANDARD-OUTPUT*
	are separate

2004-04-19  Sam Steingold  <sds@gnu.org>

	* eval.d (CHECK_FDEF): use the return value of
	check_fdefinition() instead of Symbol_function(symbol)

2004-04-11  Bruno Haible  <bruno@clisp.org>

	* stream.d (lisp_completion): Ensure that local variables are not
	clobbered through longjmp.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (correctable_error): Document.
	* error.d (correctable_error): Expand and correct documentation.

2004-04-11  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Disable the use of global register variables for
	gcc >= 3.0.

2004-04-19  Bruno Haible  <bruno@clisp.org>

	Fix the return value of NSTRING-UPCASE/DOWNCASE/CAPITALIZE,
	WRITE-STRING, WRITE-LINE, when the argument is a displaced string.
	* lispbibl.d (test_vector_limits): Clarify specification.
	* charstrg.d (test_vector_limits): Likewise. Return the original
	string, not the data vector.
	(EXT:STRING-WIDTH): Use the data vector instead of the original string.
	* encoding.d (CONVERT-STRING-FROM-BYTES): Likewise.
	(CONVERT-STRING-TO-BYTES): Likewise.
	* foreign.d (FFI::CALL-WITH-FOREIGN-STRING): Likewise.
	* stream.d (MAKE-STRING-INPUT-STREAM, FILE-POSITION): Ignore
	arg.offset.
	* io.d (write_string_up): Undo last patch.

2004-04-10  Bruno Haible  <bruno@clisp.org>

	* type.lisp (BASE-STRING, SIMPLE-BASE-STRING): Change the type test
	so that it excludes vectors of element type NIL.

2004-04-10  Bruno Haible  <bruno@clisp.org>

	* condition.lisp (warn): Let the indentation depend on the width of the
	translation of "WARNING: ".

	* fill-out.lisp (line-pos): Use EXT:STRING-WIDTH instead of LENGTH.

2004-04-10  Bruno Haible  <bruno@clisp.org>

	* describe.lisp (describe-object of GENERIC-FUNCTION): Move newline out
	of TEXT.

2004-04-16  Sam Steingold  <sds@gnu.org>

	* makemake.in (check-ansi-tests): call do-tests here.
	(check-ansi-tests-debug): new target
	* utils/clispload.lsp: do not call DO-TESTS,
	leave this to the command line

2004-04-16  Bruno Haible  <bruno@clisp.org>

	* disassem.lisp (disassemble-machine-code): On Cygwin, don't use the
	live process.

2004-04-16  Sam Steingold  <sds@gnu.org>

	* io.d (write_string_up): (WRITE-STRING #A(nil (0))) must return
	its argument, not NIL

2004-04-16  Sam Steingold  <sds@gnu.org>

	* io.d (test_ostream): accept a gcv_object_t* argument instead of
	using STACK_0; updated all callers, including...
	(FORMAT-TABULATE): do not juggle STACK to ensure that the stream
	is in STACK_0

2004-04-16  Sam Steingold  <sds@gnu.org>

	* utils/clispload.lsp (disassemble-machine-code) [CYGWIN, WIN32]:
	redefine because debugging kills the process on woe32

2004-04-16  Sam Steingold  <sds@gnu.org>

	* comptran.d (R_R_asinh_R_R): fixed the floating point type of the
	return value
	* utils/clispload.lsp: ASINH.5 is now fixed

2004-04-09  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (c-constant-number, c-FORMAT): Use c-warn instead of
	c-error.

2004-04-09  Bruno Haible  <bruno@clisp.org>

	Make REMOVE-DUPLICATES, DELETE-DUPLICATES cons less.
	* sequence.d (remove_duplicates_list_from_start)
	(delete_duplicates_list_from_start, delete_duplicates_list_from_end):
	New functions.
	(seq_duplicates): Use these functions instead of the bit-vector
	approach when not using a hash-table and the sequence is a list.

2004-04-04  Bruno Haible  <bruno@clisp.org>

	Reduce the amount of consing of SUBTYPEP.
	* subtypep.lisp (intervals-mapto): Make the local functions autonomous.
	(intervals-intersection, intervals-union, intervals-subtypep): Use
	macrolet instead of flet.
	(intervals-remove-one): Use a combination of an autonomous local
	function and macrolet.
	(canonicalize-type): Make the local function autonomous.
	(*subtypep-type1parts*, *subtypep-type2parts*)
	(*subtypep-type2eqlparts*): New variables.
	(subtypep-flatten-AND, subtypep-flatten-OR): New functions.
	(subtypep-logic): Use them. Use declarations to convince the compiler
	to expand EVERY, REMOVE-IF, REMOVE-IF-NOT calls inline.

2004-03-28  Bruno Haible  <bruno@clisp.org>

	Integrate the ansi-tests from Paul Dietz.
	* utils/clispload.lsp: New file.
	* makemake.in (RECOMPILEDIR): Renamed from TESTDIR.
	(TESTSDIR): Change to 'tests'.
	(ANSITESTSDIR): New variable.
	(check-recompile): Renamed from test.
	(check-tests): Renamed from testsuite.
	(check-ansi-tests): New target.
	(check): Depend on it.
	(clean1): Remove also ANSITESTSDIR.

2004-04-15  Sam Steingold  <sds@gnu.org>

	new module for interface to MATLAB
	http://www.mathworks.com/products/matlab/
	* modules/matlab: new directory

2004-04-15  Sam Steingold  <sds@gnu.org>

	* clos-methcomb5.lisp (compute-method-partition-lambdas):
	removed unused variable
	(compute-effective-method-function): do not call
	GF-KEYWORD-ARGUMENTS since the values are not used

2004-04-15  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (update-ansi-tests): do not pass "-d" to "cvs
	update" becase "ansi-tests" could be a symlink to a writable sandbox

2004-04-15  Sam Steingold  <sds@gnu.org>

	make EXT:FILL-STREAM a user-visible extension
	* fill-out.lisp (fill-stream, with-fill-stream): export symbol from EXT
	(fill-stream): new slot PENDING-SPACE to avoid trailing spaces
	and compress multiple blanks into one
	(line-pos): new helper
	(stream-line-column, stream-start-line-p): use it
	(fill-stream-flush-buffer): write a #\Space when PENDING-SPACE is
	non-NIL and we are not at the beginning of a line;
	do not multiply indent by *PRINT-INDENT-LISTS*
	(stream-write-char): set PENDING-SPACE instead of writing #\Space
	(stream-clear-output): reset PENDING-SPACE

2004-04-08  Bruno Haible  <bruno@clisp.org>

	Make REMOVE[-IF[-NOT]], DELETE[-IF[-NOT]], SUBSTITUTE[-IF[-NOT]] on
	lists cons less.
	* sequence.d (seq_prepare_filterop): New function, extracted from
	seq_filterop.
	(seq_filterop): Remove the argument checking.
	(remove_op, delete_op): New functions.
	(REMOVE, REMOVE-IF, REMOVE-IF-NOT): Use remove_op instead of
	seq_filterop.
	(DELETE, DELETE-IF, DELETE-IF-NOT): Use delete_op instead of
	seq_filterop.
	(substitute_op): New function.
	(SUBSTITUTE, SUBSTITUTE-IF, SUBSTITUTE-IF-NOT): Use substitute_op
	instead of seq_filterop.
	(nsubstitute_op): Update.

2004-04-03  Bruno Haible  <bruno@clisp.org>

	New SUBTYPEP implementation.
	* subtypep.lisp: New file.
	* type.lisp (type-class): Remove function.
	(valid-interval-designator-p): Move to subtypep.lisp.
	(with-interval-designators): Remove macro.
	(interval-mix, interval-mix-not, simplify-and-or): Remove functions.
	(*canonicalize-type-prefer-clos*): Remove variable.
	(canonicalize-type): Simplify. Add error checking. Remove optional
	argument. Move to subtypep.lisp.
	(subtypep): Mostly rewritten. Move to subtypep.lisp.
	(get-charset-range, charset-subtypep): Move to subtypep.lisp.
	(subtype-integer): Small fixes. Handle the INTERVALS typespec that
	canonicalize-type now produces.
	* defstruct.lisp (ds-canonicalize-type): New function.
	* clos-class2.lisp (class-and): Remove function.
	* makemake.in (LPARTS): Add subtypep.
	* po/Makefile.devel (LISPSOURCES): Add subtypep.

2004-04-14  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (ANSITESTS_CVS_ROOT, ANSITESTS_CVS_REPOSITORY): New
	variables.
	(update-ansi-tests): New target.
	(all): Invoke it.

2004-04-09  Bruno Haible  <bruno@clisp.org>

	Make REMOVE[-IF[-NOT]], REMOVE-DUPLICATES on lists cons less.
	* sequence.d (remove_help): For lists, share the tail of the result
	list with the input list.

2004-03-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (expand_deftype): Mark as GC-trigger.

2004-04-04  Bruno Haible  <bruno@clisp.org>

	Make TYPEP work on structure types with user-defined :TYPE.
	* defstruct.lisp (ds-typep, ds-typep-expansion): New functions.
	* type.lisp (typep): Implement test for structure types with
	user-defined :TYPE by calling ds-typep.
	* compiler.lisp (c-TYPEP): Implement test for structure types with
	user-defined :TYPE by calling ds-typep-expansion.

2004-04-13  Sam Steingold  <sds@gnu.org>

	sync modules/clx/mit-clx/ with CLOCC/GUI/CLX
	* modules/clx/mit-clx/link.sh (TO_LOAD): added shape and split-sequence
	* modules/clx/mit-clx/Makefile (ALLLISP, ALLFAS): ditto
	* modules/clx/mit-clx/Makefile.clisp, modules/clx/mit-clx/Makefile.gcl:
	* modules/clx/mit-clx/README.GCL, modules/clx/mit-clx/akcl_dep.lisp:
	* modules/clx/mit-clx/build-clx.lisp, modules/clx/mit-clx/exclcmac.lisp:
	* modules/clx/mit-clx/excldefsys.lisp, modules/clx/mit-clx/excldep.c:
	* modules/clx/mit-clx/excldep.lisp, modules/clx/mit-clx/exclMakefile:
	* modules/clx/mit-clx/exclREADME, modules/clx/mit-clx/fix-socket.c:
	* modules/clx/mit-clx/generalock.lisp, modules/clx/mit-clx/sysdef.lisp:
	* modules/clx/mit-clx/kcl-compiler-patches.lisp:
	* modules/clx/mit-clx/kcl-patches.lisp:
	* modules/clx/mit-clx/kcl-system-patches.lisp:
	* modules/clx/mit-clx/makefile.akcl:
	* modules/clx/mit-clx/ms-patch.uu, modules/clx/mit-clx/provide.lisp:
	* modules/clx/mit-clx/sockcl.lisp, modules/clx/mit-clx/socket.c:
	* modules/clx/mit-clx/sys-package.lisp:
	* modules/clx/mit-clx/sys-proclaim.lisp: Remove files.
	* modules/clx/mit-clx/doc.lisp: Renamed from doc.lisp-doc.
	* modules/clx/mit-clx/shape.lisp:
	* modules/clx/mit-clx/split-sequence.lisp: New files.
	* modules/clx/mit-clx/attributes.lisp, modules/clx/mit-clx/buffer.lisp:
	* modules/clx/mit-clx/bufmac.lisp, modules/clx/mit-clx/clx.lisp:
	* modules/clx/mit-clx/defsystem.lisp, modules/clx/mit-clx/depdefs.lisp:
	* modules/clx/mit-clx/dependent.lisp, modules/clx/mit-clx/describe.lisp:
	* modules/clx/mit-clx/display.lisp, modules/clx/mit-clx/fonts.lisp:
	* modules/clx/mit-clx/gcontext.lisp, modules/clx/mit-clx/graphics.lisp:
	* modules/clx/mit-clx/image.lisp, modules/clx/mit-clx/input.lisp:
	* modules/clx/mit-clx/keysyms.lisp, modules/clx/mit-clx/macros.lisp:
	* modules/clx/mit-clx/manager.lisp, modules/clx/mit-clx/package.lisp:
	* modules/clx/mit-clx/requests.lisp, modules/clx/mit-clx/resource.lisp:
	* modules/clx/mit-clx/text.lisp, modules/clx/mit-clx/trace.lisp:
	* modules/clx/mit-clx/translate.lisp: sync with CLOCC

2004-04-13  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (view-man, view-html): man pages are in doc

2004-04-04  Bruno Haible  <bruno@clisp.org>

	Compile things like (remove-if #'(lambda ...) (the list ...)) inline.
	* compiler.lisp (c-form-table): Add entries for MAP, MAP-INTO, SOME,
	EVERY, NOTANY, NOTEVERY.
	(c-MAP-on-CARs-inner): Add endp-value argument.
	(c-MAP-on-CARs, c-MAPC): Update.
	(c-NTH, c-SETNTH): Use c-GLOBAL-FUNCTION-CALL-form instead of
	c-GLOBAL-FUNCTION-CALL, to reuse the already macroexpanded subforms.
	(declared-list-form-p, c-MAP, c-MAP-INTO, c-SOME, c-EVERY, c-NOTANY)
	(c-NOTEVERY): New functions.
	(c-REMOVE-IF, c-DELETE-IF, c-SUBSTITUTE-IF, c-NSUBSTITUTE-IF)
	(c-FIND-IF, c-POSITION-IF, c-COUNT-IF): Expand inline if the sequence
	argument is declared as list. Handle the inverted case as well.
	(c-REMOVE-IF-NOT, c-DELETE-IF-NOT, c-SUBSTITUTE-IF-NOT)
	(c-NSUBSTITUTE-IF-NOT, c-FIND-IF-NOT, c-POSITION-IF-NOT)
	(c-COUNT-IF-NOT): Invoke the corresponding -IF function.
	(c-seqop, c-LDB, c-LDB-TEST, c-MASK-FIELD, c-DPB, c-DEPOSIT-FIELD): Use
	c-GLOBAL-FUNCTION-CALL-form instead of c-GLOBAL-FUNCTION-CALL, to reuse
	the already macroexpanded subforms.

2004-04-04  Bruno Haible  <bruno@clisp.org>

	Make DEFSTRUCT :INITIAL-OFFSET option work correctly even in structure
	types with no slots.
	* defstruct.lisp (ds-make-constructor-body): Don't use the optimized
	simple case if there are trailing NILs, due to :initial-offset.
	(ds-make-pred): Replace name-offset argument with slotlist and size
	arguments. Check the names of the :INCLUDEd structures as well. Use
	SYS::CONSES-P, so that the test can cope with dotted lists and
	circular lists.

2004-04-04  Bruno Haible  <bruno@clisp.org>

	* list.d (SYS::CONSES-P): New function.

2004-04-03  Bruno Haible  <bruno@clisp.org>

	* sequence.d (valid_type1): Call eltype_code only if the element-type
	is not *.

2004-04-03  Bruno Haible  <bruno@clisp.org>

	* defstruct.lisp (defstruct): When defining a structure with :TYPE
	option, remove any previously defined class of the same name.
	* clos-class2.lisp (undefine-structure-class): New function.

2004-04-03  Bruno Haible  <bruno@clisp.org>

	Store a structure's size in the DEFSTRUCT-DESCRIPTION.
	* defstruct.lisp (defstruct): Add the instance size as third slot of
	the DEFSTRUCT-DESCRIPTION.
	* io.d (structure_reader, pr_structure_default): Update.
	* clos-class2.lisp (define-structure-class): Update.
	* foreign1.lisp (c-struct-constructor): Update.

2004-04-08  Sam Steingold  <sds@gnu.org>

	* init.lisp: export ABORT here to avoid conflict with gray.lisp

2004-04-07  Sam Steingold  <sds@gnu.org>

	fill/indent warnings and error messages
	* fill-out.lisp: extracted from describe.lisp
	* describe.lisp (describe-stream): moved to fill-out.lisp
	(describe): DESCRIBE-STREAM is now called FILL-STREAM
	* condition.lisp (pretty-print-condition): new function
	(warn, maybe-continue): use it
	* reploop.lisp (print-error, break-loop): ditto
	* makemake.in (LPARTS): added fill-out
	* po/Makefile.devel (LISPSOURCES): ditto

2004-04-07  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): use UNIXy i/o (*ERROR-OUTPUT* = stderr) in batch
	mode under the same conditions as *DEBUG-IO* being non-interactive

2004-04-07  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (src/autoconf/aclocal.m4): aclocal 1.8 forbids
	duplicate AC_CONFIG_HEADERS

2004-04-07  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c: better support for older PCRE versions

2004-04-05  Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (defstruct): write STRUCT DOCUMENTATION to the
	TYPE slot to match DOCUMENTATION in documentation.lisp

2004-03-22  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (define-structure-class): Use sys::ds-slot-initargs,
	not sys::ds-slot-name, to detect whether a structure slot is real.

2004-03-21  Bruno Haible  <bruno@clisp.org>

	* clos-class2.lisp (finalize-class): Renamed from class-finalize.
	(initialize-instance-standard-class): Update.
	* clos-class5.lisp (finalize-inheritance): Update.
	* record.d (do_allocate_instance, CLOS::%MAKE-INSTANCE): Update.

	* clos-class2.lisp (ensure-class): Treat metaclasses that are
	subclasses of <standard-class> like <standard-class> itself. For
	other metaclasses, invoke FIND-CLASS with force-p = t.

	* clos-class2.lisp (subclassp): Finalize the class before accessing
	its superclasses table.

2004-03-21  Bruno Haible  <bruno@clisp.org>

	* clos-slots2.lisp (slot-unbound): Quote the slot-name in the place.

	* clos-class2.lisp (DEFCLASS): Don't emit code to FIND-CLASS the
	direct superclasses.
	(ensure-class): Call FIND-CLASS on the direct superclasses here.
	Call FIND-CLASS also on the old direct superclasses. Don't create a
	new class object if the class exists but has not yet been finalized.

	* clos-class2.lisp (*finalizing-now*): Remove variable.
	(class-finalize): Pass the finalizing-now stack as optional argument.

	* clos-class5.lisp (make-instances-obsolete): Don't do anything if the
	class is not yet finalized. Return the argument unmodified, even if
	it's a symbol.

	* documentation.lisp (documentation, setf documentation): Add a method
	for (SYMBOL (EQL METHOD-COMBINATION)).

2004-03-21  Bruno Haible  <bruno@clisp.org>

	Remove redundant information from the DEFSTRUCT-DESCRIPTION.
	* defstruct.lisp (make-ds-slot): Remove 8th argument.
	(ds-slot-var): Remove function.
	(ds-slot-initargs): New function.
	(ds-real-slot-p): Use ds-slot-initargs.
	(ds-arg-default): Simplify.
	(ds-make-constructor-body): Take a varlist instead of a get-var
	argument.
	(ds-make-boa-constructor, ds-make-keyword-constructor): Update.
	(defstruct): Update.
	* io.d (pr_structure_default): Update.

2004-02-29  Bruno Haible  <bruno@clisp.org>

	Split clos.lisp.
	* clos.lisp: Split into pieces.
	* clos-class1.lisp, clos-class2.lisp, clos-class3.lisp:
	* clos-class4.lisp, clos-class5.lisp, clos-genfun1.lisp:
	* clos-genfun2.lisp, clos-genfun3.lisp, clos-genfun4.lisp:
	* clos-genfun5.lisp, clos-methcomb1.lisp, clos-methcomb2.lisp:
	* clos-methcomb3.lisp, clos-methcomb4.lisp, clos-methcomb5.lisp:
	* clos-method1.lisp, clos-method2.lisp, clos-method3.lisp:
	* clos-slots1.lisp, clos-slots2.lisp, documentation.lisp: New files,
	extracted from clos.lisp.
	* makemake.in (LPARTS): Add the new files.
	* po/Makefile.devel (LISPSOURCES): Likewise.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	* floatprint.lisp (decode-float-decimal): Add argument
	fixed-point-adjust.
	(write-float): Pass fixed-point-adjust = t.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_symbol_part): Add |...| markers also when *print-readably*
	is true.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (arraysize_limit_1): Reduce value by 1.
	* spvw.d (init_symbol_values): Initialize array-total-size-limit,
	array-dimension-limit and array-rank-limit as fixnums.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance.
	* clos.lisp (std-find-method): Check the specializers argument.
	(analyze-method-description): Update.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: Fix the short-form method combination.
	* clos.lisp (standard-method-combination-check-method-qualifiers):
	Renamed from short-form-method-combination-check-method-qualifiers.
	(define-method-combination): The qualifier of primary methods is the
	name of the method combination, not the operator.
	(short-form-method-combination-check-method-qualifiers): New function.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: DEFGENERIC must remove methods defined in the
	previous DEFGENERIC form.
	* clos.lisp (standard-method): Add slot 'origin'.
	(analyze-method-description): Add value for :ORIGIN.
	(do-defgeneric): Remove old methods that came from a DEFGENERIC form.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: Improved argument list checking.
	* record.d (check_keywords): Remove macro.
	(check_initialization_argument_list): New function.
	(CLOS::%ALLOCATE-INSTANCE, CLOS::%SHARED-INITIALIZE,
	CLOS::%REINITIALIZE-INSTANCE, CLOS::%INITIALIZE-INSTANCE,
	CLOS::%MAKE-INSTANCE): Use check_initialization_argument_list instead
	of check_keywords.

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance.
	* clos.lisp (ensure-class): Don't modify the old class if it doesn't
	have a "proper name".

2004-03-27  Bruno Haible  <bruno@clisp.org>

	ANSI CL compliance: Remove nickname of the keyword package.
	* package.d (init_packages): Drop nickname "" of the KEYWORD package.
	* complete.lisp (complete): Map prefix "" to "KEYWORD". Handle
	readtable-case values different from :UPCASE correctly.

2004-03-07  Bruno Haible  <bruno@clisp.org>

	* list.d (get_integer_truncate): Portability tweak.

2004-03-07  Bruno Haible  <bruno@clisp.org>

	* macros2.lisp (with-output-to-string): Declare the variable as
	read-only in both cases.

2004-03-15  Bruno Haible  <bruno@clisp.org>

	Change the format of internal error message strings:
	'~' -> '~S', '$' -> '~C'.
	* error.d (write_errorstring): Expect ~S and ~C instead of ~ and $.
	Signal an error if a stray ~ is seen.
	(check_value): Update comments.
	* lispbibl.d (fehler, check_value): Update comments.
	* affi.d, array.d, charstrg.d, control.d, debug.d, encoding.d, error.d,
	* eval.d, foreign.d, hashtabl.d, i18n.d, intbyte.d, intdiv.d,
	* intelem.d, intlog.d, io.d, lisparit.d, list.d, misc.d, package.d,
	* pathname.d, predtype.d, record.d, sequence.d, spvw.d, stream.d,
	* symbol.d, time.d: Update all error messages.
	* modules/berkeley-db/bdb.c: Likewise.
	* modules/clx/new-clx/clx.f: Likewise.
	* modules/dirkey/dirkey.c: Likewise.
	* modules/regexp/regexi.c: Likewise.
	* modules/pcre/cpcre.c: Likewise.
	* modules/syscalls/calls.c: Likewise.
	* po/clisp-xgettext (main): Heuristic: Mark string as lisp-format if it
	contains ~S or ~C.

2004-03-15  Bruno Haible  <bruno@clisp.org>

	* po/clisp-xgettext (main): Remove support for scanning Lisp files.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	Remove special casing of germanic plural in messages.
	* compiler.lisp (test-argument-syntax): Test the list length against 1
	inside the English format string, not outside.
	* describe.lisp (describe-object): Likewise.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* control.d: Use "\n" instead of NLstring.
	* error.d: Likewise.
	* errwin32.d: Likewise.
	* flo_rest.d: Likewise.
	* io.d: Likewise.
	* pathname.d: Likewise.
	* realelem.d: Likewise.
	* spvw_memfile.d: Likewise.
	* stream.d: Likewise.
	* win32aux.d: Likewise.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	Remove all leading and trailing formatting commands from
	internationalized strings, to make it easier for translators.
	* debug.d (print_stackitem): Move newline out of CLSTEXT.
	* encoding.d (encoding_from_name, init_dependent_encodings): Move
	newline out of GETTEXT.
	* spvw.d (SP_ueber, STACK_ueber): Move newline out of GETTEXTL.
	(main): Likewise, also out of CLSTEXT.
	* spvw_alloca.d (malloca): Move newline out of GETTEXTL.
	* spvw_allocate.d (error_speicher_voll, make_space_gc_true,
	make_space_gc_false, make_space_gc): Likewise.
	* spvw_memfile.d (loadmem, loadmem_from_handle): Likewise.
	* spvw_mmap.d (mmap_zeromap): Likewise.
	* spvw_multimap.d (fdmap, open_temp_fd, initmap): Likewise.
	* spvw_sigsegv.d (sigsegv_handler_failed, stackoverflow_handler):
	Likewise.
	* affi1.lisp (defflibfun): Move newline and freshline out of TEXT.
	* compiler.lisp (c-warn, c-error, match-known-unknown-functions,
	c-report-problems, compile-file, disassemble-closure): Likewise.
	* condition.lisp (prompt-for-new-value): Likewise.
	* describe.lisp (describe-slotted-object, describe-object, describe1):
	Likewise.
	* format.lisp (format-error): Likewise.
	* macros2.lisp (prompt-for-new-value-string): Likewise.
	* reploop.lisp (debug-reset-io, get-frame-limit, debug-backtrace,
	print-error): Likewise.
	* room.lisp (room): Likewise.
	* trace.lisp (trace1): Likewise.

2004-03-30  Bruno Haible  <bruno@clisp.org>

	* po/de.po: Update translations.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	Make use of GNU gettext >= 0.13 features.
	* po/Makefile.devel (GMSGFMT): Add option --check.
	(DSOURCES_POT, LISPSOURCES_POT): New variables.
	(SOURCES_POT): Apply clisp-xgettext only to *.d files.
	(SOURCES_POT2): Remove the *.lisp contributions.
	(SOURCES_EN): Remove variable and rule.
	(XGETTEXT, XGETTEXT_OPTIONS): New variables.
	(LISPSOURCES_POT): New rule.
	(MSGEN): New variable.
	(en.po): Use msgen.
	* clisp-xgettext (main): Don't write a *.en file.

	Modernize PO file header.
	* po/po_header.txt: Add license clause and Report-Msgid-Bugs-To field.
	* po/po_header: Likewise. Use the official format for the timezone in
	the header. Make it work with newer versions of GNU ls.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	Internationalization fixes:
	- Use entire sentences instead of pieces of sentences.
	- Let the translator translate terms like STRING, SYMBOL, INTEGER,
	  CHARACTER, VECTOR, PACKAGE, STREAM, CLASS. On the other hand, type
	  names like RANDOM-STATE can remain uninternationalized.
	- Prefixes like "READ: " must be internationalized as well, because in
	  French, a space is put before the colon.
	* charstrg.d (MAKE-STRING): Improve error message.
	* encoding.d (encoding_from_name): Call GETTEXT for warning message.
	(init_dependent_encodings): Likewise.
	* error.d (fehler_list, check_list): Make error message localizable.
	(check_symbol): Likewise.
	(fehler_vector): Likewise.
	(check_integer, check_pos_integer): Likewise.
	(fehler_char, check_char): Likewise.
	(check_string): Likewise.
	(fehler_stream): Likewise.
	(fehler_key_notkw): Likewise.
	(check_function): Likewise.
	* hashtabl.d (check_hashtable): Likewise.
	* lisparit.d (check_number, check_real, check_float): Likewise.
	(check_rational): Likewise.
	* record.d (fehler_record_length): Likewise.
	(fehler_keine_klasse): Likewise.
	* stream.d (MAKE-SYNONYM-STREAM): Likewise.
	(SYSTEM::STRING-INPUT-STREAM-INDEX): Likewise.
	(GET-OUTPUT-STREAM-STRING): Likewise.
	(lisp_completion): Likewise.
	(stream_handles): Likewise.
	(SOCKET-OPTIONS): Improve error message.
	(handle_to_stream): Fix order of arguments passed to error message.
	(MAKE-STREAM): Improve error message.
	(read_line): Make error message localizable.
	(check_open_file_stream): Likewise.
	* spvw.d (usage): Split message into two.
	* backquote.lisp (bq-non-list-splice-error, bq-dotted-splice-error):
	Make error message more understandable. Make the prefix localizable.
	* clos.lisp (make-instances-obsolete): Improve error message.
	(invalid-method-error): Fix error message: "~:%" is undefined.
	(method-combination-error): Pass the right arguments to the error
	message.
	* compiler.lisp (set-check-lock): Fix error message.
	(disassemble-closure): Make message localizable. Print the variable
	lists without surrounding parentheses.
	* defs1.lisp (load-lpt-many, load-lpt-one): Make the verbose message
	localizable.
	* defs2.lisp (define-hash-table-test): Make error message localizable.
	* describe.lisp (describe-object): Make string description localizable.
	(describe-signature): Assume stream argument is non-NIL. Make message
	localizable.
	* init.lisp (open-for-load): Change error message to reflect the user's
	point of view, not the implementor's.
	(load): Make the verbose message localizable.
	* pprint.lisp (set-pprint-dispatch, pprint-logical-block): Make error
	message localizable.
	* savemem.lisp (saveinitmem): Make the verbose message localizable.
	* trace.lisp (force-cclosure): Improve error message.
	(%local-set): Pass the right arguments to the error message.

2004-03-26  Will Newton  <will@misconception.org.uk>

	* eval.d (interpret_bytecode_): avoid a compiler warning by
	declaring `byteptr' `register'

2004-03-26  Bruno Haible  <bruno@clisp.org>

	* init.lisp (%expand-form EVAL-WHEN): Don't look whether COMPILE is
	among the situations. Ignore the forms if EVAL/:EXECUTE is not among
	the situations.

2004-03-26  Bruno Haible  <bruno@clisp.org>

	* stream.d (wr_ch_array_str_out, wr_ch_array_pphelp): Use TheSnstring
	instead of a cast to chart*.

2004-03-25  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out1): handle PPHELP-STREAMs
	(TheStream, Car, Cdr): new trivial accessors
	* io.d: removed the debugging infrastructure,
	nobject_out() is now quite sufficient

2004-03-25  Sam Steingold  <sds@gnu.org>

	* eval.d (DEBUG_CHECK_BYTEPTR): do not compare pointers with ints
	(interpret_bytecode_): fixed initialization of byteptr_min &
	byteptr_max, fixed error messages for fehler_byteptr and
	fehler_STACK_putt

2004-03-25  Bruno Haible  <bruno@clisp.org>

	* eval.d (interpret_bytecode_): Fix initialization of byteptr_min.

2004-03-15  Bruno Haible  <bruno@clisp.org>

	* list.d (NTHCDR): Drop out of the loop when the end of the list is
	reached.

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* dribble.lisp: Use variable names 'source' and 'target' instead of
	'so' and 'ta'.

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* package.d (SYS::SYMBOL-VALUE-LOCK): Check the argument.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* spvw.d (init_symbol_values): Initialize *PRINT-SPACE-CHAR-ANSI*.
	* misc.d (SYS::SET-ANSI): Set *PRINT-SPACE-CHAR-ANSI* as well.
	* io.d (pr_character): Print #\Space as "#\ " if *PRINT-SPACE-CHAR-ANSI*
	is true.
	* places.lisp (*ansi*): Update documentation.

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (back_trace_check): Change argument type to 'const char*'.
	* spvw_debug.d (back_trace_check): Likewise.
	* spvw_garcol.d (gc_markphase): Mark the backtraces here...
	(gar_col_normal): ... not here.
	* spvw_update.d (update_back_traces): Remove unneeded cast.

2004-03-24  Sam Steingold  <sds@gnu.org>

	* stream.d (rd_ch_terminal2, rd_ch_terminal3, wr_ch_array_terminal3)
	[CHART_STRUCT]: fixed compilation

2004-03-24  Sam Steingold  <sds@gnu.org>

	* eval.d (GOTO_ERROR): depend on DEBUG_BYTECODE, not DEBUG_SPVW
	(DEBUG_CHECK_BYTEPTR) [DEBUG_BYTECODE]: new macro
	(interpret_bytecode_): use it before a jump
	* makemake.in (XCFLAGS) [DEBUGGING]: added DEBUG_BYTECODE
	* lispbibl.d: documented debugging options

2004-03-23  Sam Steingold  <sds@gnu.org>

	* genclisph.d (Array_type_simple_bit_vector) [TYPECODES]: enabled,
	removed a trailing semicolon
	Reported by Will Newton <will@misconception.org.uk>

2004-03-23  Bruno Haible  <bruno@clisp.org>

	Drop *print-symbols-long*.
	* spvw.d (init_symbol_values): Don't initialize *print-symbols-long*.
	* io.d (pr_symbol): Look at *print-readably*, not *print-symbols-long*.
	* defs2.lisp (with-standard-io-syntax): Don't bind *print-symbols-long*.
	* compiler.lisp (c-write-lib, compile-toplevel-form): Likewise.

2004-03-23  Sam Steingold  <sds@gnu.org>

	* clhs.lisp (read-from-file): accept :REPEAT keyword argument

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* m4/ffcall-codeexec.m4 (CL_CODEEXEC): Don't require CL_MALLOC. Don't
	declare malloc().
	* m4/malloc.m4: Remove file.
	* m4/free.m4: Remove file.
	* m4/shmget.m4: Remove file.
	* m4/shmdt.m4: Remove file.
	* m4/shmctl.m4: Remove file.
	* m4/open.m4: Remove file.
	* m4/setsid.m4: Remove file.
	* m4/sh-args.m4: Remove file.
	* m4/sigaltstack.m4: Remove file.

2004-03-04  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_symbol): If *print-readably* is true, assume
	*print-symbols-long* to be true as well.
	Suggested by Paul Dietz <paul.f.dietz@motorola.com>.

2004-03-07  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (signed-operand-length): New function.
	(assemble-LAP): Instead of working around the "zero jump of length 2"
	bug, more generally guarantee that the jump lengths only ever grow and
	never need to shrink.

2004-03-07  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (seclass): Update comments.
	(c-THROW): Reduce the seclass' uses-binding value.

2004-03-22  Bruno Haible  <bruno@clisp.org>

	* stream.d (MAKE-STRING-OUTPUT-STREAM): For element type NIL, create
	an nil-vector of length 0, not 50.
	(get_output_stream_string): Don't use stringp to test for nil-vector.
	(SYS::BUILT-IN-STREAM-ELEMENT-TYPE): Likewise.

2004-03-22  Sam Steingold  <sds@gnu.org>

	* clisp.spec: removed anti-RPM comments
	(Source): updated
	(version): do not use absolute path
	(mysrc): do not hard-code `current'

2004-03-22  Bruno Haible  <bruno@clisp.org>

	* charstrg.d (test_2_stringsym_limits): Move the test for nil-vector to
	the right place.

2004-02-29  Bruno Haible  <bruno@clisp.org>

	* format.lisp: In error messages, talk about "format directives", not
	only "directives".
	Suggested by Jörg Höhle <Joerg-Cyril.Hoehle@t-systems.com>.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	Due to the rule 1 in
	<http://www.lisp.org/HyperSpec/Body/fun_type-of.html>,
	we must have (TYPEP X Y) ==> (SUBTYPEP (TYPE-OF X) Y)
	for all "built-in types" Y as listed in table 4-2 in
	<http://www.lisp.org/HyperSpec/Body/sec_4-2-3.html>
	Apply this to X = #'compile and Y = COMPILED-FUNCTION
	or to X = #'print-object and Y = STANDARD-GENERIC-FUNCTION.
	* predtype.d (TYPE-OF): For compiled closures, return COMPILED-FUNCTION.
	For generic functions, return STANDARD-GENERIC-FUNCTION.
	* describe.lisp (describe-object): Add a case for GENERIC-FUNCTION.
	Update to match the changed behaviour of TYPE-OF.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	Exclude generic functions from the type COMPILED-FUNCTION.
	So that (defgeneric foo (x) (:method ((x t)) x))
	        (typep #'foo 'COMPILED-FUNCTION) ==> NIL.
	Rationale: Due to the rule 1 in
	<http://www.lisp.org/HyperSpec/Body/fun_type-of.html>,
	we must have (TYPEP X Y) ==> (SUBTYPEP (TYPE-OF X) Y)
	for all "built-in types" Y as listed in table 4-2 in
	<http://www.lisp.org/HyperSpec/Body/sec_4-2-3.html>
	Apply this to X = #'foo and Y = COMPILED-FUNCTION.
	* predtype.d (COMPILED-FUNCTION-P): Exclude generic functions.
	(SYS::%COMPILED-FUNCTION-P): New function, with the old semantics of
	COMPILED-FUNCTION-P.
	* compiler.lisp (function-signature, compile, disassemble-closures):
	Use sys::%compiled-function-p instead of compiled-function-p.
	* defs2.lisp (function-lambda-expression): Likewise.
	* describe.lisp (describe-object): Likewise.
	* disassem.lisp (disassemble): Likewise.
	* edit.lisp (ed): Likewise.
	* trace.lisp (sys::%local-set): Likewise.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	Due to the rule 1 in
	<http://www.lisp.org/HyperSpec/Body/fun_type-of.html>,
	we must have (TYPEP X Y) ==> (SUBTYPEP (TYPE-OF X) Y)
	for all "built-in types" Y as listed in table 4-2 in
	<http://www.lisp.org/HyperSpec/Body/sec_4-2-3.html>
	Apply this to X = #\a and Y = STANDARD-CHAR.
	* lispbibl.d (standard_cint_p): New macro.
	* charstrg.d (STANDARD-CHAR-P): Use it.
	* predtype.d (TYPE-OF): For standard-char elements, return
	STANDARD-CHAR instead of BASE-CHAR.

2004-03-21  Sam Steingold  <sds@gnu.org>

	* makemake.in (installcheck): pass "-E utf-8 -norc" to CLISP
	Reported by Pascal J.Bourguignon <pjb@informatimago.com>

2004-03-21  Bruno Haible  <bruno@clisp.org>

	* error.d (check_string): Remove special handling of nil-vectors.

2004-03-07  Bruno Haible  <bruno@clisp.org>

	Make the vectors of element type NIL be strings.
	* lispbibl.d (general_vector_p): Undo last change.
	(simple_nilarray_p): New macro.
	(fehler_nilarray_retrieve): Renamed from fehler_retrieve. Remove
	argument.
	(fehler_nilarray_store): New declaration.
	(fehler_nilarray_access): New declaration.
	(SstringCase): Add a fifth argument.
	(SstringDispatch): Signal an error when the string has element type
	NIL.
	(unpack_sstring_alloca): Handle strings of element type NIL.
	(schar): Likewise.
	(unpack_string_rw, unpack_string_ro): Can return NIL now.
	* genclisph.d (main): Undo last change to general_vector_p. Emit
	declarations of simple_nilarray_p, fehler_nilarray_retrieve. Update
	unpack_sstring_alloca.
	* array.d (iarray_displace, iarray_displace_check,
	array_displace_check): Use simple_nilarray_p instead of nullp.
	(fehler_nilarray_retrieve): Renamed from fehler_retrieve. Remove
	argument.
	(fehler_nilarray_store): New function.
	(fehler_nilarray_access): New function.
	(storagevector_aref): Update.
	(fehler_store): Use simple_nilarray_p instead of nullp.
	(array_atype): Handle strings of element type NIL. Array_type_vector
	now implies Atype_T again.
	(elt_copy_T_Char): Signal an error when dv2 has element type NIL.
	(elt_copy_Char_Char): Signal an error when dv1 or dv2 has element type
	NIL.
	(elt_copy): Update.
	(elt_move_Char): Signal an error when dv2 has element type NIL.
	(elt_reverse): Signal an error when dv1 or dv2 has element type NIL.
	(elt_nreverse): Update.
	(ssstring_append_extend): Update.
	(MAKE-ARRAY): Use simple_nilarray_p instead of nullp. Map Atype_NIL to
	Array_type_string instead of Array_type_vector.
	(ADJUST-ARRAY): Update.
	* charstrg.d (unpack_string_ro): Can return NIL now.
	(unpack_string_rw): Likewise. Signal an error when the string has
	element type NIL and the length is > 0.
	(copy_string_normal): Signal an error when the string has element type
	NIL and the length is > 0.
	(copy_string): Handle strings of element type NIL.
	(coerce_imm_ss): Likewise.
	(coerce_imm_normal_ss): Signal an error when the string has element
	type NIL and the length is > 0.
	(SYS::STRING-INFO): Handle strings of element type NIL.
	(SCHAR): Update the error message for strings of element type NIL.
	(SYSTEM::STORE-CHAR): Signal an error when the string has element type
	NIL.
	(SYSTEM::STORE-SCHAR): Update the error message for strings of element
	type NIL.
	(test_vector_limits): Signal an error when the string has element type
	NIL and the length is > 0.
	(test_string_limits_rw): Likewise.
	(test_2_stringsym_limits): Likewise.
	(string_comp, string_comp_ci): Handle strings of element type NIL.
	(nstring_upcase, nstring_downcase, nstring_capitalize): Signal an error
	when the string has element type NIL and length > 0.
	(subsstring, SUBSTRING, string_concat): Signal an error when a string
	has element type NIL and length > 0.
	* predtype.d (equal): Handle strings of element type NIL.
	(elt_compare): Update.
	(SIMPLE-STRING-P): Include simple strings of element type NIL.
	(TYPE-OF): For strings of element type NIL, return (VECTOR NIL dim0)
	or (SIMPLE-ARRAY NIL (dim0)). Objects of type vector_type have element
	type T again.
	(heap_statistics_mapper): Handle strings of element type NIL. Objects
	of type vector_type have element type T again.
	* sequence.d (get_seq_type): Handle strings of element type NIL.
	Objects of type vector_type have element type T again.
	(READ-CHAR-SEQUENCE): Signal an error when the string has element type
	NIL.
	(WRITE-CHAR-SEQUENCE): Likewise.
	* hashtabl.d (hashcode_string): Handle strings of element type NIL.
	(hashcode4_vector): Likewise.
	* io.d (string_printf): Handle strings of element type NIL.
	(write_string): Signal an error when the string has element type NIL.
	(pr_symbol_part): Don't SstringDispatch if the string's length is 0.
	(pr_sstring_ab): Likewise.
	(pr_string): Handle strings of element type NIL.
	(UNREADABLE_START, UNREADABLE_END): Nop.
	(pr_vector): Remove code for printing vectors of element type NIL.
	(pr_nilvector): New function.
	* stream.d (wr_ch_array_terminal3): Update.
	(read_line): Handle strings of element type NIL.
	* pathname.d (split_name_type): Don't SstringDispatch if the string's
	length is 0.
	(PARSE-NAMESTRING): Likewise. Update.
	* spvw_typealloc.d (reallocate_small_string): Update.
	* spvw_debug.d (string_out): Handle strings of element type NIL.
	* encoding.d (string_to_asciz_): Handle strings of element type NIL.
	* package.d (string_hashcode): Don't SstringDispatch if the string's
	length is 0.
	* type.lisp (canonicalize-type): In STRING and SIMPLE-STRING, the
	element-type can be CHARACTER, BASE-CHAR or NIL, not just CHARACTER.
	* describe.lisp (describe-object): Don't show string details for
	strings of element type NIL.

2004-03-19  Sam Steingold  <sds@gnu.org>

	* clos.lisp (defgeneric): added (DECLARE IN-DEFUN) to avoid a
	compiler warning on recursive generic functions

2004-03-06  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (smallest_string_flavour8): New macro.
	(smallest_string_flavour16, smallest_string_flavour32): New
	declarations.
	(smallest_string_flavour): New function.
	(copy_string_normal): Renamed from copy_string.
	(copy_string): New declaration.
	* charstrg.d (smallest_string_flavour16 smallest_string_flavour32): New
	functions.
	(stringof): Produce a small string if possible.
	(copy_string_normal): Renamed from copy_string.
	(copy_string): New function.
	(coerce_normal_ss, string_upcase, string_downcase): Update.

2004-02-20  Bruno Haible  <bruno@clisp.org>

	* spvw_garcol.d (UNREALLOC, GC_UNREALLOC): Remove macros.
	(GC_MARK): Remove macro; use gc_mark instead.
	(update): Drop wrapper macro. Instead use the definition from update1.
	(update1): Remove macro; renamed to update.
	* spvw_genera2.d (gc_mark_at, gc_mark_old_generation): Use gc_mark
	instead of GC_MARK.

2004-02-20  Bruno Haible  <bruno@clisp.org>

	Clean up simple-string forward pointers during garbage collection.
	* lispbibl.d (sstring_flags_clr, sstring_flags_set): New macros.
	(mark_sstring_clean): New macro.
	* spvw_update.d: Use update_unrealloc instead of
	update_instance_unrealloc.
	(update_varobject, update_sstring): Obey also update_unrealloc.
	* spvw_garcol.d (gc_sweep1_sstring_forward, gc_sweep1_sstring_target):
	New functions.
	(gc_sweep1_varobject_page): Use them for simple-strings.
	(gar_col_normal): Set update_unrealloc to true while updating.
	(gar_col_compact, move_conses): Set update_unrealloc to false while
	updating.
	* spvw_memfile.d (savemem, loadmem_from_handle): Use update_unrealloc
	instead of update_instance_unrealloc.
	* predtype.d (enum_hs_realloc_simple_string): New enum value.
	(heap_statistics_mapper): Map forwarded instances to
	EXT::FORWARD-POINTER-SIMPLE-STRING.

2004-02-19  Bruno Haible  <bruno@clisp.org>

	Make the small-sstrings more robust.
	* lispbibl.d (stringsize_limit_1): New macro.
	(DYNAMIC_STRING): Check the string size.
	(DBGREALLOC): New macro.
	(fehler_stringsize): New declaration.
	(check_stringsize): New macro.
	* spvw.d (init_symbol_values): Initialize SYS::STRING-DIMENTION-LIMIT.
	* constobj.d (O(type_stringsize)): New object.
	* error.d (fehler_stringsize): New function.
	* io.d (write_sstring, write_sstring_case, pr_symbol_part): Handle
	reallocated strings correctly.
	* charstrg.d (string_gleich, string_equal): Handle reallocated strings
	correctly.
	(stringof, MAKE-STRING, string_concat): Check the string size before
	allocating the string.
	* array.d (VECTOR-PUSH-EXTEND, make_ssstring, ssstring_extend_low,
	make_storagevector, ADJUST-ARRAY): Likewise.
	* encoding.d (n_char_to_string, ascii_to_string,
	CONVERT-STRING-FROM-BYTES): Likewise.
	* lisparit.d (decimal_string): Likewise.

2004-02-18  Bruno Haible  <bruno@clisp.org>

	Make HAVE_SMALL_SSTRING work also in TYPECODES mode.
	* lispbibl.d (HAVE_SMALL_SSTRING): Define also if TYPECODES or
	SPVW_PURE is defined.
	(if_HAVE_SMALL_SSTRING): New macro.
	(SSTRING_HEADER): New macro.
	(sstring_, Sstring): Define using SSTRING_HEADER, without 'data' field.
	(STRUCT_SSTRING): Use SSTRING_HEADER instead of LRECORD_HEADER.
	(snstring_): New type, renamed from sstring_.
	(Snstring): New type, renamed from Sstring.
	(sstring_length): Change definition.
	(sstringrecord_tfl, sstring_tfl): New macros.
	(sstringflags_forwarded_B, sstring_reallocatedp): New macros.
	(sstring_eltype): New macro.
	(Sstringtype_8Bit, Sstringtype_16Bit, Sstringtype_32Bit): New macros.
	(sstring_immutable, sstring_flags): New macros.
	(sstringflags_backpointer_B, sstringflags_relocated_B): New macros.
	(sistring_): Renamed from siarray_. Use SSTRING_HEADER instead of
	VAROBJECT_HEADER.
	(Sistring): Renamed from Siarray.
	(sistring_data_offset): New macro.
	(TheSnstring, TheSistring): New macros.
	(TheSiarray): Remove macro.
	(allocate_imm_s8string, allocate_imm_s32string): Also declare if
	TYPECODES.
	(DYNAMIC_STRING): Update.
	(allocate_imm_string): Also declare if TYPECODES.
	(reallocate_small_string): Change meaning of newtype argument.
	(with_sstring_0, with_sstring): Update.
	(sstring_un_realloc): Renamed from simple_array_to_storage. Make it
	work if TYPECODES.
	(sstring_un_realloc1): Renamed from simple_array_to_storage1. Make it
	work if TYPECODES.
	(array_total_size, SstringCase, sstring_normal_p): Update.
	(unpack_sstring_alloca): Update.
	(coerce_imm_ss): Declare also if TYPECODES.
	(check_sstring_mutable): Make it work if TYPECODES.
	* genclisph.d (main): Emit SSTRING_HEADER. Update sstring_. Emit
	snstring_. Update sstring_length. Emit sstring_eltype. Update
	with_sstring_0, STRUCT_SSTRING, unpack_sstring_alloca.
	* spvw_debug.d (string_out): Update.
	* spvw_global.d (init_mem_heaptypes): Change type of sstring_type heap.
	* spvw_objsize.d (size_sistring): Renamed from size_siarray. Define
	also for TYPECODES.
	(objsize_s8string, objsize_s16string, objsize_s32string): New
	functions.
	(objsize_sstring, objsize): Support all simple-string variants.
	* spvw_update.d (do_update_sistring, update_sstring): New macros.
	(update_varobject, update_varobjects): Handle simple-string as well.
	* spvw_garcol.d (UNREALLOC): Update.
	(down_sistring, up_sistring): New macros.
	(gc_mark): Use them.
	* spvw_genera1.d (walk_area_sistring, walk_area_sstring): New macros.
	(walk_area, build_old_generation_cache): Walk through the indirect
	pointer of reallocated simple strings.
	* spvw_typealloc.d (allocate_s8string): Update.
	(allocate_imm_s8string): Define also if TYPECODES. Update.
	(allocate_s16string, allocate_imm_s16string, allocate_s32string):
	Update.
	(allocate_imm_s32string): Define also if TYPECODES. Update.
	(reallocate_small_string): Update.
	* charstrg.d (unpack_string_ro, sstring_store, sstring_store_array,
	stringof, copy_string, coerce_ss): Update.
	(coerce_imm_ss): Define also if TYPECODES.
	(coerce_normal_ss, coerce_imm_normal_ss, SYS::STRING-INFO, char_name,
	CHAR, SCHAR, SYSTEM::STORE-CHAR, SYSTEM::STORE-SCHAR): Update.
	(test_string_limits_rw): Define as a function also for TYPECODES.
	(test_stringsymchar_arg, MAKE-STRING, nstring_upcase, string_upcase,
	STRING-UPCASE, nstring_downcase, string_downcase, STRING-DOWNCASE,
	nstring_capitalize, STRING-CAPITALIZE, subsstring, SUBSTRING,
	string_concat): Update.
	* array.d (vector_length, iarray_displace, iarray_displace_check,
	array_displace_check, test_index, subscripts_to_index,
	storagevector_store, ROW-MAJOR-AREF, SYS::ROW-MAJOR-STORE,
	ARRAY-DIMENSION, array_dimensions, ARRAY-IN-BOUNDS-P,
	ARRAY-ROW-MAJOR-INDEX, elt_copy_T_Char, elt_copy_Char_Char, elt_fill,
	elt_reverse, VECTOR-PUSH-EXTEND, ssstring_push_extend,
	ssstring_append_extend, make_storagevector, initial_contents_aux,
	ADJUST-ARRAY): Update.
	* encoding.d (n_char_to_string, n_char_to_string_, string_to_asciz_,
	CONVERT-STRING-FROM-BYTES): Update.
	* pathname.d (common_case, test_optional_host, copy_upcase, all_digits,
	PARSE-NAMESTRING, MAKE-PATHNAME, wildcard_match, use_default_dir):
	Update.
	* stream.d (read_char_array, rd_ch_array_str_in, wr_ch_array_str_out,
	wr_ch_array_pphelp, rd_ch_array_buffered, lisp_completion,
	rd_ch_terminal2, rd_ch_terminal3, wr_ch_array_terminal3): Update.
	* io.d (sstring_printf, test_potential_number_syntax, upcase_token,
	case_convert_token, char_reader, radix_2, bit_vector_reader,
	write_string, pphelp_string_width, klammer_zu, pr_enter_1): Update.
	* package.d (test_package_arg, DELETE-PACKAGE): Update.
	* debug.d (read_form): Update.
	* error.d (fehler_sstring_immutable): Define also if TYPECODES.
	* lisparit.d (read_rational, read_float, print_integer): Update.
	* foreign.d (convert_from_foreign_array_fill): Update.

2004-02-16  Bruno Haible  <bruno@clisp.org>

	Clean up instance forward pointers during garbage collection.
	* lispbibl.d (instflags_backpointer_B, instflags_relocated_B,
	mark_inst_clean): New macros.
	* spvw_update.d (do_update_record): Obey also update_instance_unrealloc
	and update_in_unrealloc.
	* spvw_garcol.d (make_GCself): New macro.
	(set_GCself): Use it.
	(gc_sweep1_instance_forward, gc_sweep1_instance_target): New functions.
	(gc_sweep1_varobject_page): Use them for Instance objects.
	(gar_col_normal): Set update_instance_unrealloc to true while updating.
	(gar_col_compact, move_conses): Set update_instance_unrealloc to false
	while updating.
	* spvw_memfile.d (savemem, loadmem_from_handle): Set
	update_instance_unrealloc to false while updating.
	* predtype.d (enum_hs_realloc_instance): New enum value.
	(heap_statistics_mapper): Map forwarded instances to
	EXT::FORWARD-POINTER-INSTANCE.

2004-03-18  Sam Steingold  <sds@gnu.org>

	* io.d (circle_p): when SYS::*PRINT-CIRCLE-TABLE* is NIL, assume
	that the the object has no circularities and print it normally
	(pr_enter_2): bind SYS::*PRINT-CIRCLE-TABLE* to NIL when there
	are no circularities but *PRINT-READABLY* is non-NIL

2004-02-19  Sam Steingold  <sds@gnu.org>

	make package errors automatically recoverable
	* error.d (prepare_error): new function
	(fehler, check_value): use it
	(correctable_error): new function
	* lispbibl.d (correctable_error): prototype
	* constobj.d (query_string_*): removed
	* constsym.d (correctable_error, prompt_for_new_value, continue): added
	* package.d (query_user, prepare_query_user): removed
	(unintern, query_intern_conflict, export, use_package):
	use correctable_error() instead of query_user()
	(correct_packname): use correctable_error(): for NAME, CONTINUE
	means reuse existing package, for NICKNAME - discard the nickname
	(in_make_package): delete duplicate and NIL nicknames
	* condition.lisp (correctable-error): new function
	(check-value): bind *active-restarts* directly

2004-03-17  Sam Steingold  <sds@gnu.org>

	* configure.in (AC_INIT): release 2.33

2004-03-17  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (src/autoconf/aclocal.m4): get all configure
	files together before running aclocal

2004-03-16  Sam Steingold  <sds@gnu.org>

	* makemake.in (full-check): fixed quoting

2004-03-16  Sam Steingold  <sds@gnu.org>

	* m4/ldap.m4, m4/tcpconn.m4: removed extra quotes ([[]] -> [])

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Treat alloca() the same way as lispbibl.d.
	Needed for OSF/1 5.1.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* stdint.h.in: Make it work with AIX 5 xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* m4/tcpconn.m4 (CL_TCPCONN): Include <netinet/in.h> before
	<netinet/tcp.h>. Needed for AIX 4.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* m4/stdbool.m4 (gt_STDBOOL_H): Also check whether 'bool' can be used
	in declarations. Needed for HP-UX 11.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* m4/install.m4 (CL_PROG_INSTALL): Don't use installbsd at all.
	Needed on AIX 4 and AIX 5.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* utils/modprep.lisp (print-tables-2): Use sizeof, not pointer
	subtraction, to compute the size of the subr table.
	* utils/modpreptest.out: Update.
	Needed on AIX with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Remove trailing comma in definition of
	condition_t. Needed on AIX with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* arilev0.d (divu_3216_1616_, divu_3216_3216_): Change from K&R C to
	ANSI C style function definition. Needed on AIX with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* stream.d (strm_unbuffered_extrafields_t, strm_buffered_extrafields_t):
	Change type of bitfields from 'bool' to 'int', because 'bool' can now
	be equivalent to 'long'. Needed on AIX 4 with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (NULL): Don't define on AIX.
	Needed on AIX with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* intparam.c (boolean_t): Define as a macro, not a typedef.
	* utils/ccmp2c.c (boolean_t): Likewise.
	Needed for AIX with xlc.

2004-03-16  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCC_UNUSABLE_CPP): Don't use gcc-cccp on AIX != 4.2.

2004-01-20  Bruno Haible  <bruno@clisp.org>

	* spvw_sigsegv.d (stackoverflow_handler) [UNIX_LINUX ARM]: Update for
	Linux 2.4.x.

2004-03-15  Bruno Haible  <bruno@clisp.org>

	* po/Makefile.devel (MSGATTRIB): New variable.
	(clisplow_%.po): Use it instead of a sed command to remove the obsolete
	entries.

2004-03-15  Sam Steingold  <sds@gnu.org>

	* makemake.in (anymodule): pass CC to configure

2004-03-15  Bruno Haible  <bruno@clisp.org>

	* control.d (make_variable_frame): Make 2003-05-20 change work on
	platforms with symbolflags too.

2004-03-15  Bruno Haible  <bruno@clisp.org>

	* po/de.po: Fix 3 format strings that had the wrong number of ~.
	* po/fr.po: Fix 1 such format string.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* makemake.in (LIBICONV, LIBINTL, LIBSIGSEGV, LIBTERMCAP): On OSF/1,
	remove any -lc options. Needed for OSF/1 4.0d.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* makemake.in (distmakefile): Escape commas in $libs for use on the
	right-hand side of a sed expression.
	(distrib): Likewise for $full_libs.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* m4/ioctl.m4 (CL_IOCTL): Set the bytes_ready variable to 0 before
	calling ioctl FIONREAD.
	* stream.d (listen_handle): Likewise.
	Needed for Linux/ia64.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* makemake.in: For ia64 with gcc, reduce the optimization flags to -O
	in general and -O0 for eval.d. Needed on Linux/ia64.

2004-03-14  Sam Steingold  <sds@gnu.org>

	* configure.in (AC_INIT): pre-release 2.32.94

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* po/de.po: Update translations.

2004-03-13  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* po/ru.po: Update translations.

2004-03-14  Bruno Haible  <bruno@clisp.org>

	* po/Makefile.devel (LISPSOURCES): Add loadform.

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* spvw_memfile.d (savemem, loadmem_from_handle): Remove calls to
	update_back_traces().

2004-03-13  Bruno Haible  <bruno@clisp.org>

	* pathname.d (DELETE-FILE): Fix stack layout when the function returns
	NIL.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* makemake.in (DRIVERFLAGS): New variable.
	(clisp, install-bin): Use it.
	Needed for HP-UX 10.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* makemake.in (testsuite, testsuite-all): Pass the SHELL variable to
	the suite/Makefile. Needed for HP-UX 10.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* modules/pcre/cpcre.c: Remove semicolon after DEFMODULE declaration.
	* modules/regexp/regexi.c: Likewise.
	* modules/dirkey/dirkey.c: Likewise.
	* modules/syscalls/calls.c: Likewise.
	* modules/berkeley-db/bdb.c: Likewise.

2004-03-12  Sam Steingold  <sds@gnu.org>

	* configure.in (AC_INIT): pre-release 2.32.93

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* m4/ioctl.m4 (CL_IOCTL): Define IOCTL_ARGUMENT_T through
	AC_DEFINE_UNQUOTED, not AC_DEFINE. Fixes bug introduced on 2003-08-03
	(no ChangeLog entry). Needed on OSF/1 and AIX.

2004-03-12  Sam Steingold  <sds@gnu.org>

	* po/ru.po, po/clisplow_ru.po: Update translations.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (<libintl.h>, array_total_size, instanceof, schar,
	seclass_object): Omit these when COMPILE_STANDALONE is defined.
	* makemake.in (txt, genclisph.o, clisp-test-lispbibl): Define
	COMPILE_STANDALONE.
	Needed to avoid dependencies to fehler_notreached() etc. with C
	compilers that don't have 'inline' (such as Solaris cc), and on
	NetBSD, BeOS, Woe32 with gettext >= 0.13 because <libintl.h> can
	remap printf() to libintl_printf().

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* modules/wildcard/Makefile.in (FNMATCH_H): New variable.
	(wildcard.o): Depend on it.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* stdbool.h.in: Define bool as 'long' in the normal case.
	Needed on BeOS and on Solaris with cc.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* makemake.in (LN_HARD): New variable.
	(locale): Use it.
	Needed for BeOS 5.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* unix.d (sock_write): Declare with 4 arguments, not 3.
	* unixaux.d (read_helper, write_helper): Coding style.
	(sock_write): Test for EWOULDBLOCK only if no_hang is true.
	Needed for BeOS 5.

2004-03-12  Bruno Haible  <bruno@clisp.org>

	* m4/install.m4 (CL_PROG_INSTALL): Use the absolute path of "cp", not
	just "cp". Needed on HP-UX 10 because autoconf does special magic to
	INSTALL at config.status time if its value is a relative pathnames.

2004-03-11  Bruno Haible  <bruno@clisp.org>

	* makemake.in (SHELL): On HP-UX, use bash instead of /bin/sh. Needed
	for HP-UX 10.

2004-03-11  Bruno Haible  <bruno@clisp.org>

	* makemake.in (cpu): Set to x86_64 if appropriate.
	(XCFLAGS): Add -O when the CPU is x86_64.

2004-03-11  Bruno Haible  <bruno@clisp.org>

	* configure: Configure libcharset with --disable-shared on all
	platforms, not only on cygwin and mingw. Needed because libtool's
	support for shared libraries is broken at least on HP-UX 10 with gcc.

2004-03-11  Bruno Haible  <bruno@clisp.org>

	* stdint.h.in: Make it work with HP-UX 10.20 cc.

2004-03-11  Bruno Haible  <bruno@clisp.org>

	* modules/syscalls/configure.in: Add a test whether f_fsid in
	'struct statvfs' is scalar.
	* modules/syscalls/calls.c (POSIX::STAT-VFS): Use HAVE_SCALAR_FSID.
	Needed for Linux/x86 with glibc <= 2.1.

2004-03-11  Sam Steingold  <sds@gnu.org>
            Bruno Haible  <bruno@clisp.org>

	* configure.in: Check for <sys/statvfs.h> and <sys/statfs.h>.
	* unix.d: Prefer <sys/statvfs.h> over <sys/statfs.h>. Use <sys/mount.h>
	when neither of the two exists (e.g. on FreeBSD 4).
	* spvw_multimap.d (open_temp_fd): Use fstatvfs instead of fstatfs when
	possible.

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* configure: Use an if-then statement so that a "make check" failure
	in avcall or callback doesn't stop the configure file. Needed when
	using a *BSD /bin/sh.

2004-03-10  Sam Steingold  <sds@gnu.org>

	* configure.in (AC_INIT): pre-release 2.32.92

2004-03-10  Sam Steingold  <sds@gnu.org>

	* eval.d (interpret_bytecode) [__APPLE_CC__]: disabled FAST_DISPATCH
	* lispbibl.d, genclisph.d (nonreturning_function) [__APPLE_CC__]:
	disabled nonreturning_function()
	* lispbibl.d [__APPLE_CC__]: disabled STACK_register and SP_register

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* arisparc.d: Don't use the gas syntax for labels (1b, 1f). Needed
	for building with Solaris cc.

2004-03-10  Bruno Haible  <bruno@clisp.org>

	Don't use features unique to GCC. Needed for Solaris cc, HP-UX cc and
	IRIX cc.
	* stream.d (key_ascii, key_special): Use portable initializer syntax.
	(add_keybinding): Renamed from keybinding. Change argument type from
	key_event_t to 'const key_event_t *'.
	(keybinding): New macro.
	(make_keyboard_stream): Remove macros BIND_KEY, CHECK_CAP. Use macro
	keybinding instead.

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (src/autoconf/aclocal.m4): Append also mbstate_t.m4
	and fnmatch.m4, needed by modules/wildcard/configure.in.

2004-03-10  Sam Steingold  <sds@gnu.org>

	* makemake.in (XCFLAGS): add "-I." on all platforms

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* m4/filecharset.m4 (CL_FILECHARSET): Work around a problem with NFS
	on Solaris 7, where unlink()ed files reappear immediately under a
	different name and disappear only after 1. the process doing readdir()
	has exited and 2. waiting a second or two.

2004-03-10  Sam Steingold  <sds@gnu.org>

	* eval.d (get_closure): removed a spurious backslash which broke
	the build on Mac OS X

2004-03-10  Bruno Haible  <bruno@clisp.org>

	* modules/bindings/glibc/linux.lisp: Add a #include <signal.h>.
	Needed for building on glibc 2.1 systems.

2004-03-10  Sam Steingold  <sds@gnu.org>

	* po/Makefile.devel (LISPSOURCES): removed `threads' (mentioned
	twice), added `russian'
	* Makefile.devel (all): `check-configures', not `configures'
	* configure.in (AC_INIT): pre-release 2.32.91

2004-03-10  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c: include "clisp.h" before system
	includes because on BSDs and on glibc 2.1 the system includes
	may define (inline) functions and then we get an error "global
	register variable follows a function definition"

2004-03-09  Sam Steingold  <sds@gnu.org>

	* spvw_mmap.d, spvw_multimap.d: added a "\n" at the end of
	error messages

2004-03-09  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (EXCLUDE): exclude all doc/.cvsignore
	(CLISP): set to $(CURDIR)/build/clisp
	(src/uninames.h): use it

2004-03-09  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (potfiles): Set the CLISP environment variable for
	po/Makefile.devel.
	(src--distrib): Don't create clisp-$(VERSION)-potfiles.tar.bz2.
	* po/Makefile.devel (DSOURCES): Remove rexx.
	(LISPSOURCES): Add international, threads, deprecated. Remove rexx1.

2004-03-09  Sam Steingold  <sds@gnu.org>

	* format.lisp (format-logical-block, formatter): do not signal an
	error on unimplemented functionality

2004-03-08  Sam Steingold  <sds@gnu.org>

	* makemake.in (VERSION): compute reliably
	* configure.in (AC_INIT): pre-release 2.32.90
	(AC_COPYRIGHT): updated the year
	* Makefile.devel (htmldoc): make man pages also

2004-03-08  Bruno Haible  <bruno@clisp.org>

	* makemake.in (arimips.o): Don't use the assembler explicitly on Linux.
	Reported by Will Newton <will@misconception.org.uk>.

2004-03-08  Will Newton <will@misconception.org.uk>

	* ariarm.d (C, GLABEL, LABEL): Remove useless ## that triggers gcc 3
	warnings.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	* lfloat.d (LF_sqrt_LF): Simplify the last bug fix.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_structure_default): Change error message.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (namestring_correctly_parseable_p): Mark as GC-unsafe.
	* io.d (pr_orecord): Fix GC-safety bug.

2004-03-08  Bruno Haible  <bruno@clisp.org>

	* unix.d (NO_BLOCK_DECL, START_NO_BLOCK, END_NO_BLOCK): Prefer the
	SysV way over the old FIONBIO way. Needed for Linux/x86_64.

2004-03-08  Bruno Haible  <bruno@clisp.org>

	* lfloat.d (LF_LF_mal_LF): Fix the second underflow condition.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	* clos.lisp (find-method-combination): Renamed from
	method-combination-object.
	(method-combination): Add slots check-method-qualifiers,
	call-next-method-allowed.
	(method-combination STANDARD): Delay initialization until ready.
	Initialize the two new method-combination slots.
	(analyze-method-description): Return the qualifiers in the order they
	were given in the method description, not in reverse order. Fix bug
	introduced on 2004-02-09.
	(standard-method-combination-expander): Style improvement. Rename
	inner function apply-forms to forms-for-invoking-sequentially.
	(short-form-method-combination-check-method-qualifiers): New function.
	(standard-method-combination-call-next-method-allowed): New function.
	(check-method-qualifiers): New function.
	(invalid-method-qualifiers-error): New function.
	(std-add-method): Invoke check-method-qualifiers.
	(analyze-defgeneric): Return method combination as 3rd value, not as
	5th value. Better error message.
	(defgeneric, ensure-generic-function): Update.
	(make-generic-function): Set the method combination before adding the
	methods, not after.
	(do-defgeneric): Likewise. When changing the method combination of an
	existing generic function, check its methods' qualifiers against it.
	(make-generic-function-form): Update.
	(no-next-method): Invoke call-next-method-allowed and provide a more
	appropriate error message.
	(qualifiers-match-p): Fix typo in error message.
	(compute-method-partition-lambdas): Renamed from
	compute-method-partition-lambda. Provide a second lambda form as a
	second value. Use symbol CLOS::METHD instead of CL:METHOD.
	(define-method-combination): Initialize the two new method-combination
	slots. Don't use (COMPILE NIL ...) on code that comes partially from
	the user.
	(compute-effective-method-function): Style improvement.
	(compute-short-form-effective-method-form): Remove first argument.
	(short-form-method-combination-call-next-method-allowed): New function.
	(long-form-method-combination-call-next-method-allowed): New function.
	(method-combination AND APPEND ... PROGN +): Initialize the two new
	method-combination slots.

2004-03-08  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Use 'extern' instead of 'global'.
	(check_real): Don't declare as inline.
	* lisparit.d (check_real): Likewise.

2004-03-06  Sam Steingold  <sds@gnu.org>

	* pathname.d (use_default_dir): fixed a GC-safety bug

2004-03-04  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Make syscalls module available on win95/98/me (dynamic DLL loading)
	* modules/syscalls/calls.c (CreateHardLinkFuncType)
	(BackupWriteFuncType) [WIN32_NATIVE]: new types.
	(CreateHardLinkFunc, BackupWriteFunc, kernel32)	[WIN32_NATIVE]:
	new static variables.
	(OldHardLinkGuard, OldHardLink,	MkHardLink) [WIN32_NATIVE]: new
	functions.
	(module__syscalls__init_function_2): new function.
	(POSIX:STREAM-LOCK): Use GetFileSize instead of GetFileSizeEx.

2004-03-05  Sam Steingold  <sds@gnu.org>

	* makemake.in (DEVPREFIX): needed on both "win32gcc" and "cygwin"

2004-03-04  Bruno Haible  <bruno@clisp.org>

	Change the maximum number of hash buckets of a symbol table
	from 2^16-1 to 2^24-1.
	* package.d (string_hashcode): Return a 24-bit integer.
	(newinsert): Take a 24-bit size as argument.
	(rehash_symtab): Bump the max to 2^24-1.
	(symtab_lookup, symtab_find, symtab_insert, symtab_delete):
	Don't cast the size to uintW.

2004-03-04  Bruno Haible  <bruno@clisp.org>
            Sam Steingold  <sds@gnu.org>

	* package.d (string_hashcode): Don't ignore the 17th and following
	characters. Use + instead of |, to maintain statistical
	equidistribution.

2004-03-03  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (make-anode): avoid compiler warning

2004-03-02  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-NTH, c-SETNTH): when the index is not an
	integer, do not signal ERROR-OF-TYPE, use C-WARN instead

2004-03-03  Bruno Haible  <bruno@clisp.org>

	* foreign.d (ffi_identity): Pass and return an uintP, not just an
	uintL.

2004-03-02  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (function-signature): check *KNOWN-FUNCTIONS*
	before the function object
	(c-APPLY): check the local function signature before the global one

2004-03-02  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (make-anode, anodes-seclass-or, seclass-or-f)
	(seclass-or-anode): Define them also when loading the compiler.

2004-03-01  Bruno Haible  <bruno@clisp.org>

	* spvw_garcol.d (move_aligned_p1_p2): Don't use the *p++ form with
	GCC 3 any more.
	Reported by Will Newton <will@misconception.org.uk>.

2004-03-01  Bruno Haible  <bruno@clisp.org>

	* encoding.d (CONVERT-STRING-FROM-BYTES): Avoid gcc warning
	"initializer element is not computable at load time".

2004-03-01  Bruno Haible  <bruno@clisp.org>

	* stream.d: Avoid gcc warnings "ISO C does not allow extra `;' outside
	of a function".

2004-03-01  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (HAVE_SAVED_REGISTERS, struct registers): Define only if
	needed.

2004-02-29  Kaz Kylheku  <kaz@ashi.footprints.net>

	* backquote.lisp (bq-expand-list): If the backquote form is an
	improper list, treat the terminating atom as if it were
	backquoted.  (CLHS wants it to just be quoted).
	This allows for unquotes in the atom if it is a vector.

2004-02-29  Bruno Haible  <bruno@clisp.org>

	Major speedup of slot accessors generated by DEFCLASS in interpreted
	code.
	* clos.lisp (defclass): Force the accessor methods to be compiled.

2004-02-28  Bruno Haible  <bruno@clisp.org>

	* intdiv.d (I_I_I_mod_expt_I): Avoid endless loop when the exponent is
	= 0.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* error.d (check_pos_integer): Fix typo in error message.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* spvw.d (main): Combine the handling of the options -t TMPDIR and
	-traditional.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* unix.d: Include <sys/statfs.h>. Needed for MULTIMAP_MEMORY_VIA_FILE.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (_GNU_SOURCE): Define. Needed for MULTIMAP_MEMORY_VIA_SHM
	on Linux: glibc defines IPC_INFO in <sys/ipc.h> only if _GNU_SOURCE
	is defined.

2004-03-01  Bruno Haible  <bruno@clisp.org>

	* spvwtabs.d: Undefine open, truncate, ftruncate.
	* lisparit.d: Undefine truncate, ftruncate.
	Reported by Russell McManus <russell_mcmanus@yahoo.com>.

2004-02-29  Sam Steingold  <sds@gnu.org>
            Bruno Haible  <bruno@clisp.org>

	* encoding.d (encoding_from_name): Call FIND-SYMBOL and remove most of
	the mapping table.

2004-02-29  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fixed cygwin build
	* pathname.d (LAUNCH): declared exit_code.

2004-02-27  Peter Seibel  <peter@javamonkey.com>

	* pprint.lisp (copy-pprint-dispatch): accept NIL argument

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* predtype.d (TYPE-OF): For vectors, return (SIMPLE-ARRAY NIL (n))
	or (VECTOR NIL n), depending on whether the vector is simple.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* time.d (get_real_time): Take care of the case when struct timeval is
	not the same thing as internal_time_t.

2004-02-27  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCFLAGS): Don't use -O2 with current gcc on x86_64.

2004-02-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (oint_type_*, oint_addr_*, oint_data_*) [AMD64]: Define
	appropriately for Linux/x86_64.
	(SINGLEMAP_MEMORY, MULTIMAP_MEMORY) [AMD64 Linux]: Don't define on this
	platform.
	* spvw.d (main): Limit the mmap()ed addresses to 36 bits.

2004-02-26  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Define oint and soint consistently with
	lispbibl.d.

2004-02-26  Bruno Haible  <bruno@clisp.org>

	* spvw_fault.d (xmmprotect): Fix declaration.

2004-02-26  Bruno Haible  <bruno@clisp.org>

	* flo_konv.d (DF_to_c_double): Use minus_bit instead of -bit. Avoids
	an "integer overflow" warning on 64-bit platforms.

2004-02-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (fake_gcv_object): Cast argument to oint. Avoids gcc
	warnings on 64-bit platforms when the argument is an uintL.
	* eval.d (nest_var): Cast count to oint, Avoids a gcc warning as well.

2004-02-25  Bruno Haible  <bruno@clisp.org>

	* i18n.d: Prefix some symbols with "i18n_".
	* subr.d: Update.
	* constsym.d: Update.

2004-02-25  Bruno Haible  <bruno@clisp.org>

	* stream.d: Remove syntactically invalid debugging statements.

2004-02-25  Bruno Haible  <bruno@clisp.org>

	* stdint.h.in: Test __sun, not __sun__, so that it also works with cc
	on Solaris.

2004-02-25  Bruno Haible  <bruno@clisp.org>

	* unix.d (msync, mmap, munmap): Comment out prototype. Needed to avoid
	prototype clash on Solaris 7.
	* spvw_mmap.d (munmap): Likewise.

2004-02-25  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCPPFLAGS): New variable.
	(XCFLAGS): Don't add the value of XCPPFLAGS here.
	(MODULE_CPPFLAGS_VAR): New variable.
	(all .c compilation rules): Use CPPFLAGS before CFLAGS.
	* clisp-link.in: Use CPPFLAGS variable that is read from 'makevars'.
	* modules/berkeley-db/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/berkeley-db/Makefile.in (CPPFLAGS): New variable.
	* modules/bindings/glibc/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/bindings/glibc/Makefile (CPPFLAGS): New variable.
	* modules/bindings/win32/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/bindings/win32/Makefile (CPPFLAGS): New variable.
	* modules/clx/mit-clx/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/clx/new-clx/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/clx/new-clx/Makefile.in (CPPFLAGS): New variable.
	* modules/dirkey/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/dirkey/Makefile.in (CPPFLAGS): New variable.
	* modules/fastcgi/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/fastcgi/Makefile.in (CPPFLAGS): New variable.
	* modules/netica/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/netica/Makefile (CPPFLAGS): New variable.
	* modules/oracle/link.sh: Pass CPPFLAGS to the Makefile.
	* modules/oracle/Makefile.in (CPPFLAGS): New variable.
	* modules/pcre/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/pcre/Makefile.in (CPPFLAGS): New variable.
	* modules/postgresql/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/postgresql/Makefile.in (CPPFLAGS): New variable.
	* modules/queens/Makefile (CPPFLAGS): New variable.
	* modules/regexp/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/regexp/Makefile.in (CPPFLAGS): New variable.
	* modules/syscalls/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/syscalls/Makefile.in (CPPFLAGS): New variable.
	* modules/wildcard/link.sh.in: Pass CPPFLAGS to the Makefile.
	* modules/wildcard/Makefile.in (CPPFLAGS): New variable.

2004-02-25  Sam Steingold  <sds@gnu.org>

	* m4/ldap.m4 (CL_LDAP): Solaris/cc requires <lber.h> before <ldap.h>
	* modules/dirkey/dirkey.c: ditto

2004-02-24  Sam Steingold  <sds@gnu.org>

	* modules/clx/mit-clx/input.lisp (declare-event): fixed a
	compilation error

2004-02-24  Bruno Haible  <bruno@clisp.org>

	* loadform.lisp (missing-load-form): Fix mistake in the last patch.

2004-02-24  Bruno Haible  <bruno@clisp.org>

	* m4/readline.m4 (CL_READLINE): Don't use AC_SEARCH_LIBS. Instead,
	use the value of LIBREADLINE, as determined by AC_LIB_LINKFLAGS_BODY.

2004-02-24  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (nil_vector_p): Change to match new nil-vector handling.
	(nil_vector_0_p): Remove macro.
	* charstrg.d (test_stringsymchar_arg): Use nil_vector_p.
	* predtype.d (elt_compare): Return false when comparing nil-vectors.
	(equal): Update nil-vector handling. A string and a nil-vector of the
	same length > 0 now compare as different.
	(equalp): Likewise.
	(TYPE-OF): For nil-vectors, return (VECTOR NIL n), not (ARRAY NIL (n)).
	* error.d (check_string): Update.

2004-02-24  Sam Steingold  <sds@gnu.org>

	* clos.lisp (std-remove-method): reset (STD-METHOD-GF OLD-METHOD)
	(std-add-method): signal an error when METHOD already belongs to
	a generic function

2004-02-23  Sam Steingold  <sds@gnu.org>

	* pathname.d (DIRECTORY): pathname argument is required
	* subr.d (directory): ditto
	* constobj.d (version): bumped

2004-02-20  Bruno Haible  <bruno@clisp.org>

	* time.d (encode_universal_time): Define only if TIME_RELATIVE.

2004-02-18  Bruno Haible  <bruno@clisp.org>

	* spvw_debug.d (find_pack, find_sym): Comment out unused and unportable
	functions.

2004-02-18  Bruno Haible  <bruno@clisp.org>

	* pathname.d (LAUNCH): Move declaration of exit_code so as to avoid
	gcc warning.

2004-02-18  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (main): Fix the declarations of cslen_ff, cstombs_ff.

2004-02-16  Bruno Haible  <bruno@clisp.org>

	* charstrg.d (SYS::STRING-INFO): Make it work in TYPECODES mode too.
	* describe.lisp (describe-slotted-object for ARRAY): Describe the
	string element type as "UCS-4", not "32-bit".

2003-01-26  Bruno Haible  <bruno@clisp.org>

	Allow multibyte characters in pathnames.
	* pathname.d (legal_namebyte): New function.
	(legal_namechar): Invoke it.

2004-02-16  Bruno Haible  <bruno@clisp.org>

	* stream.d (stream_get_read_eval, stream_set_read_eval): Invoke
	instance_un_realloc.

2004-02-15  Bruno Haible  <bruno@clisp.org>

	Undo the 2001-11-27 patch, because it breaks in WIDE_SOFT mode with
	gcc-3.3.
	* array.d (SIMPLE_NREVERSE): Change to contain only the loop.
	(elt_nreverse): Handle the byte vectors correctly.

2004-02-15  Bruno Haible  <bruno@clisp.org>

	Make GENERATIONAL_GC work in WIDE mode again.
	* spvw_garcol.d (PRIoint): New macro.
	(gc_mark_stack): Pass to gc_mark the pointer without symbol flags.
	Undoes the bug introduced on 2002-08-03.

2004-02-15  Bruno Haible  <bruno@clisp.org>

	Enforce 8-byte alignment needed by GENERATIONAL_GC in WIDE_SOFT mode,
	working around a gcc-3.3 bug that is fixed in gcc-3.4.
	* lispbibl.d (INNARDS_OF_GCV_OBJECT): Add _attribute_aligned_object_.
	(_attribute_aligned_object_): Default to empty.
	(record_, srecord_, xrecord_, cons_, ratio_, complex_, symbol_)
	(svector_, siarray_, iarray_, Package, Hashtable, Readtable, Pathname)
	(Logpathname, Random_state, Byte, Fsubr, Loadtimeeval, Symbolmacro)
	(Macro, FunctionMacro, Encoding, Faddress, Fvariable, Ffunction)
	(Weakpointer, weakkvt_t, Finalizer, Socket_server, Yetanother, Stream)
	(Class, Instance, Closure, Iclosure, Cclosure, subr_t): Add
	_attribute_aligned_object_ to all fields of type gcv_object_t.
	* genclisph.d (main): Adjust accordingly.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	* lists153.tst: Reduce the memory size, so that it needs only 80 MB,
	not 160 MB, when using a WIDE memory model.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (Rectype_realloc_Instance): Remove enum value.
	(instancep, case_Rectype_Instance_above): Simplify accordingly.
	(instflags_forwarded_B): New macro.
	(instance_un_realloc, instance_valid_p): Add comments.
	(instance_update): Renamed from check_instance.
	* predtype.d: Update accordingly.
	* hashtabl.d: Likewise.
	* spvw_garcol.d (UNREALLOC): Test a recflags bit instead of testing
	for Rectype_realloc_Instance.
	* record.d (CLOS::%CHANGE-CLASS): Simplify.
	* io.d (pr_orecord): Remove handling of realloc_Instance type.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	Make arrays with element type NIL work also in the TYPECODES config.
	* lispbibl.d (Rectype_nilvector, Rectype_Snilvector): Remove enum
	items.
	(Atype_NIL, Array_type_snilvector): Define also for TYPECODES.
	(Array_type_nilvector): Remove macro.
	(general_vector_p): Exclude the vectors of element type NIL.
	(case_Rectype_Snilvector_above): Remove macro.
	(case_Rectype_nilvector_above): Remove macro.
	(if_recordp): Remove special casing of Rectype_nilvector,
	Rectype_Snilvector.
	(allocate_nilvector): Remove declaration.
	(fehler_retrieve): New declaration.
	* spvw_circ.d (get_circ_mark, get_circ_unmark, subst_circ_mark, subst)
	(subst_circ_unmark): Remove handling of nilvector and snilvector types.
	* spvw_garcol.d (gc_mark): Likewise.
	* spvw_genera1.d (walk_area, build_old_generation_cache): Likewise.
	* spvw_objsize.d (objsize): Likewise.
	* spvw_update.d (update_varobject): Likewise.
	* spvw_typealloc.d (allocate_nilvector): Remove function.
	* array.d (eltype_code): Recognize also types equivalent to the
	NIL type, not only NIL itself.
	(iarray_displace, iarray_displace_check, array_displace_check):
	Handle the case when the storage vector is NIL.
	(fehler_retrieve): Change error message, ignore the storage vector.
	(fehler_store): Give a different error message if the storage
	vector is NIL.
	(array_atype): Recognize vectors of element type NIL. Drop
	Array_type_nilvector and Array_type_snilvector.
	(elt_reverse, elt_nreverse): Give an error for a vector of element
	type NIL.
	(make_storagevector): For eltype==Atype_NIL, just return NIL.
	(MAKE-ARRAY): For eltype==Atype_NIL, return a vector of type
	vector_type, not just the storage vector.
	* io.d (pr_vector): Don't call array_element_type if the array's
	element type is known to be NIL.
	(pr_array): Likewise.
	(pr_orecord): Remove handling of Rectype_nilvector, Rectype_Snilvector.
	* sequence.d (get_seq_type): Change recognition of arrays with
	element type NIL.
	* hashtabl.d (hashcode4_vector): Handle the case of a vector of
	element type NIL.
	* predtype.d (elt_compare): Handle the cases when dv1 or dv2 are
	storage vectors of element type NIL.
	(TYPE-OF): Handle vectors of element type NIL specially.
	(CLOS:CLASS-OF): Remove handling of nilvector and snilvector types.
	(heap_statistics_mapper): Likewise, but still distinguish general
	vectors and those of element type NIL.
	* type.lisp (upgraded-element-type): Recognize also types
	equivalent to the NIL type, not only NIL itself.
	* genclisph.d (general_vector_p): Exclude the vectors of element
	type NIL.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	* genclisph.d (make_system, vectorp): Make consistent with lispbibl.d.
	(simple_vector_p, simple_string_p, simple_bit_vector_p, bit_vector_p,
	TheFpointer) [TYPECODES]: Fix compilation errors.
	(general_vector_p, arrayp): New exports.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (cclosure_flags) [TYPECODES]: Fix.

2004-02-14  Bruno Haible  <bruno@clisp.org>

	* loadform.lisp (simple-missing-load-form): New type.
	(signal-missing-load-form): Show the object as well.

2004-02-20  Sam Steingold  <sds@gnu.org>

	fixed file renaming on UNIX
	* pathname.d (rename_file): check that the old name exists and
	use rename_existing_file() instead of rename_file_to_nonexisting()
	(rename_file_to_nonexisting): removed

2004-02-20  Sam Steingold  <sds@gnu.org>

	* record.d (SLOT-BOUNDP): when slot is missing, return the
	boolean equivalent of the return value of SLOT-MISSING, per ANSI

2004-02-19  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 898561 ]: LOOP compilation warnings
	* loop.lisp (expand-loop): bind *helpvars* first thing (for 898561)
	When arithmetic iteration variable is NIL, use a GENSYM

2004-02-19  Sam Steingold  <sds@gnu.org>

	* pathname.d (PATHNAME-DEVICE): return :UNSPECIFIC for
	LOGICAL-PATHNAMEs per
	<http://www.lisp.org/HyperSpec/Body/sec_19-3-2-1.html>
	* constsym.d (Kunspecific): added

2004-02-19  Sam Steingold  <sds@gnu.org>

	* io.d (pr_orecord): signal PRINT-NOT-READABLE when *PRINT-READABLY*
	and *PRINT-PATHNAMES-ANSI* are non-NIL, but the namestring will
	not be parsed in to a similar pathname
	* pathname.d (fix_parse_namestring_dot_file): extracted from
	split_name_type
	(split_name_type): use fix_parse_namestring_dot_file()
	(namestring_correctly_parseable_p): check whether this pathname's
	namestring will be parsed into a similar pathname
	* lispbibl.d (namestring_correctly_parseable_p): prototype

2004-02-19  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (MAKE-HASH-TABLE): :REHASH-THRESHOLD is a (REAL 0 1)
	:REHASH-SIZE is a (OR (INTEGER 1 *) (FLOAT (1.0) *))
	* constobj.d (type_hashtable_rehash_threshold)
	(type_hashtable_rehash_size): ditto

2004-02-18  Sam Steingold  <sds@gnu.org>

	* array.d (ADJUST-ARRAY): :FILL-POINTER NIL means keep it as it was;
	use DIMENSION, not FILL-POINTER when copying data to the new vector

2004-02-18  Sam Steingold  <sds@gnu.org>

	* clhs.lisp (read-from-file): FIND-PACKAGE is idempotent

2004-02-18  Sam Steingold  <sds@gnu.org>

	* pathname.d (DELETE-FILE): in ANSI mode, return T, as per ANSI spec

2004-02-17  Sam Steingold  <sds@gnu.org>

	permit lists of uint32 length, the old limit was FIXNUM
	* sequence.d (LENGTH): llength1() can return a BIGNUM
	* list.d (list_length): use UL_to_I() instead of fixnum()
	(MAKE-LIST): use I_to_UL(check_uint32())
	instead of posfixnum_to_L(check_posfixnum())
	(get_integer_truncate): new function
	(NTH, NTHCDR, LAST, MAKE-LIST, BUTLAST, NBUTLAST): use it
	instead of posfixnum_to_L(check_posfixnum())
	* error.d, lisparit.d (check_integer, check_pos_integer):
	moved from LISPARIT to ERROR
	* lispbibl.d (check_integer, check_pos_integer): prototype

2004-02-17  Sam Steingold  <sds@gnu.org>

	* pathname.d (version_diff): use version object (OR NULL
	INTEGER (MEMBER :WILD :NEWEST)) without converting it to string
	(translate_version): expect version to be a version object

2004-02-16  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (write-sequence): make sure to return only one value
	when writing bytes - for consistency and ANSI compliance

2004-02-16  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (nil_vector_p, nil_vector_0_p): new macros
	* error.d (check_string): use them
	* predtype.d (equal, equalp): handle nilvector properly:
	since NIL is a subtype of CHARACTER, (VECTOR NIL) is a STRING

2004-02-16  Sam Steingold  <sds@gnu.org>

	* stream.d (MAKE-STRING-OUTPUT-STREAM): :ELEMENT-TYPE NIL means
	make a stream based on (VECTOR NIL)
	(get_output_stream_string): check that string is not (VECTOR NIL)
	(BUILT-IN-STREAM-ELEMENT-TYPE): return NIL
	for (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE NIL)
	(fehler_write): replaces fehler_wr_char() & fehler_wr_integer()
	(wr_ch_forbidden, wr_ch_array_forbidden): for STREAM-ELEMENT-TYPE NIL
	* macros2.lisp (with-output-to-string):
	default :ELEMENT-TYPE to CHARACTER

2004-02-16  Sam Steingold  <sds@gnu.org>

	* stream.d (combine_stream_element_types): new function
	(BUILT-IN-STREAM-ELEMENT-TYPE): use it to handle 2way/echo & concat

2004-02-15  Sam Steingold  <sds@gnu.org>

	FILE-POSITION does not require its 1st argument to be a FILE-STREAM
	* stream.d (String-Input-Stream): new slot strm_str_in_begindex
	(MAKE-STRING-INPUT-STREAM): init it (and allocate space for it!)
	(logical_position_file_start, logical_position_file)
	(logical_position_file_end): return the new offset
	(FILE-POSITION): handle i/o STRING-STREAMs and STRING-PUSH-STREAM
	call GRAY:STREAM-POSITION for all other objects
	* gray.lisp (stream-position): new generic function
	* constsym.d (stream_position): added

2004-02-15  Sam Steingold  <sds@gnu.org>

	* stream.d (GET-OUTPUT-STREAM-STRING, STRING-INPUT-STREAM-INDEX):
	signal TYPE-ERROR instead of ERROR

2004-02-13  Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (defstruct): allow slots named NIL by using
	DS-SLOT-VAR to check that the slot does not refer to the
	structure name
	* io.d (pr_structure_default): ditto

2004-02-13  Sam Steingold  <sds@gnu.org>

	due to the rule 1 in
	<http://www.lisp.org/HyperSpec/Body/fun_type-of.html>,
	we must have (TYPEP X Y) ==> (SUBTYPEP (TYPE-OF X) Y)
	for all "built-in types" Y as listed in table 4-2 in
	<http://www.lisp.org/HyperSpec/Body/sec_4-2-3.html>
	if X is a FIXNUM or a BIGNUM and Y is UNSIGNED-BYTE, this means
	that TYPE-OF must distinguish between positive and negative integers
	* constobj.d (type_negfixnum, type_posbignum, type_negbignum): added
	* predtype.d (TYPE-OF): return them for FIXNUMs and BIGNUMs

2004-02-13  Sam Steingold  <sds@gnu.org>

	* stream.d (check_open_file_stream): handle BROADCAST-STREAMs
	(FILE-POSITION, FILE-LENGTH, FILE-STRING-LENGTH): ditto

2004-02-12  Sam Steingold  <sds@gnu.org>

	ensure that DEFMETHOD returns what is actually saved into GF
	* clos.lisp (standard-method): do not create a copier
	(std-add-method): do not copy the method

2004-02-12  Sam Steingold  <sds@gnu.org>

	ANSI compliance issues
	* charstrg.d (test_stringsymchar_arg): (VECTOR NIL) is a string,
	so #A(NIL (0)) is acceptable instead of ""
	* error.d (check_string): ditto
	* stream.d (input_stream_p, output_stream_p): for
	SYNONYM-STREAMs, return the value for the underlying stream
	(STREAM-EXTERNAL-FORMAT): handle empty BROADCAST-STREAMs
	(make_buffered_stream): :PROBE streams are closed right away
	* macros2.lisp (with-output-to-string): wrap declarations properly

2004-02-11  Sam Steingold  <sds@gnu.org>

	* makemake.in: fixed cygwin package creation
	(VERSION, CLISP_VERSION, CLISP_RELEASE): new make variables
	(setup.hint): mention $(MODULES) and allow testing releases

2004-02-11  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c: <pcre.h> may be actually <pcre/pcre.h>
	* modules/berkeley-db/dbi.lisp (with-open-db):
	do not pass environment to PARSE-BODY

2004-02-11  Sam Steingold  <sds@gnu.org>

	* predtype.d (TYPE-OF): handle (VECTOR NIL)

2004-02-10  Sam Steingold  <sds@gnu.org>

	* lfloat.d (LF_sqrt_LF): fixed a bug with large uexp whereby SQRT
	of MOST-POSITIVE-LONG-FLOAT was less than 1

2004-02-09  James Anderson  <james.anderson@setf.de>
	    Sam Steingold  <sds@gnu.org>

	* clos.lisp (analyze-method-description): always set
	:WANTS-NEXT-METHOD-P to T because here there is no way to figure
	out whether it will be actually needed because of METHOD-COMBINATION,
	and STD-ADD-METHOD will reset it if necessary anyway
	(standard-method-combination-expander): check for
	WANTS-NEXT-METHOD-P also in BEFORE-METHODS (EF-2) and
	AFTER-METHODS (EF-3)

2004-02-09  Sam Steingold  <sds@gnu.org>

	* misc.d (ARGV): return the vector of command-line args to runtime
	* constsym.d, subr.d, constobj.d (argv): added
	* spvw.d (main): init O(argv)
	* init.lisp (ARGV): export

2004-02-08  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 890138 ]: 0 distance jump as 2 bytes => segfault
	* compiler.lisp (assemble-LAP): make sure that a jump of 0
	distance is not encoded with 2 bytes (otherwise 128 0 is
	treated as a 6 byte label)

2004-02-05  Sam Steingold  <sds@gnu.org>

	allow current directory to be on a remote host
	* pathname.d (default_drive): return 0 when GetCurrentDirectory()
	returns a network (UNC) path
	(default_directory_of): allow drive=0 (return GetCurrentDirectory())
	(use_default_dir): allow UNC default path
	(CD): allow network argument
	(init_pathnames): set O(default_drive) to NIL when running drive=0

2004-02-05  Sam Steingold  <sds@gnu.org>

	* charstrg.d (string_concat): do not modify argptr when arg is
	not a string

2004-02-03  Bruno Haible  <bruno@clisp.org>

	* io.d (JUSTIFY_END_FILL): Renamed from JUSTIFY_END_ENG.
	(JUSTIFY_END_LINEAR): Renamed from JUSTIFY_END_WEIT.
	(justify_end_fill): Renamed from justify_end_eng.
	(justify_end_linear): Renamed from justify_end_weit.
	All callers changed.

2004-02-03  James Anderson  <james.anderson@setf.de>

	* clos.lisp: some fixes for DEFINE-METHOD-COMBINATION

2004-02-02  Bruno Haible  <bruno@clisp.org>

	* io.d (pr_array_recursion): Add an rdepth argument. Use dense output
	if rdepth==1.
	(pr_array): Pass the rank as initial rdepth.

2004-02-02  Bruno Haible  <bruno@clisp.org>

	* Makefile.devel (%/configure.in, %/config.h.in): Restrict the rule
	to not match files in ffcall and libcharset.
	(ffcall/vacall/config.h.in, ffcall/trampoline/config.h.in,
	ffcall/callback/vacall_r/vacall_r.h.in,
	ffcall/callback/trampoline_r/config.h.in): Remove empty rules.

2004-02-02  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 889037 ]: Incorrect value returned by compiled function
	* compiler.lisp (traverse-anode): UNWIND-PROTECT-OPEN discards
	*CURRENT-VALUE* and *CURRENT-VARS*, just like UNWIND-PROTECT-CLOSE

2004-02-01  James Anderson  <james.anderson@setf.de>
	    Sam Steingold  <sds@gnu.org>

	DEFINE-METHOD-COMBINATION is now implemented
	* clos.lisp: merged in James' patch
	* init.lisp: export the symbols
	* constobj.d (version): bumped because of changed
	signature of DO-DEFMETHOD
	* record.d (parse_seclass): removed legacy code

2004-02-01  Sam Steingold  <sds@gnu.org>

	* spvw.d (my_malloc): malloc() with error check
	* lispbibl.d, genclisph.d (my_malloc): export
	* foreign.d (xmalloc): removed, use my_malloc() instead
	* modules/clx/new-clx/clx.f, modules/regexp/regexi.c: ditto

2004-01-31  Sam Steingold  <sds@gnu.org>

	* pathname.d (looks_logical_p): return true only if all the
	characters in the string are legal logical path elements

2004-01-29  Sam Steingold  <sds@gnu.org>

	some fixes for Garnet
	* modules/clx/new-clx/clx.f (get_font_info_and_display): fixed
	arguments passed to SLOT-VALUE
	(general_plist_writer, SET-GCONTEXT-DASHES): fixed arguments
	passed to SET-SLOT-VALUE
	(SET-GCONTEXT-DASHES): use REPLACE instead of an explicit loop
	(BELL): the second argument is optional

2004-01-29  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 874859 ]: incorrect stack cleanup
	* compiler.lisp (simplify): fixed a typo in SKIPSP+SKIPI=>SKIPI

2004-01-27  Sam Steingold  <sds@gnu.org>

	* modules/fastcgi/fastcgi.lisp: add :FASTCGI to *FEATURES*
	* modules/oracle/oracle.lisp: add :ORACLE to *FEATURES*
	* modules/pcre/pcre.lisp: add :PCRE to *FEATURES*
	* modules/postgresql/postgresql.lisp: add :POSTGRESQL to *FEATURES*
	* modules/regexp/regexp.lisp: add :REGEXP to *FEATURES*

2004-01-25  Sam Steingold  <sds@gnu.org>

	new function (MOD-EXPT x y z) = (MOD (EXPT x y) z)
	* lisparit.d (check_pos_integer): new function
	(ISQRT): use it instead of check_integer()
	(MOD-EXPT): call I_I_I_mod_expt_I()
	* intsqrt.d (I_isqrt_I): assume non-negative argument
	* intdiv.d (I_I_I_mod_expt_I): implemented
	* init.lisp (MOD-EXPT): exported
	* constsym.d, subr.d (mod_expt): added

2004-01-25  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (get_ptr_object_and_display)
	(get_font_info_and_display, DISCARD-FONT-INFO): use check_fpointer()
	(OPEN-DISPLAY): use fehler_key_odd()
	(SCREEN-BACKING-STORES): use VALUES1
	(error_required_keywords, my_malloc, error_no_such_color):
	new functions
	(CREATE-WINDOW, CREATE-CURSOR, CREATE-GLYPH-CURSOR):
	use error_required_keywords()
	(handle_image_z, PUT-IMAGE, SET-FONT-PATH): use my_malloc()
	(ALLOC-COLOR, LOOKUP-COLOR): use error_no_such_color()
	(READ-FILE-TO-PIXMAP): signal an error on failure instead of
	returning error code
	* modules/clx/new-clx/demos/clx-demos.lisp: supply pathname to REQUIRE
	do not SHADOW USAGE

2004-01-25  Bruno Haible  <bruno@clisp.org>

	* m4/mprotect.m4: Add back the getpagesize() prototype.
	It is determined by getpagesize.m4.

2004-01-23  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (get_font_info_and_display):
	canonicalize encoding by inserting "-" after "ISO" when necessary
	Suggested by Pascal J.Bourguignon <pjb@informatimago.com>

2004-01-20  Bruno Haible  <bruno@clisp.org>

	* po/clisp-xgettext (d-parse-string): Recognize \n as newline
	inside a C string.

2004-01-20  Bruno Haible  <bruno@clisp.org>

	Remove support for MSDOS and OS/2, using EMX.
	* os2: Remove directory.
	* msdos.d: Remove file.
	* cfgdos.lisp: Remove file.
	* lispbibl.d, constobj.d, constsym.d, subr.d, pseudofun.d:
	* genclisph.d, spvw.d, spvw_language.d, spvw_memfile.d:
	* spvw_sigint.d, io.d, stream.d, pathname.d, predtype.d:
	* charstrg.d, hashtabl.d, error.d, errunix.d, encoding.d, time.d:
	* lisparit.d, unixaux.d, init.lisp, defs1.lisp, format.lisp:
	* macros2.lisp, complete.lisp, xcharin.lisp, keyboard.lisp:
	* edit.lisp, runprog.lisp, makemake.in, Makefile.devel:
	* po/Makefile.devel: Remove MSDOS and OS/2 support.

2004-01-19  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/posix.lisp, modules/syscalls/calls.c (confstr):
	new exported system call

2004-01-18  Bruno Haible  <bruno@clisp.org>

	* loadform.lisp (missing-load-form): New type.
	(signal-missing-load-form): New function.
	(make-load-form): Add the methods that must exist according to CLHS.
	(make-init-form): Ignore only errors coming from make-load-form,
	not just any method-call-error. Don't warn for other errors, instead
	pass them on to the caller.

2004-01-18  Bruno Haible  <bruno@clisp.org>

	Remove support for Borland C compiler on Woe32.
	* win32bc: Remove directory.
	* Makefile.devel, makemake.in: Remove Borland C support.

2004-01-16  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (kwd-arg-form, analyze-key): do not evaluate the key
	Reported by Frode Vatvedt Fjeld <frodef@cs.uit.no>

2004-01-16  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c (PCRE-COMPILE): do not allocate a foreign
	pointer for NULL study
	(PCRE-EXEC): pass subject_bytelen instead of subject_len

2004-01-15  Bruno Haible  <bruno@clisp.org>

	Remove support for Amiga running AmigaOS.
	* amiga: Remove directory.
	* amiga.d: Remove file.
	* amiga2.d: Remove file.
	* amigaaux.d: Remove file.
	* erramiga.d: Remove file.
	* rexx.d: Remove file.
	* rexx1.lisp: Remove file.
	* cfgamiga.lisp: Remove file.
	* lispbibl.d, genclisph.d, constobj.d, constsym.d, subr.d:
	* pseudofun.d, spvw.d, spvw_allocate.d, spvw_garcol.d:
	* spvw_language.d, spvw_memfile.d, stream.d, pathname.d, charstrg.d:
	* hashtabl.d, debug.d, error.d, time.d, misc.d, predtype.d:
	* lisparit.d, foreign.d, affi.d, init.lisp, defs1.lisp:
	* describe.lisp, edit.lisp, type.lisp, keyboard.lisp, xcharin.lisp:
	* screen.lisp, foreign1.lisp, affi1.lisp, makemake.in:
	* Makefile.devel, po/Makefile.devel, modules/syscalls/calls.c:
	* os2/delx.cmd: Remove AmigaOS support.

2004-01-15  Sam Steingold  <sds@gnu.org>

	* modules/pcre/cpcre.c (PCRE-COMPILE, PCRE-EXEC):
	do not accept :UTF8 & :NO-UTF8-CHECK, always do Unicode

2004-01-15  Sam Steingold  <sds@gnu.org>

	* encoding.d (encoding_from_name): issue a warning (using libc
	stdio because Lisp i/o is not yet available) if the requested
	encoding cannot be found
	default to ASCII for *FOREIGN-ENCODING* and UTF-8 for others
	(init_dependent_encodings): pass `context' to encoding_from_name()
	(canonicalize_encoding): uppercase the encoding name

2004-01-15  Bruno Haible  <bruno@clisp.org>

	* encoding.d (uni16_wcslen, nls_wcslen, nls_asciiext_wcslen): Signal
	an error when seeing an unencodable character and errors should be
	signalled.

2004-01-15  Bruno Haible  <bruno@clisp.org>

	Remove support for Convex.
	* lispbibl.d, eval.d, aridecl.d, unix.d, unixaux.d, genclisph.d: Remove
	Convex support.

2004-01-12  Bruno Haible  <bruno@clisp.org>

	Remove support for Acorn RISCOS.
	* acorn: Remove directory.
	* acorn.d: Remove file.
	* acornaux.d: Remove file.
	* acornsig.d: Remove file.
	* cfgacorn.lisp: Remove file.
	* lispbibl.d, constobj.d, constsym.d, subr.d, subrkw.d:
	* pseudofun.d, spvw.d, spvw_garcol.d, spvw_memfile.d:
	* spvw_sigint.d, io.d, stream.d, pathname.d, record.d, time.d:
	* lisparit.d, aridecl.d, error.d, unixaux.d, genclisph.d:
	* init.lisp, defs1.lisp, edit.lisp, keyboard.lisp, makemake.in:
	* po/Makefile.devel, Makefile.devel, modules/syscalls/calls.c:
	Remove RISCOS support.

2004-01-12  Sam Steingold  <sds@gnu.org>

	* describe.lisp (*apropos-matcher*): new user variable
	(*apropos-do-more*): exported
	(apropos-list): use it
	* modules/wildcard/wildcard.lisp (wildcard-matcher): new function
	* modules/regexp/regexp.lisp (regexp-matcher): new function
	* modules/regexp/regexi.c (regexp-exec): new option :BOOLEAN
	* modules/pcre/pcre.lisp (pcre-matcher): new function
	* modules/pcre/cpcre.c (pcre-exec): new option :BOOLEAN

2004-01-12  Sam Steingold  <sds@gnu.org>

	* eval.d (TRACE_CALL, ERROR): new debugging macros
	(funcall_iclosure, apply_subr, apply_closure, funcall_subr)
	(funcall_closure): use TRACE_CALL() instead of trace_call()
	(interpret_bytecode_): ditto
	use ERROR instead of goto to find out where the error originated from

2004-01-11  Bruno Haible  <bruno@clisp.org>

	* modules/wildcard/fnmatch.h: Remove file.
	* modules/wildcard/fnmatch_.h: New file, from gnulib.
	* modules/wildcard/fnmatch.c: Update from gnulib.
	* modules/wildcard/fnmatch_loop.c: New file, from gnulib.
	* modules/wildcard/configure.in: Use the macro from gnulib.
	* modules/wildcard/Makefile.in (REGEX_O, REGEX_H): Remove variables.
	(FNMATCH_O): New variable.
	(fnmatch.o): Update.
	(fnmatch.h): New rule.
	(clean): Update.
	* m4/fnmatch.m4: New file, from gnulib.
	* m4/mbstate_t.m4: New file, from gnulib.

	* eval.d (parse_dd): Simplify code.
	(interpret_bytecode_): Restore the protection against
	-fomit-frame-pointer.

	* _clisp.1: Remove mention of option -verbose.

	* _clisp.html: Resynchronize with _clisp.1.

	* _distmakefile (uninstall): Make it work on non-Linux systems as well.

	* amiga.d (read_helper, write_helper): Fix arg name.
	* amigaaux.d (read_helper): Likewise.
	* acorn.d (read_helper): Likewise.

	* lispbibl.d (read_byte_array, write_byte_array): Fix description of
	no_hang argument.
	* stream.d (read_byte_array, write_byte_array): Likewise.
	(wr_by_array_synonym, wr_by_array_broad, wr_by_array_twoway): Use uintL
	instead of int.

	* makemake.in: Remove useless trailing semicolons.

	* clos.lisp (analyze-method-description, analyze-defgeneric)
	(make-generic-function-form, analyze-generic-fundefs): Remove
	environment argument.
	(defmethod, defgeneric, generic-flet, generic-labels): Update.
	* compiler.lisp: Update clos::make-generic-function-form calls.

2004-01-11  Sam Steingold  <sds@gnu.org>

	* record.d (parse_seclass): be backward compatible (wrt 2004-01-09
	SECLASS change)
	* constobj.d (version): do not change now!
	remember to remove the backward compatibility code above
	when `version' changes!

2004-01-10  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (check_structure): added a prototype
	(allocate_weakpointer): removed unused function
	* record.d (allocate_weakpointer): ditto
	(check_structure): new function
	(COPY-STRUCTURE): use it
	(check_generic_function): new function
	(%COPY-GENERIC-FUNCTION, GENERIC-FUNCTION-EFFECTIVE-METHOD-FUNCTION):
	use it
	(MACRO-EXPANDER): recoverable type error
	(check_function_macro): new function
	(FUNCTION-MACRO-FUNCTION, FUNCTION-MACRO-EXPANDER): use it
	* sequence.d (fehler_sequence): new function
	(get_valid_seq_type, LENGTH): use it
	* io.d (PRINT-STRUCTURE): use check_structure()
	* stream.d (test_socket_server): error message unification

2004-01-09  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-form-table): NTH & SYSTEM::%SETNTH
	are now handled by c-NTH & c-SETNTH, respectively,
	for the sake of (defstruct (foo (:type list))) accessors
	(c-NTH, c-SETNTH): optimise NTH & (SETF NTH) to FIRST...TENTH

2004-01-09  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 866282 ]: progv binding not handled properly in compiler
	* compiler.lisp (seclass): a structure of type LIST
	(*seclass-dirty*, *seclass-read*): new constant
	(*seclass-foldable*): renamed from *FOLDABLE-SECLASS*
	(seclass-or, seclass-without): updated for new SECLASS
	(anode-side-effect-free-p): new function
	(c-form, unmodify-unused-var, checking-movable-var-list)
	(c-bind-with-svars, c-UNWIND-PROTECT, c-MULTIPLE-VALUE-PROG1): use it
	(c-VARSET): set SECLASS-USES-BINDING for SPECIAL variables
	(c-PROGV, c-parallel-bind-movable-var-anode):
	check both both USES and USES-BINDING
	(c-FUNCTION, c-HANDLER-BIND): use *SECLASS-READ* instead of a literal
	(f-side-effect, c-unlist, c-DEFUN, c-RETURN-FROM, c-GO):
	use *SECLASS-DIRTY* instead of a literal
	* clos.lisp (%make-gf): ditto
	* record.d (parse_seclass): updated
	* constobj.d (seclass_no_se, seclass_read, seclass_write)
	(seclass_default): updated

2004-01-09  Sam Steingold  <sds@gnu.org>

	* list.d (fehler_nth, fehler_butlast): removed
	(NTH, NTHCDR, LAST, MAKE-LIST, BUTLAST, NBUTLAST):
	use check_posfixnum() instead

2004-01-08  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 873204 ]: infinite recursion with pprint-logical-block
	* io.d (pretty_print_call): avoid an infinite recursion by
	cheking *PRIN-PPRINTER* before calling PPRINT-DISPATCH

2004-01-08  Sam Steingold  <sds@gnu.org>

	moved *LOAD-FORMS* to C to speed up instance output
	* constsym.d (*LOAD-FORMS*): added
	* io.d (pr_instance): check *LOAD-FORMS* before calling MAKE-INIT-FORM
	* spvw.d (init_symbol_values): init *LOAD-FORMS*

2004-01-08  Sam Steingold  <sds@gnu.org>

	made MAKE-INIT-FORM more robust
	* condition.lisp (method-call-error, method-call-type-error):
	new conditions
	* clos.lisp (no-applicable-method, no-primary-method)
	(no-next-method): signal METHOD-CALL-ERROR or METHOD-CALL-TYPE-ERROR
	* init.lisp (method-call-error, method-call-type-error)
	(method-call-error-generic-function, method-call-error-method)
	(method-call-error-argument-list): export new CLOS extras
	* loadform.lisp (make-init-form): use METHOD-CALL-ERROR to
	determine that the error comes from MAKE-LOAD-FORM
	Reported by Kaz Kylheku <kaz@ashi.footprints.net>

2004-01-08  Stanislav Tsekhmistroh  <tcss@kometa.dp.ua>
	    Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Support (run-program ... :wait nil) on win32 by means of "start"
	* runprog.lisp (run-shell-command) [WIN32]: support :wait.

2004-01-07  Bruno Haible  <bruno@clisp.org>

	* misc.d (clisp_setenv) [WIN32_NATIVE]: Call SetEnvironmentVariable.

2004-01-06  Sam Steingold  <sds@gnu.org>

	* modules/regexp/regexi.c (REGEXP): use alloca() instead of calloc();
	return NIL for non-existent matches (instead of an invalid MATCH)
	Reported by Wolfgang Jenkner <wjenkner@inode.at>

2004-01-06  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (with-standard-io-syntax): bind *PRINT-SYMBOLS-LONG*
	and COMPILER::*LOAD-FORMS*

2004-01-06  Bruno Haible  <bruno@clisp.org>

	Assume that <sys/mman.h> declares mmap() in a POSIX compliant way.
	* m4/mmap.m4 (CL_MMAP): Don't define RETMMAPTYPE, MMAP_ADDR_T,
	MMAP_SIZE_T.
	* unix.d (MMAP_ADDR_T, MMAP_SIZE_T, RETMMAPTYPE): Remove macros. Use
	void* and size_t instead.
	* win32.d (MMAP_ADDR_T, MMAP_SIZE_T, RETMMAPTYPE): Remove macros.
	* unixaux.d (fixed_mmap, mprotect): Use void* and size_t instead of
	MMAP_ADDR_T and MMAP_SIZE_T.
	* spvw_fault.d (handle_read_fault, handle_readwrite_fault)
	(handle_fault, handle_fault_range, xmprotect): Likewise.
	* spvw_garcol.d (gar_col_normal): Likewise.
	* spvw_mmap.d (munmap, mprotect, mmap_zeromap, mmap_filemap): Likewise.
	* spvw_multimap.d (msync_mmap_intervals, fdmap): Likewise.

2004-01-04  Sam Steingold  <sds@gnu.org>

	* makemake.in (full-check): new target: call RUN-SOME-TESTS in
	tests/tests.lisp on $(MODULES)/*.tst

2004-01-02  Sam Steingold  <sds@gnu.org>

	* makemake.in (cygwin-src) [cygwin]: cygwin source package

2004-01-02  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 869187 ]: change-class problems
	* record.d (%CHANGE-CLASS): un-realloc instance & new-class

2004-01-01  Sam Steingold  <sds@gnu.org>

	* modules/berkeley-db/bdb.c: include windows.h only on windows
	Reported by Aurelio Bignoli <a.bignoli@computer.org>

2004-01-01  Sam Steingold  <sds@gnu.org>

	* install.bat: fixed bug #[ 868881 ]: replaced `|' with `I'
	and `/' with `\' for the sake of Windows XP

2003-12-31  Sam Steingold  <sds@gnu.org>

	* makemake.in (uninstall-bin) [CYGWIN]: remove clisp.README & clisp.exe
	(testsuite-all): `clean complete compare', not just `complete'

2003-12-29  Sam Steingold  <sds@gnu.org>

	* version.h: 2.32 is released

2003-12-30  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp (seclass-foldable-p, seclass-uses, seclass-modifies):
	New functions.
	(*foldable-seclass*, *pure-seclass*): New variables.
	(make-seclass): New function.
	Use them throughout the compiler instead of null, car, cdr, cons.

2003-12-27  Bruno Haible  <bruno@clisp.org>

	* spvw_calendar.c: New file.
	* spvw.d: Include spvw_calendar.c.
	(print_banner): Light the candles.
	* makemake.in: Emit rule for spvw_calendar.c.

2003-12-27  Bruno Haible  <bruno@clisp.org>

	* m4/mmap.m4: Treat i786 CPUs like i686.
	* asmi386.hh: Likewise.
	* makemake.in: Likewise.

2003-12-26  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 864479 ]: GO from deep nesting does not work
	* compiler.lisp (note-far-used-tagbody): propagate tagbody+tag
	along the stack, just link in the 2002-05-03 patch (bug 550864),
	and use PUSHNEW instead of PUSH to avoid duplication
	(c-TAGBODY): check that the index in tagbody+tag is valid

2003-12-23  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 864845 ]: pathname parsing error: "//"
	* pathname.d (simplify_directory): remove "", i.e., treat "//" as "/"

2003-12-22  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-MULTIPLE-VALUE-BIND): use REVAPPEND
	instead of APPEND+REVERSE
	(c-WITHOUT-PACKAGE-LOCK): use NCONC instead of APPEND
	on a fresh list produced by MAPCAR

2003-12-21  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 864220 ]: integer tags cannot be compiled
	* compiler.lisp (c-TAGBODY): put integer tags into Car(tagbody_cons);
	replace GENSYMs with NILs so that *.FAS will not contain GENSYMs

2003-12-21  Sam Steingold  <sds@gnu.org>

	* spvw.d (--version): print SOFTWARE-TYPE, SOFTWARE-VERSION,
	MACHINE-TYPE, MACHINE-VERSION, MACHINE-INSTANCE
	(print_license): removed dead link
	do not use NLstring

2003-12-21  Sam Steingold  <sds@gnu.org>

	* genclisph.d (test): include <stdio.h> before <clisp.h> because
	the latter declares a global register variable and the former may
	define a function (e.g., on FreeBSD)
	* modules/regexp/regexi.c: ditto

2003-12-20  Sam Steingold  <sds@gnu.org>

	Dropped -fomit-frame-pointer: it buys nothing on today's x86
	processors, and it buys nothing anyway on processors which are not
	as register-starved as the x86 (Bruno)
	* eval.d (interpret_bytecode_) [GNU/FAST_SP]: no need for alloca()
	* makemake.in (XCFLAGS): never use -fomit-frame-pointer

2003-12-20  Sam Steingold  <sds@gnu.org>

	the initial verbosity level is controlled by the pair
	of mutually cancelling options -q/-v - see manual
	* spvw.d (argv_quiet): replaced with argv_verbose

2003-12-19  Bruno Haible  <bruno@clisp.org>

	* spvw_mmap.d (mprotect): Remove declaration. Needed for FreeBSD 5.

2003-12-19  Bruno Haible  <bruno@clisp.org>

	* clisp-link.in: Make 2001-10-23 patch more portable: Avoid repeated
	backslashes inside backquotes.

2003-12-19  Sam Steingold  <sds@gnu.org>

	* trace.lisp (trace1): evaluate :STEP-IF at run time, not at
	compile time, so that STEP is invoked when :STEP-IF evaluates to
	non-NIL, not just when it is present

2003-12-19  Sam Steingold  <sds@gnu.org>

	repeated "-q" sets *LOAD-VERBOSE* and *COMPILE-VERBOSE* to NIL
	* constsym.d (*COMPILE-VERBOSE*): added
	* spvw.d (argv_quiet): integer, not boolean
	(main): repeated "-q" means argv_quiet++

2003-12-19  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 842910 ]: Compiler bug in OPTIMIZE-LABEL
	* compiler.lisp (optimize-label): ignore unused labels
	(optimize-short): do not LABEL-SUBST to unused labels
	(optimize-value): do not discard references to an impossible
	label when it is the same as the definite label

2003-12-18  Sam Steingold  <sds@gnu.org>

	* spvw.d (appease_form): new function
	(main): use it
	(-repl): do not concatenate the string input stream from -x with
	the stdin - this causes a missing prompt problem; bind
	*standard-input* to the string input stream instead and run two
	separate REPLs for -x and for the user interaction via stdio
	* reploop.lisp (main-loop): exit only when EOF happened on an
	interactive stream; otherwise (e.g., the -x string input stream),
	just return for the next REPL to take over

2003-12-18  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 842913 ]: Compiler bug involving optional parameters
	* compiler.lisp (note-references, remove-references):
	handle JMPIFBOUNDP properly (label is 3rd, not 2nd!)

2003-12-17  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (coalesce): fixed bug [ 842912 ]:
	do not coalesce unless NEW-CODE is non-NIL

2003-12-17  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (insert-combined-LAPs): fix bug [ 860052 ]: (RET)
	and (RETGF) can be preceded by a SKIPI instruction instead of a SKIP

2003-12-16  Sam Steingold  <sds@gnu.org>

	use system-wide wildcard(fnmatch) implementation when it is available
	* modules/wildcard/link.sh.in: renamed from link.sh
	* modules/wildcard/configure.in: AC_SUBST FNMATCH_O&FNMATCH_H
	* modules/wildcard/Makefile.in: use FNMATCH_O&FNMATCH_H
	do not define _LIBC - forbidden in user (application) code

2003-12-17  Sam Steingold  <sds@gnu.org>

	new module: Perl Compatible Regular Expressions <http://www.pcre.org/>
	* modules/pcre: new directory

2003-12-15  Bruno Haible  <bruno@clisp.org>

	* init.lisp (sys::%expand-form): Call %expand-form on the result of a
	symbol-macro expansion, instead of returning the expansion directly.
	Reported by Conrad Barski.

2003-12-12  Sam Steingold  <sds@gnu.org>

	prompt is now fully customizable by the user
	* reploop.lisp (prompt-to-string): new macro
	(*prompt-start*, *prompt-step*, *prompt-break*, *prompt-body*)
	(*prompt-finish*): new custom variables
	(*prompt*, prompt-string1, prompt-string2, prompt-string3): removed
	(break-level, step-level): new exported functions
	(prompt-start, prompt-body, prompt-finish, prompt-step)
	(prompt-break): new functions
	(main-loop, break-loop, step-hook-fn): use them

2003-12-11  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 858011 ]: RETURN-FROM not working in compiled FLET/LABELS
	* compiler.lisp (c-FLET, c-LABELS): fixed ADD-IMPLICIT-BLOCK call
	* init.lisp (%expand-lambdabody): ditto
	* eval.lisp (ADD-IMPLICIT-BLOCK): before 2003-12-05,
	ADD-IMPLICIT-BLOCK and add_implicit_block() accepted different
	arguments and returned different values!
	this is now fixed and they are truly identical.

2003-12-01  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-UNWIND-PROTECT): discard side-effect free
	cleanup forms

2003-12-10  Sam Steingold  <sds@gnu.org>

	* modules/bindings/win32/win32.lisp (word): new type
	(EXTENDED_NAME_FORMAT, COMPUTER_NAME_FORMAT): new enum types
	(UNLEN, MAX_COMPUTERNAME_LENGTH): new constants
	(GetSystemDirectoryA, GetWindowsDirectoryA, GetCurrentDirectoryA)
	(GetVersion, GetUserNameA, GetUserNameExA, GetComputerObjectNameA)
	(GetComputerNameExA): new functions
	* modules/syscalls/calls.c, modules/syscalls/posix.lisp
	(VERSION, SYSTEM-INFO) [WIN32, CYGWIN]: new exports

2003-12-05  Sam Steingold  <sds@gnu.org>

	code re-arrangement and streamlining
	* init.lisp, eval.d (ADD-IMPLICIT-BLOCK, FUNCTION-BLOCK-NAME):
	moved to eval.d from init.lisp (already implemented in C anyway!)
	* constsym.d, subr.d (add_implicit_block, function_block_name): added
	* control.d (PARSE-BODY): do not macroexpand anything as per ANSI
	CL (see also patch 2003-02-14); use parse_dd() for all the work;
	do not accept ENV argument
	* subr.d (parse_body): ditto
	* clos.lisp, compiler.lisp, defmacro.lisp, defs1.lisp:
	* defs2.lisp, format.lisp, init.lisp, macros1.lisp, macros2.lisp:
	* macros3.lisp, places.lisp: do not pass ENV to PARSE-BODY
	* eval.d (parse_dd): do not accept ENV args (not used since 2003-02-14)
	(get_closure): do not pass ENV to parse_dd()
	* control.d (LET, LET*, LOCALLY, SYMBOL-MACROLET)
	(MULTIPLE-VALUE-BIND): ditto
	* lispbibl.d (parse_dd): updated the prototype

2003-12-04  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (hash_prepare_store): fixed a bug introduced in the
	2003-05-13 DEFINE-HASH-TABLE-TEST patch: EQ and EQL hash codes
	depend on the object address, so they cannot be cached between GCs
	Reported by Matt Cross <mcross@irobot.com>

2003-12-03  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (STAT-VFS): interface to (f)statvfs(2)
	* modules/syscalls/posix.lisp (STAT-VFS): export the structure

2003-12-01  Sam Steingold  <sds@gnu.org>

	* makemake.in (distrib) [win32]: depend on clisp.man and
	clisp.html instead of repeating the rules for them
	* _distmakefile (uninstall): new target

2003-11-17  Sam Steingold  <sds@gnu.org>

	new module for interface to Berkley DB
	<http://www.sleepycat.com/docs/api_c/dbt_class.html>
	* modules/berkeley-db: new directory

2003-11-14  Sam Steingold  <sds@gnu.org>

	* io.d (FORMAT-TABULATE): do not lose the top empty string

2003-11-07  John Tang Boyland  <boyland@users.sf.net>
	    Sam Steingold  <sds@gnu.org>

	fixed bug [ 831387 ]: ~<...~:> format directive not implemented
	for compiled code (using FORMATTER)
	* format.lisp (format-parse-cs): ~:> ==> FORMAT-LOGICAL-BLOCK
	(format-logical-block): added a stub
	(format-logical-block-parse, formatter-bind-block-1)
	(formatter-whole-args*): new functions
	(formatter-bind-block): new macro
	(formatter-main-1): handle FORMAT-LOGICAL-BLOCK
	(formatter-main-1): fixed FORMAT-PPRINT-INDENT

2003-11-05  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c (FILE-STAT): compilation fix
	(copy_file_low): pass no_block=false to read_helper()
	(copy_one_file): fixed :SYMLINK/:HARDLINK

2003-11-04  Sam Steingold  <sds@gnu.org>

	* spvw_memfile.d: do not shadow local variables
	* encoding.d (java_wcstombs): do not shadow hex_table
	* foreign.d: do not shadow global index(3) and many local variables

2003-11-04  Bruno Haible  <bruno@clisp.org>

	* arilev1i.d: Use ANSI C prototypes.

2003-11-04  Sam Steingold  <sds@gnu.org>

	* makemake.in: uniform --with* processing (still different from
	autoconf scripts, see the comment in the code)

2003-10-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (CHART_STRUCT): Don't define when using g++ 3.3.x.

2003-10-27  Bruno Haible  <bruno@clisp.org>

	* stdbool.h.in: Better support for BeOS.

2003-10-26  Bruno Haible  <bruno@clisp.org>

	* time.d (SYS::DELTA4): Avoid gcc warning.

2003-10-26  Bruno Haible  <bruno@clisp.org>

	* utils/ansidecl.d: Remove file.
	* makemake.in: Remove all uses of ansidecl and ANSIDECL.

2003-10-26  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Drop &!.
	* spvw.d: Drop &!.
	* spvw_module.d (module_names_to_stack): Use 'global'.
	* spvw_alloca.d: Use ANSI C prototypes.
	* spvw_mmap.d: Use ANSI C prototypes.
	* spvw_multimap.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_global.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_gcstat.d: Whitespace changes.
	* spvw_update.d: Indentation & braces.
	* spvw_fault.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_sigcld.d: Use ANSI C prototypes.
	* spvw_sigwinch.d: Drop &!.
	* spvw_garcol.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_genera1.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_allocate.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_circ.d: Use ANSI C prototypes. Indentation & braces.
	* spvw_memfile.d: Indentation & braces.
	* sort.d: Use ANSI C prototypes. Indentation & braces.
	* eval.d: ANSI C prototypes. Drop &!. Indentation & braces.
	* control.d: Drop &!.
	* pathname.d: Whitespace changes.
	* stream.d: Use ANSI C prototypes. Indentation & braces.
	* socket.d: Drop &!.
	* io.d: Whitespace changes.
	* array.d: Whitespace changes.
	* hashtabl.d: Whitespace changes.
	* package.d: Whitespace changes.
	* sequence.d: Use ANSI C prototypes. Indentation & braces.
	* charstrg.d: Whitespace changes.
	* debug.d: Use ANSI C prototypes. Drop &!. Indentation & braces.
	* errunix.d: Use ANSI C prototypes.
	* errwin32.d: Use ANSI C prototypes.
	* misc.d: Drop &!.
	* time.d: Whitespace changes.
	* predtype.d: Whitespace changes.
	* intplus.d: Use ANSI C prototypes.
	* intcomp.d: Use ANSI C prototypes.
	* intbyte.d: Use ANSI C prototypes.
	* intmal.d: Use ANSI C prototypes.
	* intdiv.d: Use ANSI C prototypes.
	* intgcd.d: Use ANSI C prototypes. Indentation & braces.
	* int2adic.d: Use ANSI C prototypes.
	* intsqrt.d: Use ANSI C prototypes.
	* intprint.d: Use ANSI C prototypes.
	* intread.d: Use ANSI C prototypes.
	* rational.d: Use ANSI C prototypes. Indentation & braces.
	* sfloat.d: Use ANSI C prototypes.
	* ffloat.d: Use ANSI C prototypes.
	* flo_konv.d: Use ANSI C prototypes.
	* flo_rest.d: Nop.
	* realelem.d: Nop.
	* realrand.d: Use ANSI C prototypes.
	* realtran.d: Use ANSI C prototypes. Indentation & braces.
	* compelem.d: Use ANSI C prototypes. Indentation & braces.
	* comptran.d: Use ANSI C prototypes. Indentation & braces.
	* foreign.d: Drop &!.
	* unixaux.d: Use ANSI C prototypes.

2003-10-26  Bruno Haible  <bruno@clisp.org>

	Make DEBUG_GCSAFETY work with generational GC.
	* spvw_heap.d (old_new_pointer_t): Change type of field 'o' to
	gcv_object_t.

2003-10-27  Bruno Haible  <bruno@clisp.org>

	Make DEBUG_GCSAFETY work with g++ 3.3.x.
	* utils/varbrace.d (SPLIT_OBJECT_INITIALIZATIONS): New macro.
	(next_token): Split 'object' and 'chart' initializations inside macro
	definitions.
	(convert): Split 'object' and 'chart' initializations outside macro
	definitions.
	* lispbibl.d (INIT_SUBR_TAB, INIT_SYMBOL_TAB, INIT_OBJECT_TAB): Don't
	define when using g++ 3.3 with DEBUG_GCSAFETY.
	* intmal.d (FN_fak_I): Convert fakul_table to a table of uintL.

2003-10-25  Bruno Haible  <bruno@clisp.org>

	Followup to 2003-08-28 patch.
	* subr.d (LISPFUN_D): Pass additional argument to subr_argtype().

2003-10-25  Bruno Haible  <bruno@clisp.org>

	Portability to Solaris cc. Don't assume more than ANSI C.
	* lispbibl.d (with_saved_back_trace): Use ANSI C syntax for
	initializing a 'struct backtrace_t' on the stack.
	* spvw.d (main): Likewise.
	* debug.d (driver, break_driver): Likewise.

2003-10-25  Bruno Haible  <bruno@clisp.org>

	Restore the behaviour of "make init" and "make allc".
	* makemake.in (init): Don't depend on modprep.fas.
	(clean3): Clean modprep.fas here...
	(clean5): ... not here.

2003-10-24  Bruno Haible  <bruno@clisp.org>

	* spvw_debug.d (nobject_out1): Make it compile when TYPECODES are used.

2003-10-24  Bruno Haible  <bruno@clisp.org>

	* stdbool.h.in: Update from gnulib.
	2003-08-11  Bruno Haible  <bruno@clisp.org>
		* stdbool_.h (_Bool): Undo last change; instead use a negative
		enum value to ensure that _Bool promotes to int. Use #define
		for _Bool when using the Solaris C compiler. Adds comments
		suggested by Paul Eggert.
	2003-08-03  Paul Eggert  <eggert@twinsun.com>
		* stdbool_.h (_Bool): Make it signed char, instead of
		an enum type, so that it's guaranteed to promote to int.  See:
		<http://mail.gnu.org/archive/html/bug-gnulib/2003-07/msg00124.html>

2003-10-23  Bruno Haible  <bruno@clisp.org>

	BeOS portability.
	* configure: Gracefully recover if "ulimit -s" does not work. (On BeOS
	this command returns an empty string and exits with return code 2.)
	* stream.d (sock_opt_bool, sock_opt_int, sock_opt_time): Enclose in
	#ifdef. Avoids link error due to missing getsockopt() on BeOS.
	(SOCKET-OPTIONS): Enclose each comparison in #ifdef.

2003-10-22  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 826792 ]: unbound WITH-DIR-KEY-OPEN params
	* install.lisp: use-package "LDAP"

2003-10-22  Christophe Rhodes  <csr21@cam.ac.uk>
	    Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (ds-make-defsetfs): put DEFSTRUCT-WRITER
	property whenever we do DEFSETF (i.e., COMPILE EVAL LOAD)

2003-10-19  Sam Steingold  <sds@gnu.org>

	* w32shell.c (real-path): avoid gcc -Wall warnings

2003-10-18  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): when completing in a case-sensitive
	package, do not fold case
	* constsym.d, subr.d (package_case_sensitive_p): added
	* init.lisp (package-case-sensitive-p): export
	* package.d (package-case-sensitive-p): implemented

2003-10-16  Sam Steingold  <sds@gnu.org>

	* modules/bindings/win32/win32.lisp (MAX_PATH): new constant
	(GetModuleFileNameA, GetModuleHandleA): new functions
	(RIGHTS, PROCESS, EWX, GR_OBJECTS): new enum types
	(handle, dword): new types
	(GetCurrentProcess, GetCurrentThread, GetCurrentProcessId)
	(CloseHandle, OpenProcess, ExitWindowsEx, GetGuiResources)
	(GetConsoleTitleA, SetConsoleTitleA): new functions

2003-10-14  Sam Steingold  <sds@gnu.org>

	* stream.d (buffered_nextbyte): return -1 only when no_hang
	(listen_char_buffered): pass no_hang=true to buffered_nextbyte()
	(low_fill_buffered_handle): listen_status defaults to ls_eof

2003-10-11  Sam Steingold  <sds@gnu.org>

	* stream.d (low_fill_buffered_handle): set
	BufferedStream_have_eof_p to true when result is 0
	(buffered_nextbyte): use BufferedStream_have_eof_p instead of
	errno to determine whether the i/o is blocked
	[this is better than what was before - at least it builds on both
	unix and win32 - but I am still not sure that it DTRT]

2003-10-11  Sam Steingold  <sds@gnu.org>

	* win32aux.d, win32.d (sock_write): accept no_hang

2003-10-11  Sam Steingold  <sds@gnu.org>

	fixed a bug in READ-BYTE-SEQUENCE :NO-HANG T on unbuffered
	streams whereby the first byte is eaten and returned last
	* stream.d (UnbufferedStream_pop_all): new function
	(low_read_array_unbuffered_handle): use it after
	low_listen_unbuffered_handle() which can add to bytebuf
	Reported by Basim Al-Shaikhli <bacilo@gmx.net>
	<http://article.gmane.org/gmane.lisp.clisp.general/7619>

2003-10-11  Sam Steingold  <sds@gnu.org>

	* makemake.in (clisp.h): check that the typedef sizes in clisp.h
	and lispbibl.d are the same
	* genclisph.d: when supplied an argument, create a test file to
	check that the typedef sizes in clisp.h and lispbibl.d are the same

2003-10-10  Sam Steingold  <sds@gnu.org>

	* reploop.lisp (break-loop): bind *FASOUTPUT-STREAM* to NIL
	* compiler.lisp (c-EVAL-WHEN): bind *FASOUTPUT-STREAM* to NIL
	around evaluation of COMPILE-P FORM
	This ensures that when the compiler is called from the break loop
	or from the EVAL-WHEN/COMPILE, it does not assume that a LOAD
	will happen before the code it generates is executed.
	Reported by Don Cohen <don-sourceforge@isis.cs3-inc.com>
	<http://article.gmane.org/gmane.lisp.clisp.devel/10566>

2003-10-09  Sam Steingold  <sds@gnu.org>

	* amiga.d, amigaaux.d, win32.d, win32aux.d (full_write):
	use write_helper()
	(write_helper): accept no-hang

2003-10-09  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (const-value-safe): enforce that CONST-VALUE is
	invalid when CONST-HORIZON is :FORM
	(anode-constant-value, c-FUNCTION, traverse-anode)
	(traverse-anode): use it instead of CONST-VALUE
	(const-index, make-const-code, traverse-anode):
	keep using CONST-VALUE where appropriate!
	(in-same-function-p): remove unused function

2003-10-07  Sam Steingold  <sds@gnu.org>

	* genclisph.d (sarray_, sbvector_, sstring_): fixed (no uintL length)

2003-10-07  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (funcall1): new shortcut function
	(get_angle, SET-DISPLAY-AFTER-FUNCTION, DISPLAY-DEFAULT-SCREEN)
	(VISUAL-INFO, SET-GCONTEXT-DASHES, SET-GCONTEXT-CLIP-MASK)
	(GCONTEXT-CLIP-MASK, DRAW-POINTS, DRAW-LINES, DRAW-SEGMENTS)
	(DRAW-RECTANGLES, DRAW-ARCS, PUT-IMAGE, OPEN-FONT, FONT-PATH)
	(SET-FONT-PATH, FREE-COLORS, QUERY-COLORS, STORE-COLORS, ATOM-NAME)
	(CHANGE-PROPERTY, ROTATE-PROPERTIES, PROCESS-EVENT, EVENT-LISTEN)
	(GLOBAL-POINTER-POSITION, INPUT-FOCUS, POINTER-MAPPING)
	(QUERY-KEYMAP, SET-SCREEN-SAVER, LIST-EXTENSIONS, QUERY-EXTENSION)
	(SHAPE-VERSION, SHAPE-COMBINE, READ-FILE-TO-PIXMAP): use it;
	also, try to initialize Display when declaring it

2003-10-05  Bruno Haible  <bruno@clisp.org>

	* utils/ccmp2c.c: Reorder.

	* utils/ccmp2c.c: Use GNU coding style. Emit code in GNU coding style.
	Assume <stdlib.h> correctly declares exit().

	Enhance ccmp2c with ability to emit line numbers.
	* utils/ccmp2c.c (line_number): New variable.
	(get_line): Increment line_number.
	(emit_literal): Add argument lineno. Emit lineno as second argument
	of TEXT_addstring if the argument string represents a complete line
	from input source file. Otherwise use 0 as second argument.
	(emit_expansion): Add argument lineno.
	(main): Emit code to parse command line arguments, recognizing -l,
	-i INFILENAME, -o OUTFILENAME. Emit code to generate #line information
	if desired. Initialize line_number.
	* modules/clx/new-clx/Makefile.in (clx.e): Generate with line number
	information.
	(clx.c): Drop bogus #line 1 "clx.f".

2003-10-01  Don Cohen  <don-sourceforge@isis.cs3-inc.com>
	    Sam Steingold  <sds@gnu.org>

	WRITE-BYTE-SEQUENCE now accepts :NO-HANG keyword argument
	* genclisph.d (write_byte_array): updated the prototype
	(write_helper): replaces full_write()
	* lispbibl.d (write_byte_array): ditto
	* gray.lisp (stream-write-byte-sequence): accept :NO-HANG
	* subr.d, subrkw.d (write_byte_sequence): ditto
	* sequence.d (WRITE-BYTE-SEQUENCE): ditto [FIXME: need
	write_byte_will_hang_p()!]
	* stream.d (wr_by_array_Pseudofun, wr_by_array_*)
	(strm_unbuffered_extrafields_t/low_write_array): accept no_hang
	* unix.d (write_helper): prototype
	(full_write, safe_write): define using write_helper()
	* unixaux.d (write_helper): implemented
	(sock_write): accept no_hang
	* modules/syscalls/calls.c (copy_file_low): use write_helper()
	instead of full_write()
	* modules/bindings/glibc/linux.lisp (write-helper): new
	(write): macro calling write-helper, just like with read

2003-10-02  Bruno Haible  <bruno@clisp.org>

	* utils/comment5.c: Use '／＊' instead of '/*' inside comments,
	to avoid gcc warning “"/*" within comment”.

2003-10-02  Bruno Haible  <bruno@clisp.org>

	* utils/ansidecl.d (main): Don't miss to return an error code if the
	last write on stdout fails.
	* utils/ccmp2c.c (main): Likewise.
	* utils/comment5.c (main): Don't miss to return an error code if the
	last write to outfile fails.
	* utils/varbrace.d (main): Likewise.

2003-10-01  Bruno Haible  <bruno@clisp.org>

	Assume some more POSIX functions are properly declared.
	* m4/gethostname.m4 (CL_GETHOSTNAME): Remove prototype check.
	* m4/mprotect.m4 (CL_MPROTECT): Remove prototype check.
	* m4/readlink.m4 (CL_READLINK): Remove prototype check.
	* m4/read-write.m4: Remove file.
	* m4/shmat.m4: Remove file.
	* m4/shm-rmid.m4 (CL_SHM_RMID): Use void* instead of RETSHMATTYPE.
	* m4/shm.m4 (CL_SHM): Don't require CL_SHMAT.
	* m4/signal.m4 (CL_SIGPROCMASK): Remove macro.
	* m4/stat.m4 (CL_FSTAT, CL_STAT): Remove macros.
	(CL_LSTAT): Remove prototype check.
	* m4/termios.m4 (CL_TERM): Remove tcsetattr prototype check.
	* configure.in: Remove invocations of CL_SIGPROCMASK, CL_FSTAT,
	CL_STAT, CL_READ_WRITE, CL_WRITE.
	* unix.d: Comment out declarations of mprotect(), sigprocmask(),
	sigemptyset(), sigaddset(), readlink(), stat(), lstat(), fstat(),
	read(), write(), tcgetattr(), tcsetattr(), tcdrain(), tcflush(),
	gethostname().
	(read_helper): Use ssize_t instead of RETRWTYPE. Use void* instead
	of RW_BUF_T. Use size_t instead of RW_SIZE_T.
	(full_write): Likewise. Use const instead of WRITE_CONST.
	* amiga.d (RW_BUF_T): Remove definition. Use void* instead.
	* amigaaux.d: Use void* instead of RW_BUF_T.
	* acorn.d (RETRWTYPE): Remove definition. Use ssize_t instead.
	(RW_BUF_T): Remove definition. Use void* instead.
	(RW_SIZE_T): Remove definition. Use size_t instead.
	(WRITE_CONST): Remove definition.
	* msdos.d (RW_BUF_T): Remove definition. Use void* instead.
	(RETRWTYPE): Remove definition. Use ssize_t instead.
	(RW_SIZE_T): Remove definition. Use size_t instead.
	(WRITE_CONST): Remove definition.
	* win32.d (RW_BUF_T, GETHOSTNAME_SIZE_T, MPROTECT_CONST): Remove
	macros.
	* unixaux.d (read_helper): Use ssize_t instead of RETRWTYPE.
	Use void* instead of RW_BUF_T. Use size_t instead of RW_SIZE_T.
	(full_write): Likewise. Use const instead of WRITE_CONST.
	(sock_write): Use const instead of WRITE_CONST.
	* socket.d: Comment out declaration of gethostname().
	* spvw_memfile.d: Use void* instead of RW_BUF_T.
	* spvw_mmap.d (mprotect): Drop MPROTECT_CONST.

2003-10-01  Bruno Haible  <bruno@clisp.org>

	Improve support for large off_t and large ino_t.
	* configure.in: Check size of 'ino_t'.
	* lispbibl.d (UQ_to_I): Declare also if sizeof(ino_t) > 4.
	* intelem.d (UQ_to_I): Define also if sizeof(ino_t) > 4.
	* pathname.d (with_stat_info): Use UQ_to_I to convert st_size to a
	Lisp object if sizeof(off_t) > 4.
	(directory_search_hashcode): Use UQ_to_I to convert st_ino to a Lisp
	object if sizeof(ino_t) > 4.
	* spvw_memfile.d (loadmem_from_handle): Don't cast down st_size to
	32 bits.

2003-09-30  John Hinsdale  <hin@alma.com>

	* modules/oracle/oracle.lisp: Fix bug that leaks connections

2003-09-30  Bruno Haible  <bruno@clisp.org>

	Support for files larger than 2 GB or 4 GB on platforms with LFS.
	* configure.in: Invoke AC_SYS_LARGEFILE. Check size of 'off_t'.
	* lispbibl.d (UQ_to_I, I_to_UQ): Declare also if sizeof(off_t) > 4.
	* intelem.d (UQ_to_I, I_to_UQ): Define also if sizeof(off_t) > 4.
	(UQ_to_I): Fix to make it work when sizeof(oint) < sizeof(uint64).
	* stream.d (uoff_t): New type.
	(uoff_t_to_I, I_to_uoff_t, uoff_t_p): New macros.
	(strm_buffered_extrafields_t): Change type of buffstart and
	position to uoff_t.
	(strm_i_buffered_extrafields_t): Change type of eofposition to uoff_t.
	(handle_lseek): Change the result to off_t.
	(position_file_buffered): Change argument type to uoff_t.
	(sync_file_buffered): Use uoff_t where appropriate.
	(position_file_i_buffered): Change argument type to uoff_t.
	(logical_position_file): Likewise.
	(logical_position_file_end, make_file_stream)
	(buffered_flush_everything, finish_output_buffered):
	Use uoff_t where appropriate.
	(FILE-POSITION): Use uoff_t_to_I and I_to_uoff_t.
	(FILE-LENGTH): Use uoff_t_to_I.
	* spvw_memfile.d (memflags): Add a bit to denote whether file
	streams store a 64-bit or 32-bit file position.

2003-09-30  Bruno Haible  <bruno@clisp.org>

	* spvw_heap.d (Heap): Change type of memfile_offset to off_t.
	* spvw_memfile.d (savemem, loadmem_from_handle): Use off_t where
	appropriate.
	* spvw_fault.d (handle_mmap_fault, selfmade_mmap): Change type of
	'offset' argument to off_t.

2003-09-30  Bruno Haible  <bruno@clisp.org>

	* stream.d (SOCKET-OPTIONS): Avoid warnings from ansidecl.

2003-09-29  Sam Steingold  <sds@gnu.org>

	* foreign.d (update_library): avoid an infinite loop
	Reported by Roland Averkamp <roland.averkamp@gmx.de>

2003-09-29  Sam Steingold  <sds@gnu.org>

	* encoding.d (init_dependent_encodings): use ASCII for
	*FOREIGN-ENCODING* when argv_encoding_foreign is not 1:1
	Reported by Douglas Philips <dgou@mac.com>

2003-09-26  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 813119 ]: "Occurred in SIMPLIFY at AT-END"
	* compiler.lisp (simplify): handle empty codelist

2003-09-26  Sam Steingold  <sds@gnu.org>

	* configure.in: added AC_COPYRIGHT and AC_REVISION (sugar)
	check for --with-readline and --without-readline and run
	CL_READLINE only if readline was not disabled by the user

2003-09-25  Sam Steingold  <sds@gnu.org>

	* unix.d (NO_BLOCK_DECL): new macro
	(START_NO_BLOCK, END_NO_BLOCK): do not open/close block {}
	* stream.d (listen_handle): updated
	Suggested by Don Cohen <don-sourceforge@isis.cs3-inc.com>

2003-09-24  John Hinsdale  <hin@alma.com>

	* modules/oracle/oracle.lisp: connection retry logic
	* src/makemake.in: syntax error in variable definition

2003-09-24  Sam Steingold  <sds@gnu.org>

	readline is now used on Cygwin/X11
	* stream.d (stdio_same_tty_p): extracted from make_terminal_stream_()
	use ttyname(stdin)=ttyname(stdout) on cygwin
	(make_terminal_stream_): use it

2003-09-23  Sam Steingold  <sds@gnu.org>

	* init.lisp (load) [:COMPILING]: bind *ERROR-COUNT* *WARNING-COUNT*
	*STYLE-WARNING-COUNT* like in WITH-COMPILATION-UNIT
	* compiler.lisp (match-known-unknown-functions): do not try to
	print source location when it is not available

2003-09-22  Sam Steingold  <sds@gnu.org>

	* unix.d (SHUT_RD, SHUT_WR, SHUT_RDWR): define when not defined
	* makemake.in (encflags) [!UNICODE]: void
	* utils/modprep.lisp (modprep) [!UNICODE]: no :external-format
	Reported by Don Cohen <don-sourceforge@isis.cs3-inc.com>

2003-09-19  Sam Steingold  <sds@gnu.org>

	* unix.d (START_NO_BLOCK, END_NO_BLOCK): new macros
	* stream.d (listen_handle): use them

2003-09-17  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (f-side-effect): NOTINLINE ==> seclass (t . t)
	* clos.lisp (%make-gf): seclass is (t . t) because a generic
	function can always signal a NO-APPLICABLE-METHOD error
	(std-add-method, std-remove-method): since seclass is (t . t),
	disable the CLOSURE-SET-SECLASS call

2003-09-17  Sam Steingold  <sds@gnu.org>

	* makemake.in: respect LDFLAGS
	Mac OS X (Darwin) is a BINARY_DISTRIB system

2003-09-16  Sam Steingold  <sds@gnu.org>

	* genclisph.d (string_to_asciz, TheAsciz): enabled
	for Dan Stanger's gdi module

2003-09-15  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (grab_to_object): new function
	(GRAB-POINTER, GRAB-KEYBOARD): use it
	(xlib_error_handler): ise ELT for sequences, not AREF
	include <string.h> to avoid some warnings

2003-09-15  Sam Steingold  <sds@gnu.org>

	* stream.d (SOCKET-OPTIONS): old systems might not have
	SO_RCVLOWAT, SO_SNDLOWAT, SO_RCVTIMEO, SO_SNDTIMEO

2003-09-13  Sam Steingold  <sds@gnu.org>

	* makemake.in (setup.hint, cygwin.README) [cygwin]: new targets

2003-09-13  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fix msvc distrib
	* makemake.in: don't incude rules unexecutable by msvc nmake
	(makemake, unixconf.h, Makefile, config.status, VERSION)
	Don't create base and full directories for msvc distrib
	Call it differently (clisp-x.xx-msvc-win32.zip)
	Use find -exec for chmod to avoid problems in cygwin
	Call rm -rf directly (RMRF=-del, inappropriate)

2003-09-12  Sam Steingold  <sds@gnu.org>

	* version.h: reinstated for the sake of non-autoconf platforms

2003-09-11  Sam Steingold  <sds@gnu.org>

	* modules/bindings/glibc/linux.lisp (scalb, scalbf): commented out
	because they do not compile on either RedHat or Debian

2003-09-10  Sam Steingold  <sds@gnu.org>

	* debug.d (print_back_trace): do not confuse backtrace with prompts

2003-09-09  Sam Steingold  <sds@gnu.org>

	* genclisph.d (constobj): include at compile time (like subr &
	constsym), not at "run time" (clisp.h does not include constobj)
	Reported by Fred Cohen <fc@all.net>

2003-09-09  Bruno Haible  <bruno@clisp.org>

	* unix.d (nonintr_open): Add const to first argument.
	* unixaux.d (nonintr_open): Likewise.

2003-09-05  Sam Steingold  <sds@gnu.org>

	* makemake.in (distrib) [cygwin]: create cygwin package

2003-09-05  Wolfgang Jenkner  <wjenkner@inode.at>
	    Sam Steingold  <sds@gnu.org>

	* m4/address.m4, m4/closedir.m4, m4/filecharset.m4, m4/ioctl.m4:
	* m4/mprotect.m4, m4/shm-rmid.m4, m4/shm.m4, m4/shmat.m4:
	eliminated prototypes for better portability

2003-09-04  Sam Steingold  <sds@gnu.org>

	* spvw.d: do not include version.h
	(usage, main/--version, version_string/AMIGA):
	use PACKAGE_NAME & PACKAGE_BUGREPORT
	* misc.d (LISP-IMPLEMENTATION-VERSION): use
	O(lisp_implementation_package_version) instead of
	O(lisp_implementation_version_number_string) and
	O(lisp_implementation_version_date_string)
	* makemake.in: removed version.h
	* constobj.d (lisp_implementation_package_version):
	init to PACKAGE_VERSION
	(lisp_implementation_version_date_string)
	(lisp_implementation_version_number_string): removed
	* configure.in (AC_INIT): the master version is now here,
	not in version.h
	* version.h: removed
	* FILES.1: updated
	* Makefile.devel (src/VERSION): depend on configure, not version.h

2003-09-04  Sam Steingold  <sds@gnu.org>

	* describe.lisp (describe-object) [SOCKETS]: handle SOCKET-SERVER
	Reported by John K. Hinsdale <hin@alma.com>
	* genclisph.d (Atype_32Bit): export for gdi (Dan Stanger)

2003-09-03  Sam Steingold  <sds@gnu.org>

	* makemake.in (distrib) [win32]: distribute both base and full
	(uninstall): RMRF lispdocdir & lisplibdir
	(linkkit): added exporting.lisp & modprep.lisp

2003-09-02  Sam Steingold  <sds@gnu.org>

	* version.h: 2.31 is released

2003-09-02  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (init_launch_streamarg, make_launch_pipe):
	now defined on UNIX || RISCOS || WIN32_NATIVE.
	(interpret_launch_priority): new local helper function.
	(LAUNCH): UNIX and Windows versions merged.
	* constobj.d (type_priority): now keyword or fixnum.
	* constsym.d: define LAUNCH keywords on systems where it builds.

2003-09-01  Sam Steingold  <sds@gnu.org>

	* error.d (check_fpointer) [FOREIGN]: moved here from foreign.d
	* foreign.d (check_fpointer): moved to error.d
	* lispbibl.d (check_fpointer) [FOREIGN]: prototype
	* genclisph.d (check_fpointer): conditionalize on FOREIGN
	* modules/regexp/regexi.c [!FOREIGN]: error (FOREIGN is required)
	Reported by Douglas Philips <dgou@mac.com>

2003-08-31  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* lispbibl.d (INVALID_HANDLE_VALUE) [!WIN32_NATIVE]: new macro.
	(HNULLP):new macro.
	* pathname.d (handle_dup): use new macros.
	(init_launch_streamarg, make_launch_pipe) [UNIX || RISCOS]:
	new helper functions.
	(LAUNCH) [UNIX || RISCOS]: use all of it, don't do HANDLE=NULL
	according to Sam's suggestion.

2003-08-30  John Hinsdale  <hin@alma.com>

	* intelem.d: Fix bug #726433: Floating point numbers
	printed incorrectly - gcc -O/-g bug?

2003-08-30  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* stream.d (wr_ch_window) [WIN32_NATIVE]: explicit typecast.
	(stream_lend_handle): allow pipe-streams.

2003-08-29  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/posix.lisp (make-file-stat):
	fixed the typo in the signature
	* modules/syscalls/configure.in: check for <shlobj.h>
	* modules/syscalls/link.sh.in (NEW_LIBS): add win32-specific
	libraries only when needed
	Reported by Douglas Philips <dgou@mac.com>

2003-08-29  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* subr.d, subrkw.d (LAUNCH): added kw arguments element-type,
	external-format, buffered.
	* constsym.d (PIPE): new keyword. LAUNCH keywords moved out of
	HAVE_SHELL.
	* stream.d (mkops_from_handles, mkips_from_handles): new global
	functions to make pipe-streams.
	* pathname.d (mkpipe): new local functions.
	(LAUNCH) [WIN32_NATIVE, UNIX || RISCOS]: use new functions to
	create pipe - streams.

2003-08-28  Sam Steingold  <sds@gnu.org>

	* spvw.d (subr_argtype): accept additional argument for better
	error reporting
	(init_subr_tab_1): when initializing modules, pass subr_initdata
	to subr_argtype()
	still no error reporting for FSUBRs and main CLISP SUBRs because
	we cannot print symbols before encodings have been initialized.

2003-08-28  Sam Steingold  <sds@gnu.org>

	* time.d (get_run_time) [TIME_UNIX]: when HZ is not defined, use
	CLK_TCK or CLOCKS_PER_SECOND.
	Reported by Prut Flut <prutflut@m-net.arbornet.org> (NetBSD)

2003-08-27  Sam Steingold  <sds@gnu.org>

	* utils/modprep.lisp: merged in signature emulation from e2d.c
	* Makefile.devel (CONFIG_H_IN): added clx/new-clx/config.h.in
	* modules/clx/new-clx/config.h.in: new file
	* modules/clx/new-clx/Makefile.in: use modprep instead of e2d.c
	* modules/clx/new-clx/e2d.c: removed
	* modules/clx/new-clx/configure.in: check for XGetAtomNames()
	* modules/clx/new-clx/clx.f: converted to standard C and modprep.lisp
	* genclisph.d: export much stuff necessary for new-clx
	* spvw_sigpipe.d (disable_sigpipe): new function for new-clx

2003-08-27  John Hinsdale <hin@alma.com>
	* modules/oracle/README, oracle.lisp - More documentation

2003-08-26  Sam Steingold  <sds@gnu.org>

	* control.d (MACROLET): fixed a GC-safety bug
	* condition.lisp (define-condition): return name, as per ANSI

2003-08-26  Sam Steingold  <sds@gnu.org>

	* makemake.in (modular): do not depend on exporting, modprep, clisp.h
	(anymodule): depend on exporting, modprep, clisp.h

2003-08-25  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* utils/comment5.c (main): handle '# ' in traditional comments.
	* makemake.in : do not treat pathname.d specially.

2003-08-23  Sam Steingold  <sds@gnu.org>

	* makemake.in (MODULESDIR, MODULESDIR_, MODULESDIR_M): new vars
	(exporting.fas): depend on ${MODULESDIR_M}exporting.lisp, not the link
	(modular): depend on clisp.h
	* configure: do not link plain files in modules (exporting will
	picked up from here); link modules/* directories even when
	building without FFI because many modules (regexp, syscalls,
	dirkey, clx/new-clx) do not require FFI

2003-08-22  Sam Steingold  <sds@gnu.org>

	* init.lisp (defun): reverted the 2003-08-12 patch: cannot parse
	the signature at macroexpand time, FUNCTION should see it first
	for proper error reporting

2003-08-21  Sam Steingold  <sds@gnu.org>

	* utils/modprep.c: rewrote in lisp
	* modules/regexp/regexi.c (REGEXP-COMPILE): pass a subr instead
	of a symbol to FINALIZE (supported by modprep.lisp)

2003-08-20  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (create-fun-obj, c-LOAD-TIME-VALUE): use
	*fasoutput-stream* instead of *compiling-from-file* to check
	whether the constant will be read before being evaluated
	- necessary for the recent COMPILE-FORM-IN-TOPLEVEL-ENVIRONMENT change
	Reported by Douglas Philips <dgou@mac.com>
	<http://article.gmane.org/gmane.lisp.clisp.general/7393>

2003-08-18  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (set-logical-pathname-translations): missing slots
	default to :WILD, as per ANSI CL
	* pathname.d (MAKE-LOGICAL-PATHNAME): upcase host
	(host_match, nametype_match_aux, subdir_match, version_match)
	(version_diff, translate_subdir, translate_version):
	merge identical LOGICAL and PHYSICAL code
	(translate_nametype_aux): do not replace NIL with ""

2003-08-17  Sam Steingold  <sds@gnu.org>

	* makemake.in (XCFLAGS) [darwin]: removed `--traditional-cpp'
	Reported by Douglas Philips <dgou@mac.com>
	<http://article.gmane.org/gmane.lisp.clisp.devel/10282>

2003-08-15  Sam Steingold  <sds@gnu.org>

	MATCH structure is now printable readably
	* modules/regexp/regexi.c (REGEXP-EXEC): use MAKE-MATCH-BOA
	* modules/regexp/regexp.lisp (match): define a keyword
	constructor too

2003-08-15  Sam Steingold  <sds@gnu.org>

	* modules/netica/wrap.lisp (make-node): specify placement
	(node-info): show parents and children
	(with-open-dne-file): new macro
	(read-net): new function
	* modules/netica/netica.lisp (GetNodeExpectedValue_bn)
	(GetNodeVisPosition_bn): fixed declarations
	* modules/netica/demo.lisp: specify placement

2003-08-15  Sam Steingold  <sds@gnu.org>

	* io.d (pr_orecord): print logical pathnames as namestrings (when
	printing un-readably and ANSI "host:path" is enabled)

2003-08-14  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (analyze1): match lambda-list to argument strictly

2003-08-14  Sam Steingold  <sds@gnu.org>

	ANSI compliance: macro definitions respects the lexical environment
	* defmacro.lisp (make-macro-expander): accept the second argument
	- the current lexical environment
	* compiler.lisp (insert-combined-LAPs): avoid ANSI-"undefined" code
	* control.d (aktenv_to_stack): new function, extracted from ...
	(compile_eval_form): call aktenv_to_stack()
	(MACROLET): pass aktev as the second argument to MAKE-MACRO-EXPANDER

2003-08-14  Sam Steingold  <sds@gnu.org>

	* modules/netica/wrap.lisp (adjust-number-of-states): new function
	(GetNodeLevels): new wrapper
	(error-message, node-info): use ENUM-FROM-VALUE
	(net-info): call GetNetNodes and print all nodes
	(make-node): allow setting levels and creating continuous nodes
	(save-net): call TRANSLATE-LOGICAL-PATHNAME before NAMESTRING
	* modules/netica/demo.lisp: call net-info
	* modules/netica/netica.lisp: fixed some declarations

2003-08-13  Sam Steingold  <sds@gnu.org>

	You can now map between numeric and symbolic C enum values using
	functions FFI:ENUM-FROM-VALUE and FFI:ENUM-TO-VALUE
	* foreign1.lisp (enum-from-value, enum-to-value): new functions
	(def-c-enum): save the value -> constant name map in a hash-table

2003-08-13  Sam Steingold  <sds@gnu.org>

	do FUNCTION-CODES lookup at load time: a change in FUNCTION-CODES
	means a change in FUNTAB, i.e., all FAS recompilation anyway
	* compiler.lisp (CALLS-code-fun): new macro
	(c-FNODE-FUNCTION, c-FUNCTION, insert-combined-LAPs): use it

2003-08-13  Bruno Haible  <bruno@clisp.org>

	* arilev1e.d (and_test_loop_up, test_loop_up): Change return type from
	'bool' to 'int', for compatibility with the existing assembly code.
	* arilev1c.d (and_test_loop_up, test_loop_up): Likewise.
	* arilev1i.d (and_test_loop_up, test_loop_up): Likewise.
	Reported by Russ Ross <rgr22@cl.cam.ac.uk>.

2003-08-12  Sam Steingold  <sds@gnu.org>

	* modules/dirkey/dirkey.c, modules/syscalls/calls.c:
	* modules/regexp/regexi.c (misc_encoding, pathname_encoding):
	use GLO to pick the user changes to *MISC-ENCODING*
	and *PATHNAME-ENCODING* at run time
	* genclisph.d (object_tab): enabled

2003-08-12  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-write-lib): do not write constants; unwrap PROGN
	* init.lisp (LAMBDA-LIST-TO-SIGNATURE) [!COMPILER]: dummy definition
	(defun): call LAMBDA-LIST-TO-SIGNATURE at macroexpand time
	(%expand-macro): new function
	(%expand-form): use it

2003-08-11  Sam Steingold  <sds@gnu.org>

	* modules/netica/wrap.lisp (*license*): new variable
	(start-netica): license is a keyword parameter
	(*features*): push :netica

2003-08-11  Sam Steingold  <sds@gnu.org>

	* calls.c (STREAM-LOCK): added begin_system_call()/end_system_call()

2003-08-10  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (nullfile): new local function.
	(LAUNCH): take NIL stream as /dev/nul.

2003-08-07  John Hinsdale <hin@alma.com>
	* oracle.lisp, fastcgi.lisp, fastcgi.h, linux.lisp
	Take "C" prototypes from standard headers, not FFI

2003-08-07  Sam Steingold  <sds@gnu.org>

	LOAD :COMPILING T: handle errors just like with COMPILE-FILE
	* init.lisp (load): bind compiler::*c-error-output*;
	when *load-compiling*, call compiler::c-reset-globals before loading
	and compiler::c-report-problems after loading
	* compiler.lisp (compile-lambda-helper): extracted from compile-lambda
	(compile-lambda, compile-form-in-toplevel-environment): call it

2003-08-07  Sam Steingold  <sds@gnu.org>

	track the current source file consistently
	* init.lisp (*current-source-file*): new variable
	(load): bind it
	(check-redefinition): use it instead of a complicated combination
	of *load-truename* & *compile-file-truename*
	* compiler.lisp (compile-file): bind it

2003-08-07  Sam Steingold  <sds@gnu.org>

	* foreign.d (FOREIGN-FREE): make the freed function invalid

2003-08-07  Sam Steingold  <sds@gnu.org>

	properly update pointers to dynamic objects
	* foreign.d (object_handle): extracted from object address()
	(foreign_libraries): keep the objects imported from the library
	(update_library, push_foreign_object): new functions
	(FOREIGN-LIBRARY, validate_fpointer): call update_library()
	(FOREIGN-LIBRARY-VARIABLE, FOREIGN-LIBRARY-FUNCTION):
	call push_foreign_object()

2003-08-07  Sam Steingold  <sds@gnu.org>

	regexp module does not use FFI - 25% speedup
	* modules/regexp/preload.lisp: new file
	* modules/regexp/link.sh.in: preload it, don't look for regexp.c
	* modules/regexp/regexp.lisp: removed FFI forms
	* modules/regexp/regexi.c (REGEXP-COMPILE, REGEXP-EXEC)
	(REGEXP-FREE): implemented here
	* foreign.d (check_fpointer): replaces fehler_fpointer_invalid()
	* genclisph.d (posfixnum, negfixnum, sfixnum, fp_validp)
	(check_fpointer): export

2003-08-06  Sam Steingold  <sds@gnu.org>

	added a bindings/win32 module with a couple of rudimentary functions

2003-08-06  Sam Steingold  <sds@gnu.org>

	* configure: link all modules/* files, not just directories
	* modules/exporting.lisp: new files, abstracted from linux.lisp
	* makemake.in: compile exporting.lisp
	* modules/bindings/glibc/linux.lisp, modules/netica/netica.lisp:
	* modules/postgresql/postgresql.lisp: load exporting.lisp

2003-08-06  Sam Steingold  <sds@gnu.org>

	removed obsolete module linuxlibc5 and renamed linuxlibc6 to glibc

2003-08-06  Sam Steingold  <sds@gnu.org>

	Unified modules postgresql632 and postgresql642 into postgresql
	* Makefile.devel: use implicit rules for configure and config.h.in
	(CONFIGURES, CONFIG_H_IN): added postgresql

2003-08-06  Sam Steingold  <sds@gnu.org>

	the demo now works just fine
	* modules/netica/demo.lisp: use DEFPARAMETER
	* modules/netica/wrap.lisp (null-pointer): removed (use NIL instead)
	(check-errors): use CERROR
	(make-net): set comment and title
	(net-info, node-info): new functions
	(make-node): fixed the SetNodeProbs_bn call
	(make-node-wrapper): new build-time macro
	(GetNodeBeliefs, GetNodeExpectedUtils, GetNodeLikelihood)
	(GetNodeProbs): new low-level wrappers defined with it
	(save-net): fixed file type merging
	* modules/netica/netica.lisp (MAX_PARENT, MAX_STATE): removed
	(GetNodeBeliefs_bn, GetNodeExpectedUtils_bn, SetNodeProbs_bn)
	(GetNodeLevels_bn, GetNodeProbs_bn): fixed declarations

2003-08-06  Sam Steingold  <sds@gnu.org>

	* modules/regexp/regexi.c (mregexec): new function
	* modules/regexp/regexp.lisp (num-matches, regexec): removed
	(mregexec): replaces regexec
	(regexp-exec): return an arbitrary number of matches, not limited
	by num-matches

2003-08-05  Sam Steingold  <sds@gnu.org>

	* foreign.d (convert_from_foreign): treat NULL as NIL
	(convert_to_foreign): treat NIL as NULL
	* foreign1.lisp (foreign-address-null): removed
	* deprecated.lisp (deprecate): export from the home package
	(foreign-address-null): deprecated

2003-08-05  Sam Steingold  <sds@gnu.org>

	* misc.d (MODULE-INFO): argument `O' returns a copy of
	O(foreign_libraries)
	(environ) [!HAVE_DECL_ENVIRON]: declare
	* m4/putenv.m4 (CL_PUTENV): check for environ

2003-08-05  Sam Steingold  <sds@gnu.org>

	* foreign1.lisp (DEF-C-VAR, DEF-CALL-OUT): do not call NOTE-C-VAR
	and NOTE-C-FUN for dynamic objects

2003-08-04  Sam Steingold  <sds@gnu.org>

	extended dynamic object loading from AMIGAOS to WIN32_NATIVE & POSIX
	* m4/dynload.m4 (CL_DYNLOAD): use AC_SEARCH_LIBS
	* constobj.d (foreign_libraries): define
	* constsym.d, subr.d (foreign_library, foreign_library_variable)
	(foreign_library_function): added
	* foreign.d (FOREIGN-LIBRARY, FOREIGN-LIBRARY-VARIABLE):
	(FOREIGN-LIBRARY-FUNCTION): extended to win32 & posix
	* foreign1.lisp (def-c-var, def-call-out): added :LIBRARY option
	* makemake.in (LIBDL): absorbed into LIBS
	* unix.d (dlopen, dlsym, dlclose, dlerror): removed prototypes

2003-08-02  Wolfgang Jenkner <wjenkner@inode.at>
	    Sam Steingold  <sds@gnu.org>

	* condition.lisp (assert): fixed bug a whereby two adjacent
	ASSERTs would redefine ASSERT-RESTART-PROMPT and thus use the
	same closure when in fact they are prompting for different places

2003-08-02  Sam Steingold  <sds@gnu.org>

	use system-wide regex implementation when it is available
	* modules/regexp/regexi.c: include <regex.h>, not "regex.h"
	* modules/regexp/link.sh.in: renamed from link.sh
	* modules/regexp/configure.in: AC_SUBST REGEX_O&REGEX_H
	* modules/regexp/Makefile.in: use REGEX_O&REGEX_H

2003-08-02  Sam Steingold  <sds@gnu.org>

	* modules/wildcard/wildcard.lisp: #include <fnmatch.h>
	* modules/regexp/regexp.lisp (*output-c-functions*)
	(*output-c-variables*): set to T

2003-08-02  Sam Steingold  <sds@gnu.org>

	* unixconf.h.in: generated by autoheader now
	* c++-bool.m4, cc-char-unsigned.m4, cc-elif.m4, cc-error.m4:
	* cc-mergestrings.m4, chdir.m4, chmod.m4, endian.m4, execl.m4:
	* execv.m4, fcntl.m4, fsync.m4, ftime.m4, getenv.m4, getpwnam.m4:
	* getpwuid.m4, localtime.m4, memset.m4, mkdir.m4, opendir.m4:
	* rename.m4, rmdir.m4, setitimer.m4, setlocale.m4, strerror.m4:
	* strlen.m4, structtm.m4, sys_errlist.m4, ualarm.m4, unistd.m4:
	* unlink.m4, usleep.m4, vfork.m4: removed files that only define
	*_CONST or something similar
	* unix.d: removed some duplicate prototypes

2003-08-02  John Hinsdale <hin@alma.com>

	* modules/oracle/orafns.c, oracle.lisp, oiface.h:
	support access to Oracle's BLOB/CLOB data types

2003-08-01  Sam Steingold  <sds@gnu.org>

	new module for interface to netica <http://norsys.com/netica_c_api.htm>
	* modules/netica: new directory

2003-08-01  Sam Steingold  <sds@gnu.org>

	* calls.c (FILE-LOCK): ported to win32;
	use fcntl(2) instead of flock(2) on UNIX;
	allow locking section of the file

2003-08-01  Stefan Kain  <stefan.kain@freenet.de>

	* realelem.d: translated all comments

2003-07-31  Sam Steingold  <sds@gnu.org>

	* stream.d (open_file_stream_handle): use ChannelStream_ihandle()
	* genclisph.d (OS_filestream_error): export

2003-07-31  Sam Steingold  <sds@gnu.org>

	these days *.h files contain good prototypes - do not duplicate them
	* foreign1.lisp (*output-c-functions*, *output-c-variables*):
	new variables, default to NIL
	(finalize-coutput-file): do not write *FUNCTION-LIST* (resp.
	*VARIABLE-LIST*) to *COUTPUT-STREAM* when
	*OUTPUT-C-FUNCTIONS* (resp. *OUTPUT-C-VARIABLES*) is NIL

2003-07-31  Sam Steingold  <sds@gnu.org>

	* misc.d (GETENV, clisp_setenv): use `environ', not win32-specific
	API, but declare `environ' outside the function scope for mingw/g++

2003-07-30  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c: all *-INTERNAL functions
	call structure BOA constructors (thus they are not INTERNAL)
	* modules/syscalls/posix.lisp: all structures have BOA
	constructors, removed the wrappers

2003-07-30  Sam Steingold  <sds@gnu.org>

	* genclisph.d (charp): enabled
	* modules/syscalls/calls.c (FILE-INFO, MAKE-SHORTCUT)
	(SHORTCUT-INFO) [WIN32_NATIVE, UNIX_CYGWIN32]: new functions
	* modules/syscalls/posix.lisp (file-info, shortcut-info)
	[WIN32_NATIVE, UNIX_CYGWIN32]: new structures
	* install.bat: run the full linking set
	* install.lisp: create a shortcut

2003-07-29  Sam Steingold  <sds@gnu.org>

	* genclisph.d (to_time_t_) [UNIX_CYGWIN32]: export
	* modules/dirkey/dirkey.c (to_time_t_) [UNIX_CYGWIN32]: moved to...
	* unixaux.d (to_time_t_) [UNIX_CYGWIN32]: here

2003-07-29  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): when non-interactive, guard LOAD for "-i" with
	SYS::BATCHMODE-ERRORS to avoid infinite loop on error

2003-07-28  Sam Steingold  <sds@gnu.org>

	pushSTACK(listof()) and STACK_1=listof() are illegal because
	listof() (and vectorof() &c) modify the STACK,
	so the whole expression becomes undefined!
	* control.d (SET): avoid undefined expressions
	* array.d (test_displaced, ADJUST-ARRAY): ditto
	* eval.d (interpret_bytecode_): ditto
	* pathname.d (directory_search_scandir): ditto
	* socket.d (SOCKET-SERVICE-PORT): ditto

2003-07-28  Stefan Kain  <stefan.kain@freenet.de>

	* flo_rest.d: translated all comments

2003-07-28  Sam Steingold  <sds@gnu.org>

	* pathname.d (directory_search) [WIN32_NATIVE]: save some consing
	(directory_search_scandir) [WIN32_NATIVE]: fixed a GC-safety bug:
	use O(lnk_string) instead of allocating a new string each time
	* constobj.d (lnk_string) [WIN32_NATIVE]: new string

2003-07-28  Sam Steingold  <sds@gnu.org>

	* misc.d (clisp_setenv) [WIN32_NATIVE]: use SetEnvironmentVariable()
	(GETENV) [WIN32_NATIVE]: use GetEnvironmentStrings() and
	FreeEnvironmentStrings() instead of the fictitious `environ' global
	(push_envar): new function, extracted from GETENV

2003-07-28  Sam Steingold  <sds@gnu.org>

	* encoding.d, stream.d, socket.d, misc.d, win32aux.d:
	fixed g++/mingw compilation

2003-07-27  Sam Steingold  <sds@gnu.org>

	* genclisph.d, encoding.d (cstombs_f, cslen_f) [!UNICODE]: macros
	* modules/dirkey/dirkey.c: undef UNICODE before including clisp.h;
	no need for *_encoding without CLISP_UNICODE
	* modules/syscalls/calls.c: define WINVER before including clisp.h;
	no need for *_encoding without CLISP_UNICODE

2003-07-27  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/configure.in: check for signgam
	* modules/syscalls/calls.c (LGAMMA): use the check

2003-07-26  Sam Steingold  <sds@gnu.org>

	* modules/syscalls/calls.c, pathname.d (hardlink_file, symlink_file):
	moved from pathname.d to calls.c
	* genclisph.d (Symbol_name, builtin_stream_p): enabled
	fixed the HANDLE problems

2003-07-26  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (CONFIGURES): added config.h.in in wildcard,
	regexp, dirkey and syscall, use autoheader to generate them
	* m4/cc-void.m4 (RL_VOID): fixed the AC_DEFINE call

2003-07-25  Sam Steingold  <sds@gnu.org>

	Converted syscall to a module
	* Makefile.devel (CONFIGURES): added syscalls
	* configure, makemake.in (--with-dir-key): removed option
	* modules/syscalls: new directory
	* genclisph.d: added some stuff to support syscalls
	* constobj.d, constpack.d, constsym.d, pathname.d, socket.d:
	* spvw.d, stream.d, subr.d, subrkw.d: removed syscall-specific stuff
	* pathname.d (if_does_not_exist_symbol, if_exists_symbol): added
	* socket.d (addr_to_string, resolve_host1, resolve_host): added
	* stream.d (file_stream_truename, open_file_stream_handle): added
	* posix.lisp, posixmath.d, posixmisc.d: removed

2003-07-25  Sam Steingold  <sds@gnu.org>

	* utils/modprep.c: DEFUN can specify side-effect-class

2003-07-25  Sam Steingold  <sds@gnu.org>

	* error.d (check_posfixnum): new function
	* io.d (PPRINT-INDENT): use check_real()
	* lisparit.d (fehler_not_N): replaced with check_number()
	(fehler_not_R): replaced with check_real()
	(fehler_not_F): replaced with check_float()
	(fehler_not_RA): replaced with check_rational()
	(fehler_not_I): replaced with check_integer()
	(to_double, to_int): new functions for modules
	made these changes pervasive in the whole file
	* lispbib.d (fehler_not_R): replaced with check_real()
	(check_posfixnum): declared

2003-07-24  Sam Steingold  <sds@gnu.org>

	* genclisph.d (SAFETY): export
	(type_data_object): fixed (now fixnum() works)
	(svector_): fixed (now TheSvector()->data works)
	(symbolp): uncommented
	(stringp): fixed
	(array_displace_check): replaces iarray_displace_check()
	* dirkey.c (SET-DKEY-VALUE): use array_displace_check() instead
	of iarray_displace_check(); many cosmetic tweaks
	* spvw_debug.d (nobject_out1): handle structures and fpointers

2003-07-23  Sam Steingold  <sds@gnu.org>

	Converted dirkey to a module
	* constobj.d, constpack.d, constsym.d, defs1.lisp, describe.lisp:
	* init.lisp, io.d, lispbibl.d, predtype.d, spvw.d, subr.d:
	* subrkw.d, type.lisp: removed dirkey-specific stuff
	* Makefile.devel (CONFIGURES): added dirkey, oracle, fastcgi
	* configure, makemake.in (--with-dir-key): removed option
	* encoding.d (cslen_f, cstombs_f): new functions that enable
	with_string_0() in modules
	* genclisph.d: enabled a LOT of stuff to support dirkey
	* modules/dirkey: new directory
	* dirkey.d, dirkey1.lisp: removed

2003-07-23  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (reset): updated the prototype
	* eval.d (reset): accept count arg
	* control.d (UNWIND-TO-DRIVER): use reset() for everything
	* spvw_alloca.d (memfile): updated reset() call
	* spvw_allocate (error_speicher_voll): ditto
	* spvw.d (SP_ueber, STACK_ueber): ditto
	* error.d (INVOKE-DEBUGGER): ditto
	* debug.d (break_driver): ditto

2003-07-23  Sam Steingold  <sds@gnu.org>

	* record.d (fehler_record_length): fixed stack

2003-07-21  Sam Steingold  <sds@gnu.org>

	* _clisp.c (main): use shell_quote() and real_path()
	for CreateProcess()
	* w32shell.c: new file (extracted from pathname.d)
	* makemake.in (clisp) [WIN32_NATIVE]: put the icon into the
	executable; depend on w32shell.c
	(pathname.o) [WIN32_NATIVE]: depend on w32shell.c
	* pathname.d, spvw_memfile.d [WIN32_NATIVE]:
	renamed TrueName() to real_path()

2003-07-18  Sam Steingold  <sds@gnu.org>

	* condition.lisp (check-value): CONTINUE :INTERACTIVE
	ASSERT-RESTART-NO-PROMPTS to avoid infinite loops

2003-07-16  Sam Steingold  <sds@gnu.org>

	* makemake.in (.gdbinit): substitute ${LEXE} for .run on w32
	(lisp.a): do not use lisp.o on w32 because it leads to a crash on
	the first statement in main() (when built --with-debug)

2003-07-16  Sam Steingold  <sds@gnu.org>

	* spvw.d (SP_ueber, STACK_ueber): flush stderr and guard fputs()
	and fflush() with begin_system_call()/end_system_call()

2003-07-15  John Hinsdale <hin@alma.com>

	* modules/oracle/orafns.c,oracle.lisp: support access to
	Oracle's LONG, RAW and LONG RAW data types

2003-07-10  Sam Steingold  <sds@gnu.org>

	* comptran.d (N_sin_N, N_cos_N): fixed GC-safety bugs

2003-07-10  Sam Steingold  <sds@gnu.org>

	* error.d (check_fdefinition): handle :CONTINUE restart from
	check_value()
	* condition.lisp (check-value): permit :CONTINUE restart when the
	place is (FDEFINITION ...)

2003-07-09  Sam Steingold  <sds@gnu.org>

	* errwin32.d (OS_error, OS_file_error, SOCK_error):
	avoid a warning by calling NOTREACHED at the end

2003-07-08  Sam Steingold  <sds@gnu.org>

	* configure: pass --win32gcc to makemake instead of ${target}
	* makemake.in: rely on autoconf for win32gcc

2003-07-08  Sam Steingold  <sds@gnu.org>

	* predtype.d (equalp): fixed a crash in (EQUALP '(0 1) '(#P""))

2003-07-08  Sam Steingold  <sds@gnu.org>

	* m4/filecharset.m4: avloid ":" on __MINGW32__
	just like we do with __CYGWIN32__

2003-07-08  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-MAP-on-CARs, c-MAP-on-LISTs): fixed the
	2003-02-09 patch: avoid bytecode duplication

2003-07-03  Sam Steingold  <sds@gnu.org>

	* makemake.in (testsuite): pass LEXE to make in suite

2003-07-02  Sam Steingold  <sds@gnu.org>

	* control.d (PROCLAIM): fixed STACK indexing for CONSTANT-(NOT)INLINE

2003-07-02  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (directory_namestring_parts) [WIN32_NATIVE,
	PATHNAME_UNIX]: include host parts.
	(whole_namestring): do not call host_namestring_parts when
	directory_namestring_parts includes it.
	(assure_dir_exists) [WIN32_NATIVE]: fixed bugs.
	(assure_dir_exists) [PATHNAME_UNIX]: do not insert host parts.

2003-07-01  Sam Steingold  <sds@gnu.org>

	* describe.lisp (describe1): better whitespace for documentation

2003-06-25  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out1): accept third argument `level'
	(nobject_out): pass 5 as the level to avoid circularity problems

2003-06-24  Sam Steingold  <sds@gnu.org>

	* spvw_circ.d (get_circ_unmark, get_circ_mark): handle
	Rectype_Weakpointer separately

2003-06-24  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out1): new function, extracted from
	nobject_out() to do all the recursive work
	(nobject_out): call it; now nobject_out() does fflush() and
	begin_system_call()/end_system_call() just once

2003-06-23  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (alloca) [UNIX_CYGWIN32]: use __builtin_alloca()

2003-06-19  Sam Steingold  <sds@gnu.org>

	* type.lisp (canonicalize-type): canonicalize (VECTOR NIL) correctly
	* predtype.d (CLASS-OF): handle (ARRAY NIL) correctly
	* describe.lisp (describe-object): report (ARRAY NIL)
	as having no storage
	* io.d (pr_array): print (ARRAY NIL NIL) properly

2003-06-19  Sam Steingold  <sds@gnu.org>

	added (SETF WEAK-POINTER-VALUE)
	* spvw_garcol.d (gar_col_normal): when the value of the weak
	pointer is GC-invariant, remove it from O(all_weakpointers)
	* lispbibl.d (weakpointer_broken_p): depend on wp_value (not wp_cdr)
	* record.d (mk_weakpointer): wp_cdr for GC-invariant values is unbound
	(MAKE-WEAK-POINTER, WEAK-POINTER-P, WEAK-POINTER-VALUE): fixed seclass
	(check_weak_pointer): new function
	(WEAK-POINTER-VALUE): use it
	(%SET-WEAK-POINTER-VALUE): implemented
	* constsym.d, subr.d (set_weak_pointer_value): added
	* places.lisp (WEAK-POINTER-VALUE): added defsetf

2003-06-15  Sam Steingold  <sds@gnu.org>

	* spvw.d (main) [WIN32_NATIVE]: permit `-K'
	clisp-link.sh now works on mingw

2003-06-13  Sam Steingold  <sds@gnu.org>

	* stream.d (make_file_stream): do not push :PROBE streams onto
	O(open_files) because that would prevent deleting this file and
	:PROBE streams do not have to be closed anyway

2003-06-13  Sam Steingold  <sds@gnu.org>

	* makemake.in [win32gcc]: build lisp.a on mingw and do stage
	comparison (make check) unix-style, not dos-style
	* configure [cygwin/mingw]: work around the _WinMain@16 libcharset
	problem with --enable-shared=no;  this is a FIXME for Bruno

2003-06-13  Sam Steingold  <sds@gnu.org>

	* pathname.d (TrueName) [WIN32_NATIVE]: return bool; made global;
	fixed a bug with overwriting "nameout" string with "resolved"
	(cpslashp): new macro, used throughout the file
	* spvw_memfile.d (loadmem) [WIN32_NATIVE]: use TrueName() to
	resolve possible symbolic links
	* lispbibl.d (TrueName): added a prototype

2003-06-12  Sam Steingold  <sds@gnu.org>

	* makemake.in: on win32gcc, translate /cygdrive/ prefixes to the
	normal win32 pathnames (so that clisp.exe would work properly)
	(stage): use the same check for defining ${LN_S} to copy and
	for using it as a copier (as opposed to symbolic linker)

2003-06-12  Sam Steingold  <sds@gnu.org>

	* pathname.d (simplify_directory): fold "*" into :WILD
	and "**" into :WILD-INFERIORS
	(subdir_diff): ignore logical
	(directory_list_valid_p): accept :WILD

2003-06-08  Sam Steingold  <sds@gnu.org>

	* io.d (check_readtable): new function, replaces function
	fehler_readtable() and macro check_readtable()
	(COPY-READTABLE): modified accordingly
	(SET-SYNTAX-FROM-CHAR): ditto, also
	use check_char() instead of fehler_char()
	(test_readtable_arg, test_readtable_null_arg, test_nontermp_arg):
	accept an argument instead of using popSTACK()
	(SET-MACRO-CHARACTER, GET-MACRO-CHARACTER, SET-READTABLE-CASE)
	(MAKE-DISPATCH-MACRO-CHARACTER, SET-DISPATCH-MACRO-CHARACTER)
	(GET-DISPATCH-MACRO-CHARACTER, READTABLE-CASE):
	modified accordingly, use check_char() instead of fehler_char()

2003-06-07  Sam Steingold  <sds@gnu.org>

	* init.lisp (*suppress-check-redefinition*): new user variable
	(check-redefinition): respect it

2003-06-07  Sam Steingold  <sds@gnu.org>

	* cfgacorn.lisp, cfgamiga.lisp, cfgdos.lisp, cfgwin32.lisp:
	no need to prefix GETENV with "SYS::"
	* cfgsunux.lisp, cfgunix.lisp: ditto
	(short-site-name): read from uname(1) -n
	(long-site-name): read from uname(1) -a

2003-06-06  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (get_screen_and_display): fixed a typo
	use listof() instead of funcall(L(list)) throughout the file
	(coerce_result_type): new function, used by all functions that
	take a :RESULT-TYPE argument
	(coerce_it): removed (it was used inconsistently and
	coerce_result_type() is more efficient anyway)
	(SCREEN-DEPTHS): fixed a crash due to not pushing the visual info
	lists on the stack (they were just discarded!)

2003-06-06  Sam Steingold  <sds@gnu.org>

	* encoding.d (CONVERT-STRING-FROM-BYTES): fixed a bug in handling
	of indirect byte vectors
	Reported by Adam Warner <lists@consulting.net.nz>

2003-06-06  Will Newton  <will@misconception.org.uk>

	* modules/clx/new-clx/clx.f: fix the build with gcc 3.3,
	which has some changes with respect to multi-line strings

2003-06-06  Bruno Haible  <bruno@clisp.org>

	* clos.lisp (analyze-method-description): Call %call-next-method
	even if there is no next method.
	(%call-next-method): When there is no next method, call
	%no-next-method here.

2003-06-05  Sam Steingold  <sds@gnu.org>

	* predtype.d (TYPE-OF): return KEYWORD for keyword symbols
	and BIT for 0 and 1

2003-06-05  Sam Steingold  <sds@gnu.org>

	* pathname.d (LAUNCH) [WIN32_NATIVE]: fixed GC-safety

2003-06-04  Sam Steingold  <sds@gnu.org>

	* pathname.d (LAUNCH): :WAIT defaults to T,
	return child PID when the :WAIT is NIL

2003-05-29  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 738107 ]: line number of output streams
	* io.d (pr_stream): do not print lineno for output streams
	Should we keep both lineno and ch_lpos for all streams?!

2003-05-25  Sam Steingold  <sds@gnu.org>

	* constobj.d (type_packname): include CHARACTER, as per ANSI spec
	* charstrg.d (test_radix_arg, test_char_args)
	(test_char_args_upcase, test_stringsymchar_arg): recoverable
	avoid dotimes*() macro throughout the file
	* package.d (test_package_arg): recoverable

2003-05-24  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (HASH-TABLE-COUNT): rehash the argument when it is
	weak and invalid because GC could reduce the count

2003-05-24  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out): handle hash tables

2003-05-24  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (rehash): fixed an "off by one" bug in user-defined HTs
	(hash_lookup): fixed a GC-safety bug in user-defined HTs

2003-05-24  Sam Steingold  <sds@gnu.org>

	* pathname.d (stringlist_to_asciizlist): always defined;
	fixed GC-safety errors
	(LAUNCH): return NIL when :WAIT was NIL
	[UNIX/RISCOS]: fixed GC-safety errors; handle :PRIORITY argument
	* unixconf.h.in (HAVE_NICE): added
	* configure.in: check for nice(2)

2003-05-24  Sam Steingold  <sds@gnu.org>

	* error.d (check_list): new function
	* lispbibl.d (check_list): declare

2003-05-24  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Concerning the CLHS/Win32 issue.
	* pathname.d (shell_quote): removed source_end parameter.
	(stringlist_to_asciizlist) [WIN32_NATIVE]: new function.
	(LAUNCH) [WIN32_NATIVE,UNIX/RISCOS]: use it.
	(SHELL-EXECUTE): new function - a wrapper for ShellExecute.
	Shell means GUI shell, not the command.com.
	* constsym.d: declared SHELL-EXECUTE in EXT.
	* subr.d: ditto.
	* win32.d: include <shellapi.h>
	* makemake.in: link against shell32.lib
	* clhs.lisp (browse-url) [WIN32]: start default browser by default.

2003-05-24  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* spvw_sigsegv.d (stackoverflow_handler): fixed MSVC compilation.

2003-05-22  Bruno Haible  <bruno@clisp.org>

	* spvw_sigsegv.d (stackoverflow_handler): Add support for restoring
	STACK on hppa-hpux, alpha-freebsd, i386-openbsd, alpha-netbsd.

2003-05-22  Bruno Haible  <bruno@clisp.org>

	Preliminary support for x86_64 CPU.
	* lispbibl.d (AMD64): New macro.
	* spvw_page.d: Treat AMD64 like IA64.

2003-05-22  Sam Steingold  <sds@gnu.org>

	* loadform.lisp (make-load-form): do not define a method
	specialized to STANDARD-OBJECT - ANS requires an error there

2003-05-21  Sam Steingold  <sds@gnu.org>

	* clos.lisp (no-method-caller): new function
	(compute-dispatch): use it instead of calling NO-APPLICABLE-METHOD
	directly to avoid funcalling the return value of NO-APPLICABLE-METHOD
	(compute-effective-method): ditto for NO-APPLICABLE-METHOD and
	NO-PRIMARY-METHOD; removed the loop

2003-05-21  Sam Steingold  <sds@gnu.org>

	* error.d (check_fdefinition): fixed stack handling
	(check_function): get(sym,ind) may not be a symbol
	* eval.d (eval1): do not use apply() after check_fdefinition()

2003-05-21  Sam Steingold  <sds@gnu.org>

	* disassem.lisp (disassemble, disassemble-machine-code): return
	NIL, as per ANSI CL spec

2003-05-21  Sam Steingold  <sds@gnu.org>

	MAKE-INSTANCES-OBSOLETE now does nothing except for issuing a
	warning: there is no point in obsoleting instances if the class
	has not been redefined
	* clos.lisp (ensure-class): incf CLASS-ID here
	(make-instances-obsolete): do not incf CLASS-ID here

2003-05-20  Sam Steingold  <sds@gnu.org>

	even more errors are now recoverable
	* control.d (FUNCTION): use check_funname() and
	check_fdefinition() instead of signalling errors
	(fehler_undef_function): removed
	(SYMBOL-FUNCTION, FDEFINITION): use check_fdefinition()
	instead of fehler_undef_function()
	(check_setq_body): GC-unsafe due to using
	check_symbol_non_constant() instead of test_symbol_non_constant()
	(SET, MAKUNBOUND, MULTIPLE-VALUE-SETQ): use
	check_symbol_non_constant() instead of test_symbol_non_constant()
	(check_varspec): new function
	(make_variable_frame, COMPILER-LET): use it, also use
	check_symbol_non_constant() instead of test_symbol_non_constant()
	(PROGV): progv() is GC-unsafe now
	(PROCLAIM): use check_funname() instead of fehler_kein_symbol()
	* error.d (fehler_kein_symbol): removed
	(check_symbol_non_constant): replaces test_symbol_non_constant()
	(check_symbol_special, check_fdefinition): new functions
	(check_function): replaces fehler_function()
	* eval.d (progv): GC-unsafe due to using
	check_symbol_non_constant() instead of test_symbol_non_constant()
	(get_closure): use check_symbol_non_constant()
	instead of test_symbol_non_constant()
	(fehler_undefined): removed
	(coerce_function, eval1, apply, funcall): use check_fdefinition()
	instead of fehler_undefined()
	(interpret_bytecode_) [cod_symbol_function]:
	[cod_const_symbol_function, cod_const_symbol_function_push]:
	[cod_const_symbol_function_store]:
	use check_symbol() and check_fdefinition()
	instead of fehler_kein_symbol() and fehler_undefined()
	(funcall_iclosure): push arguments on STACK
	before calling fehler_key_odd()
	* foreign.d (EXEC-ON-STACK, CALL-WITH-FOREIGN-STRING):
	use check_function() instead of fehler_function()
	* lispbibl.d (progv): documented as GC-unsafe
	(fehler_undef_function, fehler_kein_symbol, fehler_function)
	(test_symbol_non_constant): removed
	(check_symbol_non_constant, check_fdefinition, check_function): added
	(COERCE): use use check_fdefinition()
	instead of fehler_undef_function()
	* record.d (MAKE-MACRO, MAKE-FUNCTION-MACRO): use check_function()
	instead of fehler_function()
	* sequence.d (seq_boolop): ditto
	* symbol.d (%PUTD): ditto

2003-05-18  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Solve problems with CLHS and INSPECT on win32
	* clhs.lisp (BROWSE-URL): use EXT::LAUNCH on win32.
	* runprog.lisp (run-shell-command): don't try to use #\&
	on win32.

2003-05-18  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (LAUNCH) [WIN32_NATIVE]: small fixes.
	(LAUNCH) [UNIX || RISCOS]: implemented for these
	systems (like EXECUTE). Moved out of HAVE_SHELL.
	* subr.d (LAUNCH): changed conditionals for declaration.
	* subrkw.d: ditto.
	* constsym.d: ditto.

2003-05-16  Sam Steingold  <sds@gnu.org>

	* dribble.lisp (check-dribble-stream): new function
	(dribble-stream-source, dribble-stream-target): use it

2003-05-16  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 737541 ]: describe on unnamed function and on macro
	* describe.lisp (describe-object): MACRO:
	suggest (DISASSEMBLE (MACRO-FUNCTION ...))
	FUNCTION: do not suggest disassembling anonymous function

2003-05-13  Sam Steingold  <sds@gnu.org>

	DEFINE-HASH-TABLE-TEST: user-defined hash table tests
	* lispbibl.d (Hashtable): added slots ht_test and ht_hash
	(hashtable_test): removed
	(ht_test_code): added
	(hash_table_test): declare
	* hashtabl.d (hashcode5): new function - for user-defined ht_test
	(hashcode_raw, hashcode_cook): split out from hashcode()
	(hashcode): use them; may trigger GC for user-defined ht_test
	(rehash, hash_lookup): may trigger GC for user-defined ht_test
	(prepare_resize, check_weak): the error is now recoverable
	(hash_prepare_store): use hashcode_raw() and hashcode_cook() to
	call the user hash function just once
	(MAKE-HASH-TABLE): accept user-defined ht_test
	all errors are now recoverable
	(fehler_hashtable): replaced with check_hashtable()
	(shifthash): modified for the GC unsafe hash_lookup()
	(hash_table_test): new function
	(PUTHASH, REMHASH, MAPHASH, CLRHASH, HASH-TABLE-COUNT)
	(HASH-TABLE-REHASH-SIZE, HASH-TABLE-REHASH-THRESHOLD)
	(HASH-TABLE-SIZE, HASH-TABLE-TEST, HASH-TABLE-ITERATOR)
	(HASH-TABLE-WEAK-P, %SET-HASH-TABLE-WEAK-P, CLASS-TUPLE-GETHASH):
	use check_hashtable() instead of fehler_hashtable()
	* defs2.lisp (define-hash-table-test): define
	* init.lisp (define-hash-table-test): export
	* io.d (pr_orecord): use hash_table_test()
	* predtype.d (hash_table_equalp): use ht_test_code()

2003-05-15  Sam Steingold  <sds@gnu.org>

	* stream.d (stream_lend_handle): handletype may be NULL
	(stream_fd): removed
	* lispbibl.d (stream_fd): removed
	* pathname.d (FILE-STAT-INTERNAL, copy_attributes_and_close):
	use stream_lend_handle() instead of stream_fd()

2003-05-15  Sam Steingold  <sds@gnu.org>

	* stream.d (MAKE-STREAM): implemented
	* constsym.d, subr.d, subrkw.d (make_stream): added
	* init.lisp (MAKE-STREAM): export
	* lispbibl.d (stream_lend_handle): declared

2003-05-15  Jörg Höhle  <hoehle@users.sourceforge.net>

	* modules/bindings/linuxlibc6/linux.lisp [LINUX]: several fixes
	(errno, putpwent, c-struct group): fixed
	(getpwent, fgetpwent, getpwuid, getpwnam): return c-ptr-null
	(getgrent, fgetgrent, getgrgid, getgrnam): return c-ptr-null
	(readdir): return c-ptr-null
	(seed48): fixed arg, but extern prototyping is still broken

2003-05-14  Sam Steingold  <sds@gnu.org>

	stdio handles are now duped before being inserted into LISP
	streams, so they are never closed on user request
	* stream.d (handle_to_stream): new function
	(make_standard_input, make_standard_output): new macro
	(make_terminal_io, init_standard_io): use them
	(init_streamvars): use handle_to_stream()

2003-05-14  Sam Steingold  <sds@gnu.org>

	* pathname.d (handle_dup): new global function
	(LAUNCH, DUPLICATE-HANDLE): use it
	* lispbibl.d (handle_dup1): new macro

2003-05-14  Sam Steingold  <sds@gnu.org>

	* constobj.d (type_priority) [WIN32_NATIVE]: added
	* pathname.d (LAUNCH) [WIN32_NATIVE]: use it (GC-safety bug fix!)
	(allocate_cons_v): removed
	* error.d (fehler_key_odd): fixed a GC-safety bug

2003-05-14  Bruno Haible  <bruno@clisp.org>

	* compiler.lisp: BLOCK-OPEN and TAGBODY-OPEN not only have
	undefined values, but invalidate value1 due to consing!
	(traverse-anode): clear the current known value (*current-value*
	and *current-vars*) when encountering BLOCK-OPEN or TAGBODY-OPEN

2003-05-13  Jörg Höhle  <hoehle@users.sourceforge.net>

	* foreign.d (FOREIGN-SIZE): remove unreferenced function

2003-05-12  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (check_uint8, check_sint8, check_uint16, check_sint16)
	(check_uint32, check_sint32, check_uint64, check_sint64, check_uint)
	(check_sint, check_ulong, check_slong, check_ffloat, check_dfloat):
	functions returning the correct argument
	(fehler_uint8, fehler_sint8, fehler_uint16, fehler_sint16)
	(fehler_uint32, fehler_sint32, fehler_uint64, fehler_sint64)
	(fehler_uint, fehler_sint, fehler_ulong, fehler_slong)
	(fehler_ffloat, fehler_dfloat): removed
	* error.d (fehler_uint8, fehler_sint8, fehler_uint16, fehler_sint16)
	(fehler_uint32, fehler_sint32, fehler_uint64, fehler_sint64)
	(fehler_uint, fehler_sint, fehler_ulong, fehler_slong)
	(fehler_ffloat, fehler_dfloat): replaced with check_*()
	* genclisph.d (...): ditto
	* stream.d (rd_by_array_dummy): use check_uint8()
	instead of fehler_uint8()
	* foreign.d (OFFSET, FOREIGN-LIBRARY, FOREIGN-LIBRARY-VARIABLE):
	use check_sint32() correctly
	(check_library): replaces test_library()

2003-05-12  Sam Steingold  <sds@gnu.org>

	* type.lisp (built-in-class-p): eval only when loading source
	* clos.lisp (built-in-class-p): do not proclaim notinline

2003-05-12  Sam Steingold  <sds@gnu.org>

	* pathname.d (MERGE-PATHNAMES): fixed a crash: the address
	of the LHS may be computed before a GC in merge_dirs()
	[this is a GC-safety bug not detected by DEBUG_GCSAFETY]

2003-05-12  Jörg Höhle  <hoehle@users.sourceforge.net>

	* pathname.d (DYNLOAD-MODULES): more error checking

2003-05-12  Jörg Höhle  <hoehle@users.sourceforge.net>

	* foreign1.lisp (exec-with-foreign-string): new internal function
	to let FFI:WITH-FOREIGN-STRING to expand the same with or without
	unicode.
	* foreign.d (call_with_foreign_string): fixed --without-unicode

2003-05-09  Sam Steingold  <sds@gnu.org>

	function-name error can now be recovered from
	* error.d (fehler_funname_source, fehler_funname_type): merged
	into check_funname()
	(fehler_key_odd, fehler_key_notkw, fehler_key_badkw): added
	* lispbibl.d (fehler_funname_source, fehler_funname_type):
	replaced with check_funname()
	(fehler_key_odd, fehler_key_notkw, fehler_key_badkw): declare
	* control.d (FUNCTION, FLET, LABELS): use check_funname()
	instead of fehler_funname_source()
	(funname_to_symbol): use check_funname()
	instead of fehler_funname_type()
	* eval.d (eval1): use check_funname()
	instead of fehler_funname_source()
	(apply, funcall): use check_funname()
	instead of fehler_funname_type()
	(fehler_key_unpaarig, fehler_key_notkw, fehler_key_badkw): removed
	(check_for_illegal_keywords): accept an additional caller arg
	* record.d (fehler_key_odd): removed
	(keyword_test): use fehler_key_notkw() and fehler_key_badkw()
	* trace.lisp (check-function-name): replaces error-function-name
	(check-traceable): modified to use check-function-name
	* clos.lisp (documentation): ditto
	* cmacros.lisp (compiler-macro-function): ditto

2003-05-09  Sam Steingold  <sds@gnu.org>

	* type.lisp (%the): ANSI compliance: following issue 348, ignore
	discrepancies between the number of values and types

2003-05-09  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (compile-toplevel-form): do not write the result
	of (COMPILE ... NIL) into the FAS files (e.g., (eval-when (eval))
	should not produce any test in the FAS file)

2003-05-09  Jörg Höhle  <hoehle@users.sourceforge.net>

	* inspect.lisp (with-http-output): fixed --without-unicode
	to send Content-type: text/html without charset.

2003-05-07  Sam Steingold  <sds@gnu.org>

	* encoding.d (ENCODING-LINE-TERMINATOR): new function
	* init.lisp (ENCODING-LINE-TERMINATOR): exported from EXT
	* constsym.d, subr.d (encoding_line_terminator): added

2003-05-07  Sam Steingold  <sds@gnu.org>

	replaced fehler_encoding() with check_encoding()
	* error.d (check_encoding): new function, based on
	test_external_format_arg() in stream.d
	(fehler_encoding): removed
	* lispbibl.d (check_encoding, fehler_encoding): ditto
	* foreign.d (CALL-WITH-FOREIGN-STRING): use check_encoding()
	instead of fehler_encoding()
	* encoding.d (CHARSET-TYPEP, ENCODING-CHARSET, CHARSET-RANGE)
	(SET-DEFAULT-FILE-ENCODING, SET-PATHNAME-ENCODING)
	(SET-TERMINAL-ENCODING, SET-FOREIGN-ENCODING, SET-MISC-ENCODING)
	(CONVERT-STRING-FROM-BYTES, CONVERT-STRING-TO-BYTES): ditto
	* stream.d (test_external_format_arg): turned in to a macro that
	calls check_encoding()

2003-05-06  Jörg Höhle  <hoehle@users.sourceforge.net>

	* ffcall/avcall/avcall.h.in (av_overflown): added this macro to
	check when buffer[AV_ALIST_WORDS] is too small for av_call()
	* foreign.d (FOREIGN-CALL-OUT): use it (bug #[ 654718 ])

2003-05-05  Sam Steingold  <sds@gnu.org>

	* backquote.lisp (bq-vec-expand): fixed the unoptimized case
	* compiler.lisp (compile-file): finish listing-stream with a newline
	(compile) [CLISP-DEBUG]: bind *FORM* for TRACE (bug #[ 731248 ])
	* control.d (UNWIND-TO-DRIVER): call unwind_upto() before
	driver() (bug #[ 731251 ])

2003-05-05  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 732767 ]: STRING-INFO does not work with displaced strings
	* charstrg.d (STRING-INFO): handle displaced strings

2003-05-05  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 732656 ]: (proclaim '(notinline ...)) ignored
	* control.d (PROCLAIM): fixed STACK indexing for (NOT)INLINE

2003-05-04  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (bt_out): extracted from back_trace_out()
	(back_trace_out): use it
	(back_trace_depth, back_trace_out): fully check for circularities

2003-05-04  Sam Steingold  <sds@gnu.org>

	* stream.d (var_stream): check whether the stream is open
	[broken since 2002-04-01]

2003-05-03  Sam Steingold  <sds@gnu.org>

	* acorn.d, amiga.d, unix.d (stderr_handle): added
	* amigaaux.d (init_amiga): initialize it

2003-05-03  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (STACK_register) [__GNUC__ >= 3]: disable.
	This is a workaround for a GCC3 bug(s?) which manifest itself
	in CLISP bugs #[ 710737 ]: CLISP+readline = core dump
	and #[ 723097 ]: cast to char array crashes.

2003-05-03  Sam Steingold  <sds@gnu.org>

	* foreign.d (EXEC-ON-STACK): use UNWIND-PROTECT to always clean up

2003-05-02  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 729524 ]: ffi:c-struct corrupt
	* foreign1.lisp (with-name/options): new macro
	(parse-components, c-struct-constructor, parse-c-type)
	(deparse-c-type, def-c-struct): C-STRUCT typespec is
	short again: (C-STRUCT name+opt slots ....)

2003-05-03  Arseny Slobodjuck  <ampy@ich.dvo.ru>
	    Sam Steingold  <sds@gnu.org>

	* pathname.d (LAUNCH): deobfuscated according to General Line.
	Supported -1 as return value.
	use check_string() instead of fehler_string()

2003-05-03  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fixed msvc (and amiga ?) build.
	* errwin32.d: added second argument start_driver_p = true
	to calls.
	* erramiga.d: same.
	* win32.d (MyCreateProcess): changed declaration command is
	LPTSTR, not LPCTSTR.
	* win32aux.d (MyCreateProcess): same + fixed an error in
	old style declaration (introduced 2003-04-27).

2003-05-02  Sam Steingold  <sds@gnu.org>

	* clos.lisp (allocate-instance, shared-initialize)
	(reinitialize-instance, make-instance):
	add &key &allow-other-keys to the signature
	(initial-reinitialize-instance): collect keywords from methods
	for REINITIALIZE-INSTANCE (in addition to SHARED-INITIALIZE)

2003-05-01  Sam Steingold  <sds@gnu.org>

	make some errors recoverable
	* condition.lisp (report-new-value, report-no-new-value)
	(report-new-values): removed
	(prompt-for-new-value): take an optional INSTEAD-P argument
	(check-type, assert, retry-loop): must cons up the reporter
	at macroexpansion time
	(check-value): install restarts and signal the condition
	* constsym.d (check_value): added
	* error.d (end_error): may return when the new argument,
	start_driver_p, is false
	(fehler): pass true as start_driver_p to end_error()
	(check_value): new function, calls CHECK-VALUE
	(fehler_symbol, fehler_string): removed
	(check_symbol, check_char, check_string): added
	* errunix.d (OS_error, OS_file_error): pass true as
	start_driver_p to end_error()
	* init.lisp (make-condition): pre-draw for clos.lisp
	* lispbibl.d (check_string, check_symbol, check_char): declare
	(fehler_symbol, test_symbol, fehler_string): removed
	* macros2.lisp (report-one-new-value-string)
	(report-new-values-string): return a format string with 1 argument
	(report-one-new-value-string-instead): new function
	(assert): call FORMAT on REPORT-*NEW-VALUE?-STRING
	* charstrg.d (coerce_ss, coerce_imm_ss, coerce_imm_normal_ss)
	(string_concat): use check_string() instead of fehler_string()
	(test_string_limits_ro): ditto - it is now GC-unsafe!
	(test_char_arg): superseded by check_char()
	(STANDARD-CHAR-P, GRAPHIC-CHAR-P, CHAR-WIDTH, STRING-CHAR-P)
	(BASE-CHAR-P, ALPHA-CHAR-P, UPPER-CASE-P, LOWER-CASE-P)
	(BOTH-CASE-P, DIGIT-CHAR-P, ALPHANUMERICP, CHAR-CODE, CHAR-UPCASE)
	(CHAR-DOWNCASE, CHAR-INT, CHAR-NAME): use check_char()
	instead of test_char_arg()
	(CHAR, STORE-CHAR, SCHAR, STORE-SCHAR): use check_char() instead
	of test_char_arg() and check_string() instead of fehler_string()
	* clos.lisp (slot-unbound): use CHECK-VALUE
	* control.d (fehler_no_value): superseded by ...
	(check_global_symbol_value): new function
	(%SYMBOL-VALUE, SYMBOL-VALUE): use check_symbol() instead of
	test_symbol() and check_global_symbol_value() instead of
	fehler_no_value()
	(SYMBOL-FUNCTION, BOUNDP, SPECIAL-OPERATOR-P, BLOCK)
	(MACRO-FUNCTION, PROCLAIM, RETURN-FROM): use check_symbol()
	instead of test_symbol()
	(test_env): use check_value - it is now GC-unsafe!
	* dirkey.d (test_dir_key): ditto
	(DIR-KEY-OPEN, DKEY-SEARCH-ITERATOR, init_iteration_node)
	(DIR-KEY-VALUE, SET-DKEY-VALUE, REG_KEY_DEL):
	use check_string() instead of fehler_string()
	* eval.d (SPECIAL-VARIABLE-P): use use check_symbol()
	instead of test_symbol()
	(sym_value_place, check_local_symbol_value): new functions
	(sym_value): now a macro that calls sym_value_place()
	(eval1): use check_local_symbol_value()
	* foreign.d (FOREIGN-LIBRARY): use check_string() instead of
	fehler_string()
	(FOREIGN-LIBRARY-FUNCTION): coerce_ss() makes the stringp()
	check unnecessary
	* genclisph.d (fehler_symbol, check_char, fehler_string): removed
	* i18n.d (SET-CURRENT-LANGUAGE): use check_symbol() instead of
	test_symbol() and check_string() instead of fehler_string()
	(GETTEXT, NGETTEXT): use check_string() instead of fehler_string()
	* misc.d (GETENV, SETENV, REGISTRY, MODULE-INFO): ditto
	* package.d (MAKE-SYMBOL, test_intern_args): ditto
	(UNINTERN): use check_symbol() instead of fehler_symbol()
	* pathname.d (SHELL): treat nil as unbound
	(SHELL, LAUNCH, DYNLOAD-MODULES) use check_string()
	instead of fehler_string()
	* predtype.d (FIND-CLASS): use check_symbol()
	instead of fehler_symbol()
	* record.d (SYMBOL-MACRO-EXPAND): use check_symbol()
	instead of test_symbol()
	* socket.d (SOCKET-SERVICE-PORT) use check_string()
	instead of fehler_string()
	* stream.d (SOCKET-CONNECT): ditto
	(SYMBOL-STREAM): use check_symbol() instead of test_symbol()
	* symbol.d (%PUTD, %FIND-SUBR, %PROCLAIM-CONSTANT, GET, %PUTPLIST)
	(%PUT, REMPROP, SYMBOL-PACKAGE, SYMBOL-PLIST, SYMBOL-NAME): ditto
	(Symbol_function_checked): removed

2003-05-02  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	improved LAUNCH for win32
	* pathname.d (LAUNCH) [WIN32_NATIVE]: added new arguments:
	:ARGUMENTS, :PRIORITY, changed return value.
	No longer use MyCreateProcess.
	(shell_quote, allocate_cons_v) [WIN32_NATIVE && HAVE_SHELL]: new
	functions.
	* constsym.d (:ARGUMENTS, :PRIORITY, :HIGH, :NORMAL, :LOW)
	[HAVE_SHELL]: added new keywords.
	(:WAIT, :TERMINAL): define only when HAVE_SHELL.
	* subr.d (LAUNCH): changed declaration.
	* subrkw.d (LAUNCH): ditto.

2003-05-02  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* stream.d (create_output_pipe): Fixed a cut-and-paste type typo.

2003-04-30  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (compile-lambda): accept one more argument -
	error-when-failed-p - and signal an error when it is T
	and the compilation failed
	(compile-form): pass error-when-failed-p NIL to compile-lambda
	* eval.d (get_closure): pass ewfp T to compile-lambda, thus
	(:LAMBDA () (DECLARE (COMPILE)) (LET ((:Z T)) :Z))
	now errors out instead of returning a weird function object
	* disassem.lisp (disassemble): pass ewfp NIL to compile-lambda

2003-04-29  Sam Steingold  <sds@gnu.org>

	* makemake.in (full): no longer require "rm -rf full"
	for full to be remade

2003-04-29  Sam Steingold  <sds@gnu.org>

	fixed --without-unicode build
	* spvw_debug.d (string_out) [!UNICODE]: implemented
	* stream.d (rd_ch_array_unbuffered, wr_ch_array_unbuffered_unix)
	(wr_ch_array_unbuffered_mac, wr_ch_array_unbuffered_dos)
	(wr_ch_array_buffered_unix) [!UNICODE]: added a cast
	* inspect.lisp (*http-encoding*) [-UNICODE]: do not
	pass :CHARSET to MAKE-ENCODING
	* foreign1.lisp (with-foreign-string) [-UNICODE]: no
	CUSTOM:*FOREIGN-ENCODING* without UNICODE
	* foreign.d (CALL-WITH-FOREIGN-STRING) [!UNICODE]:
	* encoding.d (MAKE-ENCODING) [!UNICODE]: NIL charset is passed
	when initializing O(default_file_encoding); handle that

2003-04-29  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 729456 ]: --with-readline is silently ignored
	* makemake.in: fail when --with-readline is supplied but
	configure does not find a working readline

2003-04-29  Jörg Höhle  <hoehle@users.sourceforge.net>

	* foreign1.lisp: added FFI:WITH-C-PLACE, FFI:C-VAR-OBJECT

2003-04-28  Jörg Höhle  <hoehle@users.sourceforge.net>

	partially restored support for --without-unicode
	* encoding.d (EXT:ENCODING-CHARSET): only with #+UNICODE
	* subr.d, constsym.d: likewise
	* stream.d (rd_ch_array_unbuffered): typo

2003-04-28  Jörg Höhle  <hoehle@users.sourceforge.net>

	* foreign.d (SETF FFI:VALIDP): prevent from invalidating unique
	session FFI pointer

2003-04-28  Jörg Höhle  <hoehle@users.sourceforge.net>

	* stream.d (stream_lend_handle): strm_keyboard_handle only
	present when #define KEYBOARD

2003-04-27  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Implemented extended program launcher in win32.
	* constsym.d (LAUNCH, :terminal): added.
	* win32.d (MyCreateProcess): added error-stream to declaration.
	* win32aux.d (MyCreateProcess): implemented this addition.
	* pathname.d (SHELL) [WIN32_NATIVE]: usage of MyCreateProcess
	corrected.
	(MyDupHandle) [WIN32_NATIVE]: new helper function.
	(LAUNCH) [WIN32_NATIVE]: the launcher.
	* stream.d (sync_file_buffered): new function.
	(create_input_pipe, create_output_pipe, create_io_pipe):
	usage of MyCreateProcess corrected.
	(stream_lend_handle): new function to lend the handles.
	* subr.d (LAUNCH) [WIN32_NATIVE]: added.
	* subrkw.d (LAUNCH) [WIN32_NATIVE]: added.

2003-04-26  Sam Steingold  <sds@gnu.org>

	* clos.lisp (finalize-instance-standard-class): use DOLIST
	instead of MAPC
	(def-unbound): fixed the call (broken by the CLASS-ID patch)

2003-04-26  Sam Steingold  <sds@gnu.org>

	* array.d (ADJUST-ARRAY): fixed a GC-safety bug
	* eval.d (funcall_iclosure): fixed 2 GC-safety bugs
	* record.d (update_instance): fixed 3 GC-safety bugs
	(keyword_test): fixed last patch
	* control.d (KEYWORD-TEST): ditto

2003-04-26  Sam Steingold  <sds@gnu.org>

	* clos.lisp (ensure-class): when either the old definition or the
	new one is a DEFSTRUCT, just discard the old definition altogether

2003-04-26  Stefan Kain  <stefan.kain@freenet.de>

	* floatprint.lisp: translated all comments

2003-04-26  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 726286 ]: (load :compiling t) redefinition warnings
	* clos.lisp (setf find-class): always call CHECK-REDEFINITION
	* init.lisp (check-redefinition): handle LOAD :COMPILING T;
	always reset SYS::FILE indicator to the new value
	* places.lisp (define-setf-expander, defsetf): call
	CHECK-REDEFINITION at definition time, not macroexpansion time

2003-04-25  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 726282 ]: read_form() botches STACK
	* debug.d (read_form): make sure to unbind *TERMINAL-READ-STREAM*

2003-04-25  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (STACKCHECKB): when non-0, check that we are
	unwinding a binding frame for the correct symbol
	(dynamic_unbind): accept a symbol argument
	(dynamic_unbind_g): same as old dynamic_unbind()
	* debug.d, error.d, eval.d, io.d, predtype.d, spvw_language.d:
	pass the symbol argument to dynamic_unbind() whenever possible

2003-04-25  Jörg Höhle  <hoehle@users.sourceforge.net>

	* foreign.d (convert_to_foreign): accept FOREIGN-VARIABLE object
	for C-POINTER c-type declaration and move often used cases up in
	the long if-then-else chain

	* foreign1.lisp (allocate-shallow): fix typo,
	and export FOREIGN-POINTER

2003-04-22  Sam Steingold  <sds@gnu.org>

	* _distmakefile, makemake.in: distribute clisp.ps and put it into
	lispdocdir together with clisp.html and clisp.dvi

2003-04-22  Sam Steingold  <sds@gnu.org>

	implemented adjusting of non-adjustable arrays (Issue 5)
	* lispbibl.d (X3J13_003): removed undef
	* array.d (array_atype): new function
	(array_element_type, test_displaced): use it
	(ADJUST-ARRAY): when the argument is not adjustable,
	return a fresh array

2003-04-22  Jörg Höhle  <hoehle@users.sourceforge.net>

	* stream.d (lisp_completion): fixed misplaced end_callback()

	* encoding.d (init_encodings_2), constsym.d: complete patch
	for CHARSET:WINDOWS-1255 and -1258

	* ChangeLog: use users.sourceforge e-mail (hide other)

2003-04-21  Sam Steingold  <sds@gnu.org>

	* io.d (ANSI-PATHNAME-READER): understand Allegro CL #P(...)
	syntax which is equivalent to our #S(PATHNAME ...) syntax

2003-04-21  Sam Steingold  <sds@gnu.org>

	EQUALP on HASH-TABLEs now correctly descends the structure
	* predtype.d (hash_table_equalp): new function
	(equalp): use it to compare hash-tables

2003-04-21  Sam Steingold  <sds@gnu.org>

	* spvw_fault.d, spvw_genera1.d, spvw_genera2.d, spvw_genera3.d:
	* spvw_heap.d, spvw_memfile.d (memdump_header, memdump_page)
	(memdump_physpage_state, memdump_reloc_header, old_new_pointer)
	(physpage_state, walkstep_fun, gc_data_list): appended "_t" to
	type names; use MALLOC
	* lispbibl.d (MALLOC): new macro

2003-04-21  Sam Steingold  <sds@gnu.org>

	* control.d (KEYWORD-TEST): treat :ALLOW-OTHER-KEYS NIL correctly
	* record.d (keyword_test): ditto
	* eval.d (fehler_key_badkw): sync the message with the above

2003-04-21  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (analyze1): &WHOLE argument may be a pattern too
	(analyze-key): permit patterns as &KEY arguments (broken on 2003-03-25)

2003-04-21  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (make-macro-expansion): the environment argument
	in MACRO-FUNCTION is not optional but required
	* init.lisp (backquote, bq-nconc, defmacro): ditto

2003-04-20  Sam Steingold  <sds@gnu.org>

	* m4/rusage.m4 (CL_RUSAGE): use time(2) instead of a constant
	loop: the Moore's law has caught up with this constant already
	* m4/rlimit.m4 (CL_RLIMIT): check getrlimit() too
	* posixmisc.d (RESOURCE-USAGE-LIMITS-INTERNAL): respect
	HAVE_SYS_RESOURCE_H, HAVE_GETRUSAGE and HAVE_GETRLIMIT

2003-04-20  Sam Steingold  <sds@gnu.org>

	* package.d (make_present): if symbol is homeless, set its home
	this takes care of the Issue 194
	* clos.lisp (setf find-class): allow nil as the new-value
	this takes care of the Issue 304

2003-04-19  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): when loading clisprc, use MAKE-PATHNAME
	:DEFAULTS instead of MAKE-PATHNAME + MERGE-PATHNAMES

2003-04-19  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (kwd-arg-form): new function
	(analyze-key): use it, this fixes the 2003-03-25 patch which
	treated NIL keyword arguments as unsupplied

2003-04-18  Sam Steingold  <sds@gnu.org>

	* condition.lisp (expand-restart-case): associate when ERROR-OF-TYPE
	this takes care of the item (6) in Issue 76
	(break): bind *DEBUGGER-HOOK* to NIL
	this takes care of the Issue 91
	* clos.lisp (DOCUMENTATION): accept STRUCTURE-OBJECTs and
	STANDARD-OBJECTs - this takes care of the Issue 135
	* compiler.lisp (compile-file): accept :EXTERNAL-FORMAT argument,
	as per Issue 155

2003-04-18  Sam Steingold  <sds@gnu.org>

	* stream.d (broadcast_stream_last): new function
	(BUILT-IN-STREAM-ELEMENT-TYPE): fixed a crash with SYNONYM-STREAM
	pointing to a non-built-in stream;
	handle BROADCAST-STREAM as per Issue 21
	(STREAM-EXTERNAL-FORMAT): ditto

2003-04-16  Sam Steingold  <sds@gnu.org>

	* loadform.lisp (mlf-unquote): removed
	(mlf-init-function): use SUBLIS instead of MLF-UNQUOTE
	Reported by Christophe Rhodes <csr21@cam.ac.uk>

2003-04-18  Sam Steingold  <sds@gnu.org>

	* backquote.lisp (eval-self-p): T evaluates to itself too
	(maybe-unquote): new function - the dual for MAYBE-QUOTE
	(bq-optimize-append): avoid consing up BUTLAST twice;
	do not destructively modify input lists (suggested by Kaz)
	(bq-optimize-list*): call MAYBE-UNQUOTE instead of the
	obsolete BQ-DROP-SUPERFLUOUS-QUOTES
	(bq-drop-superfluous-quotes): removed

2003-04-10  Kaz Kylheku  <kaz@ashi.footprints.net>

	* backquote.lisp (bq-optimize-vec): New function.
	(bq-vec-expand): Use it if optimization is turned on.

2003-04-18  Sam Steingold  <sds@gnu.org>

	* encoding.d (init_encodings_2): unintern CHARSET:WINDOWS-1255 and
	CHARSET:WINDOWS-1258 when CHARSET:CP1255 and CHARSET:CP1258 are void
	Reported by Jörg Höhle <hoehle@users.sourceforge.net>

2003-04-18  Sam Steingold  <sds@gnu.org>

	* reploop.lisp (make-xterm-io-stream) [UNIX]: new function
	* clos.lisp (need-gf-already-called-warning-p): new function
	(warn-if-gf-already-called): use it
	(std-remove-method): use it and not warn on removing methods when
	*WARN-IF-GF-ALREADY-CALLED* is NIL

2003-04-17  Sam Steingold  <sds@gnu.org>

	implemented feature request #[ 723360 ]: restart keyword
	commands in debugger
	* reploop.lisp (break-loop): use restart name as the command and
	:Rnum as the abbreviation; re-align help messages

2003-04-06  Sam Steingold  <sds@gnu.org>

	* constobj.d: added hs_simple_nilvector and hs_nilvector
	* predtype.d: added enum_hs_simple_nilvector and enum_hs_nilvector
	(heap_statistics_mapper): count (VECTOR NIL) objects separately

2003-04-06  Sam Steingold  <sds@gnu.org>

	implemented ANSI CLOS class forward definition
	* clos.lisp (defclass): do not require that the parents exist
	(*finalizing-now*): new variable
	(class-finalize): new function
	(ensure-class): consider the class to exist already only if it
	has been finalized
	(finalize-instance-standard-class): move all finalizations here
	(initialize-instance-standard-class): call it
	(print-object): when printing a class object, print its
	finalization status and the number of redefinitions
	(class-finalized-p, finalize-inheritance): new MOP generics
	* constsym.d (CLASS-FINALIZE): added
	* inist.lisp (class-prototype, class-finalized-p)
	(finalize-inheritance): re-export from EXT
	* record.d (do_allocate_instance, %MAKE-INSTANCE): call
	CLASS-FINALIZE when the CLASS-PRECEDENCE-LIST is void

2003-04-05  Sam Steingold  <sds@gnu.org>

	Implemented ANSI CL ENSURE-GENERIC-FUNCTION
	* clos.lisp (ensure-generic-function): new generic function
	(*gf-warn-on-removing-all-methods*): removed
	(do-defgeneric): do not remove the existing methods;
	check signature congruence instead
	(make-instance-standard-class, make-instance-structure-class):
	use (SETF FDEFINITON) instead of DEFUN: this avoids 2 warnings,
	and should speed things up a tiny little bit
	* init.lisp (ensure-generic-function): export

2003-04-04  Sam Steingold  <sds@gnu.org>

	* pprint.lisp (pprint-logical-block): avoid a package-lock cerror
	Reported by Christophe Rhodes <csr21@cam.ac.uk>

2003-04-04  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-EVAL-WHEN): use FCASE; correctly handle
	:EXECUTE/non-top-level; :EXECUTE is now _NOT_ the same as EVAL

2003-04-04  Sam Steingold  <sds@gnu.org>

	* macros1.lisp (fcase): DEFMACRO, not DEFMACRO-SPECIAL
	so that it will also work in interpreted code

2003-04-04  Sam Steingold  <sds@gnu.org>

	implemented MAKE-INSTANCES-OBSOLETE and
	UPDATE-INSTANCE-FOR-REDEFINED-CLASS
	* clos.lisp (class): added slot ID - the number of class redefinitions
	(standard-class): added slot PREVIOUS-DEFINITION
	(obsolete-class): removed function
	(slot-difference): new function
	(ensure-class): call MAKE-INSTANCES-OBSOLETE instead of
	OBSOLETE-CLASS and allow non-trivial class redefinitions
	(initialize-instance-standard-class, <standard-object>):
	INSTANCE-SIZE now starts with 2 because of ID
	(initialize-instance-built-in-class): new function
	(make-instance-built-in-class): use it
	(*dynamically-modifiable-generic-function-names*): added
	UPDATE-INSTANCE-FOR-REDEFINED-CLASS
	(update-instance-for-different-class): use SLOT-DIFFERENCE
	(make-instances-obsolete, update-instance-for-redefined-class):
	new generic functions
	(change-class): pass T as the third argument of %CHANGE-CLASS
	* lispbibl.d (Class): added slots class_id and previous_definition
	(Instance): added slot inst_cl_id
	(instance_valid_p, check_instance): new macros
	(instanceof): call check_instance()
	* constsym.d (UPDATE-INSTANCE-FOR-REDEFINED-CLASS): added
	* hashtabl.d (sxhash_atom): call check_instance()
	(SXHASH): seclass_default bacause of that
	* init.lisp (update-instance-for-redefined-class)
	(make-instances-obsolete): export
	* predtype.d (TYPE-OF, CLASS-OF): call check_instance()
	* record.d (class_of): ditto
	(ALLOCATE-STD-INSTANCE): INSTANCE-SIZE now starts with 2 because of ID
	(%CHANGE-CLASS): accept 3rd argument do-copy-t
	(update_instance): new function
	* subr.d (SXHASH): seclass_default
	(%CHANGE-CLASS): 3 arguments

2003-04-02  Sam Steingold  <sds@gnu.org>

	* lispbibl.d, dfloat.d, ffloat.d: check DOUBLE_DIV0_EXCEPTION &c
	with defined(), not the value itself, since, as per unixconf.h,
	they are either defined to 1 or not defined at all

2003-04-02  Sam Steingold  <sds@gnu.org>

	New generic function CLOS:CLASS-PROTOTYPE from MOP
	* clos.lisp (class-prototype): implemented, exported from CLOS -
	but _not_ from COMMON-LISP
	(standard-class): added slot PROTO
	* lispbibl.d (Class): ditto

2003-04-01  Sam Steingold  <sds@gnu.org>

	implemented arrays with ARRAY-ELEMENT-TYPE NIL
	* array.d (eltype_code): return Atype_NIL for NIL argument
	(fehler_retrieve): new function
	(storagevector_aref, storagevector_store, elt_fill)
	(VECTOR-PUSH-EXTEND): barf on (VECTOR NIL)
	(fehler_store): use less stack
	(array_element_type): return NIL for Array_type_(s)nilvector
	(elt_copy, elt_move, test_displaced, MAKE-ARRAY): handle (VECTOR NIL)
	* defseq.lisp: added (VECTOR NIL), named "0"
	* io.d (ARRAY-READER): read #A(NIL dims)
	(pr_vector): print (ARRAY NIL) as #A(NIL dims)
	(pr_orecord): print Rectype_(S)nilvector with pr_vector()
	* lispbibl.d (Rectype_nilvector): new type, replaces rectype_unused1
	(Rectype_Snilvector): new record type
	(arrayflags_atype_mask): 15 now
	(Atype_NIL): new type
	(Array_type_nilvector, Array_type_snilvector): new array types
	(vectorp, simplep, array_simplep, simple_string_p, stringp)
	(arrayp): adjusted to use symbolic Rectype_*
	(if_recordp): added Rectype_(S)nilvector
	(case_Rectype_Snilvector_above, case_Rectype_nilvector_above): added
	(case_Rectype_array_above): added Rectype_(S)nilvector
	(allocate_nilvector): declare
	* sequence.d (valid_type1, get_seq_type): handle (VECTOR NIL)
	* spvw_circ.d (get_circ_mark, get_circ_unmark, subst_circ_mark)
	(subst_circ_unmark): handle (VECTOR NIL) together with other
	component-less objects
	* spvw_garcol.d (gc_mark): handle Rectype_Snilvector with
	down_nopointers() and Rectype_nilvector with down_iarray()
	* spvw_genera1.d (walk_area, build_old_generation_cache): handle
	Rectype_Snilvector with bitvectors and numbers and
	Rectype_nilvector with iarrays
	* spvw_objsize.d (objsize): handle Rectype_(S)nilvector
	* spvw_typealloc.d (allocate_nilvector): implemented
	* spvw_update.d (update_varobject): handle Rectype_(S)nilvector
	* type.lisp (upgraded-array-element-type): return NIL for NIL arg

2003-04-01  Kaz Kylheku  <kaz@ashi.footprints.net>
	    Sam Steingold  <sds@gnu.org>

	Brand new, from-scratch backquote implementation.
	* constsym.d (reading_array): New variable, corresponds to
	system::*reading-array*.
	(reading_struct): New variable, corresponds to
	system::*reading-struct*.
	(backquote_reader, comma_reader): Associate these objects with the
	symbol names of the new backquote reader functions.
	* init.lisp: Load new-backquote module rather than backquote.
	(bq-conc): New macro in SYSTEM package.
	(backquote): Macro rewritten to call the new backquote
	expander, rather than regurgitate the second argument.
	* io.d (init_reader): Define the variables *reading-array*
	and *reading-struct*.
	(read_top): Bind *reading-struct* and *reading-aray* to NIL.
	(structure_reader): Bind *reading-struct* to T.  Do not
	bind *backquote-level* to NIL.
	(array_reader): Bind *reading-array* to T. Do not
	bind *backquote-level* to NIL.
	(pr_list_bothsplice): Adjust pretty-printer to new, simplified
	syntax for SPLICE and NSPLICE.
	* backquote.lisp: Rewrote from scratch.

2003-04-01  Sam Steingold  <sds@gnu.org>

	Export struct slot accessors
	* modules/bindings/linuxlibc6/linux.lisp (exporting-slots):
	new local macro, used for def-c-struct
	Suggested by Pascal Bourguignon <pjb@informatimago.com>
	(stdin, stdout, stderr): simple foreign variables (def-c-var)
	Reported by Jörg Höhle

2003-03-31  Bruno Haible  <bruno@clisp.org>

	* runprog.lisp (shell-quote) [UNIX]: Handle empty argument correctly.
	(shell-quote) [WIN32]: Handle argument containing spaces and ending in
	a backslash correctly.

2003-03-30  Sam Steingold  <sds@gnu.org>

	* spvw.d (init_symbol_values): define_variable's
	*LOAD-COMPILING*, *LOAD-VERBOSE*, *LOAD-PRINT*, *COMPILE-PRINT*.
	(usage): mention `-v'
	(main): accept -v(erbose).
	* constsym.d (*LOAD-PRINT*, *COMPILE-PRINT*): added
	* _clisp.c: accept -v

2003-03-30  Sam Steingold  <sds@gnu.org>

	* regexp.lisp (cflags, eflags): new macros
	(cflags-max): new constant
	(regexp-compile): accept extended/case-sensitive/newline/nosub/cflags
	&key arguments instead of an &optional argument case-sensitive;
	added a compiler macro to pre-compute cflags when possible
	(regexp-exec): accept notbol/noteol/eflags &key arguments
	added a compiler macro to pre-compute eflags when possible
	(optimize-flags): new function, pre-compute cflags & eflags for
	compiler macros for the following functions:
	(match-once, %match, regexp-split): accept both notbol/noteol/eflags
	and extended/case-sensitive/newline/nosub/cflags &key arguments;
	added compiler macros to pre-compute cflags & eflags when possible
	(with-loop-split): accept both notbol/noteol/eflags and
	extended/case-sensitive/newline/nosub/cflags &key arguments
	(regexp-quote): accept an &optional extended argument
	Suggested by Pascal Bourguignon <pjb@informatimago.com>
	(*system-package-list*): push "REGEXP", i.e., REGEXP is now locked

2003-03-29  Sam Steingold  <sds@gnu.org>

	solidified updating back_trace callers [cygwin build fix]
	* spvw.d (for_all_back_traces): new macro
	* spvw_update.d (update_back_traces): new macro
	* spvw_garcol.d, spvw_memfile.d: use it for all updating

2003-03-29  Sam Steingold  <sds@gnu.org>

	* condition.lisp (restart-case, with-restarts): macroexpand
	`restartable-form' to associate the restarts with this condition

2003-03-28  Sam Steingold  <sds@gnu.org>

	do not print system structure definitions
	do print full prototype for built-in functions
	* foreign.d (C_STRUCT_SLOTS): define to 3
	* foreign1.lisp (parse-components, c-struct-constructor): C-STRUCT
	now has options, so slots start at CDDDR
	(parse-c-type): init name and options for C-STRUCT
	(deparse-c-type): extract name and options for C-STRUCT
	(to-c-typedecl): structures may be :EXTERNAL and :TYPEDEF
	(finalize-coutput-file): print full prototype for :BUILT-IN functions
	(def-call-out): recognize :BUILT-IN keyword
	(note-c-fun): save :BUILT-IN status
	* modules/bindings/linuxlibc6/linux.lisp (exporting): struct name
	maybe a list of name and options
	(div_t, ldiv_t): :TYPEDEF
	(cosf, sinf, sqrtf, fabsf): BUILT-IN
	(passwd): :EXTERNAL after "#include <pwd.h>"
	(group): :EXTERNAL after #include <grp.h>"
	Based on a patch by Dan Knapp

2003-03-27  Sam Steingold  <sds@gnu.org>

	* stream.d (history_last): new function
	(rd_ch_terminal3): use it instead of
	where_history()/previous_history() &c &c

2003-03-26  Sam Steingold  <sds@gnu.org>

	* condition.lisp (restart): use CLOS:PRINT-OBJECT
	(print-restart): removed
	(applicable-restart-p): CONDITION may be NIL
	(compute-restarts, find-restart): even when CONDITION is NIL,
	APPLICABLE-RESTART-P has to be called
	(with-simple-restart): fixed the optimized case

2003-03-25  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (get-supplied-p): new function
	(analyze-key, analyze1): use it
	(analyze-key): do not evaluate the init form when the argument
	has been supplied
	Reported by Christophe Rhodes <csr21@cam.ac.uk>

2003-03-24  Sam Steingold  <sds@gnu.org>

	* package.d (SYMBOL-VALUE-LOCK): return T only when the package
	is locked (helps SBCL bootstrap)

2003-03-22  Sam Steingold  <sds@gnu.org>

	* configure (--edit-config): new option (for --build & --install)

2003-03-18  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): allow multiple -x options
	-repl forces REPL after -c/-x/exec
	option "--" terminates option processing; set *ARGS* earlier
	* _clisp.c (main): "-r" for "-repl"

2003-03-14  Sam Steingold  <sds@gnu.org>

	function (SETF FFI:VALIDP) invalidates foreign objects
	* foreign.d (SET-VALIDP): implemented
	* foreign1.lisp (validp): added a defsetf
	* subr.d, constsym.d (set_validp): added

2003-03-14  Sam Steingold  <sds@gnu.org>

	extract and modify the FOREIGN-POINTER anchor
	* foreign.d (foreign_pointer_strict): new function
	(FOREIGN-POINTER, SET-FOREIGN-POINTER): implemented
	(foreign_address): barf on non-foreign and possibly on FOREIGN-POINTER
	* foreign1.lisp (foreign-pointer): added a defsetf
	* lispbibl.d (Faddress): fa_offset is signed
	* subr.d, constsym.d (foreign_pointer, set_foreign_pointer): added

2003-03-12  Sam Steingold  <sds@gnu.org>

	* makemake.in: win32msvc mean either msvc4 or msvc5 or msvc7 (.NET)
	* Makefile.devel (makefiles): added win32msvc/makefile.msvc7
	(win32msvc/makefile.msvc7): new target
	* win32.d: undef `unused' around `#include <windows.h>' for MSVC
	Suggested by Jay Kint <jkint@icosahedron.org>

2003-01-31  Jörg Höhle  <hoehle@users.sourceforge.net>

	patch #[ 678216 ]: FFI:WITH-FOREIGN-STRING
	* foreign.lisp (with-foreign-string): store string on C stack
	using any encoding
	* foreign.d (call_with_foreign_string): ditto
	* subr.d, constsym.d (call_with_foreign_string): added
	* type.lisp (encoding-zeroes): how many terminating \0 bytes does
	one expect when working with character of encoding X?
	4 for UTF-32, 2 for UTF-16, 1 for UTF-8 or ISO-8859-1 etc.
	* encoding.d (fehler_encoding): moved to error.d
	* lispbibl.d (fehler_encoding): prototype

2003-03-11  Sam Steingold  <sds@gnu.org>

	added EXT:MODULE-INFO for module information extraction
	* spvw_module.d (find_module, modules_names_to_stack): implemented
	* lispbibl.d (find_module, modules_names_to_stack): declared
	* misc.d (MODULE-INFO): implemented
	* constsym.d, subr.d (module_info): added
	* init.lisp (MODULE-INFO): export
	* modules.d (MODULE): cannot use STRING() because module_name may
	be a CPP macro, e.g., for the "linux" module, module name was "1"

2003-03-12  Jörg Höhle  <hoehle@users.sourceforge.net>

	* time.d (get_real_time) [TIME_WIN32]: use
	GetSystemTimeAsFileTime(), not ftime()

2003-03-11  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 543072 ]: make-encoding :input-action on bad input (again)
	* encoding.d (fehler_buffer_parity): new function
	(uni16_mblen): check that the input buffer has even length
	(uni16be_mbstowcs, uni16le_mbstowcs): barf when the input has an
	odd number of bytes (use fehler_buffer_parity)
	(uni32be_mblen, uni32le_mblen): check that the input buffer
	length is divisible by 4
	(uni32be_mbstowcs, uni32le_mbstowcs): barf when the input length
	is not divisible by 4 (use fehler_buffer_parity)

2003-03-11  Sam Steingold  <sds@gnu.org>

	* foreign.d (fehler_foreign_object, foreign_address)
	(foreign_pointer): new functions
	(VALIDP): use foreign_pointer()
	(FOREIGN-ADDRESS): new function (suggested by Joerg)
	(FOREIGN-FREE): use fehler_foreign_object()
	* foreign1.lisp (foreign-value, foreign-address)
	(foreign-address-unsigned, unsigned-foreign-address): export
	* subr.d (foreign_address): added
	(validp, unsigned_foreign_address, foreign_address_unsigned):
	seclass_read
	* describe.lisp (describe-object): DEPARSE-C-TYPE is in FFI

2003-03-10  Jörg Höhle  <hoehle@users.sourceforge.net>
	    Sam Steingold  <sds@gnu.org>

	FFI heap allocation interface
	* foreign.d (FOREIGN-ALLOCATE, FOREIGN-FREE): heap memory (de)alloc
	* subr.d, subrkw.d, constsym.d (foreign_allocate, foreign_free): added
	* foreign1.lisp (allocate-deep, allocate-shallow): new macros

2003-03-08  Sam Steingold  <sds@gnu.org>

	* list.d (cons_from_stack): new function
	(CONS, copy_tree, subst, sublis, ACONS): use it
	(LIST): use listof
	(APPEND, reverse, nreverse, nreconc, COPY-ALIST, REVAPPEND)
	(NRECONC, sublis_assoc, memq, PAIRLIS, assoc, rassoc):
	barf on dotted lists, as per ANSI
	(memq1): removed
	* list.d, subr.d (MEMQ): seclass_read
	* constsym.d (PLIST): added
	* type.lisp (PLIST): new type
	* symbol.d (fehler_sym_plist_odd, fehler_plist_odd): type_error
	(get, GETF, %PUTF, %REMF, GET-PROPERTIES, PUT, REMPROP):
	barf on dotted plists, as per ANSI

2003-03-07  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* spvw.d (main) [WIN32_NATIVE]: init SYS::*PRIN-LINELENGTH* to
	console width - 1.

2003-03-07  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (assure_dir_exists) [WIN32_NATIVE]: bug fixed:
	should raise an error when part of directory is an existing
	file.

2003-03-03  Peter Seibel  <peter@javamonkey.com>
	    Sam Steingold  <sds@gnu.org>

	* charstrg.d, compelem.d, comptran.d, control.d, dfloat.d, eval.d:
	* ffloat.d, foreign.d, intdiv.d, intlog.d, intplus.d, intsqrt.d:
	* io.d, package.d, pathname.d, sfloat.d, socket.d, stream.d:
	phase-0 of d2c conversion: put braces where C99 requires them

2003-03-01  Sam Steingold  <sds@gnu.org>

	* makemake.in: fixed the 1.269 (2002-07-19) patch: check
	LIBTERMCAP and --with-termcap-ncurses after XCFLAGS is set,
	so that -DNO_TERMCAP_NCURSES is not overridden

2003-02-28  Sam Steingold  <sds@gnu.org>

	ANSI CL compliance issues
	* clos.lisp (generic-function): commented out the macro definition:
	GENERIC-FUNCTION is a TYPE (and a COMMON-LISP symbol) in ANSI CL,
	but not a macro, so this definition violates the standard
	* type.lisp (canonicalize-type): canonicalize MOD, SIGNED-BYTE,
	and UNSIGNED-BYTE to an inclusive interval
	* macros2.lisp (times): renamed from SPACE because SPACE is an
	ANSI Common Lisp symbol without a macro definition
	* init.lisp (times): export from EXT

2003-02-28  Sam Steingold  <sds@gnu.org>

	* io.d (PARSE-INTEGER): seclass_read
	print the error index on badsyntax
	* subr.d (parse_integer): seclass_read

2003-02-27  Sam Steingold  <sds@gnu.org>

	* describe.lisp (describe-object): print additional information
	for strings (using STRING-INFO)

2003-02-25  Sam Steingold  <sds@gnu.org>

	* makemake.in (*.mem): do not dump images if LOAD "init" failed

2003-02-27  Sam Steingold  <sds@gnu.org>

	detect side-effect class of some compiled closures
	* lispbibl.d (cclosure_flags, Cclosure_flags, Cclosure_seclass)
	(Cclosure_set_seclass): new macros
	(seclass_t): new enum class (instead of sclass_* bits)
	(allocate_closure): accept flags argument
	(allocate_cclosure_copy): ditto
	(seclass_object): map seclass_t to seclass_* objects
	* record.d (parse_seclass): new function
	(%make-closure): accept 4th argument - seclass
	(CLOSURE-SET-SECLASS): new function for updating the side-effect
	class of generic functions
	* constsym.d, subr.d (closure_set_seclass): added
	* clos.lisp (%make-gf): pass seclass to %MAKE-CLOSURE
	(std-add-method, std-remove-method): update the side-effect class
	of the generic function
	* compiler.lisp (make-closure): pass seclass to %MAKE-CLOSURE
	(seclass-or): removed
	(seclass-or-2): renamed to SECLASS-OR, handle NIL
	(seclass-without): handle NIL
	(anodes-seclass-or, anodelist-seclass-or): reduce consing
	(f-side-effect): new function: look at *known-functions*
	before fdefiniton
	(c-DIRECT-FUNCTION-CALL): updated FUNCTION-SIDE-EFFECT call
	(c-GLOBAL-FUNCTION-CALL): use FUNCTION-SIDE-EFFECT instead of a table
	(c-NORMAL-FUNCTION-CALL, c-LAMBDABODY, c-MULTIPLE-VALUE-CALL)
	(c-FUNCALL-NOTINLINE, c-APPLY): check the side-effect class
	(c-DEFUN, compile-lambdabody, match-known-unknown-functions):
	keep seclass in *known-functions*
	(create-fun-obj): pass seclass to MAKE-CLOSURE
	* type.lisp (class-name): added a temporary definition
	* control.d (form_constant_p): handle cclosures
	(FUNCTION-SIDE-EFFECT): return seclass object instead of 3 values;
	never signal an error, just return (T . T)
	* eval.d (get_closure): pass the extra arg to allocate_closure()
	* io.d (CLOSURE-READER): expect seclass before constants
	(pr_cclosure_lang): print seclass before constants
	* VERSION, version.h: bump
	* constobj.d (version): bump (because of %MAKE-CLOSURE)
	(seclass_no_se, seclass_read, seclass_write, seclass_default): added

2003-02-24  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-DIRECT-FUNCTION-CALL): use
	FUNCTION-SIDE-EFFECT instead of an explicit table
	* control.d (form_constant_p): new function
	(CONSTANTP): use it; all self-eval forms are constants (ANSI)
	(FUNCTION-SIDE-EFFECT): implemented
	* constsym.d, subr.d (function_side_effect): added
	* lispbibl.d (subr_t): new slot `seclass' (instead of the
	dummy padding)
	(seclass_foldable, seclass_read, seclass_write, seclass_default)
	(seclass_no_se): new macros
	* subr.d (LISPFUN): accept 8 arguments (added seclass);
	updated all declarations
	* genclisph.d (LISPFUN): ditto
	* affi.d, array.d, charstrg.d, control.d, debug.d, dirkey.d,
	* encoding.d, error.d, eval.d, foreign.d, i18n.d, io.d,
	* lisparit.d, list.d, misc.d, package.d, pathname.d, posixmath.d,
	* predtype.d, record.d, rexx.d, sequence.d, socket.d, stream.d,
	* symbol.d, time.d, zthread.d: updated all LISPFUN headers

2003-02-23  Sam Steingold  <sds@gnu.org>

	* check-lispfun.lisp (get-lisp-def): return the name of the form
	as well as the arguments as two values
	(*const-decls*): new variable
	(get-lisp-defs): take all LISP* forms
	(check-lisp-defs): exclude *const-decls* files
	(write-subrs): new function

2003-02-20  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (destructuring-error): as per CLHS 3.5.1.7, signal
	a PROGRAM-ERROR, not an ERROR

2003-02-17  Sam Steingold  <sds@gnu.org>

	* charstrg.d (hex_table): const
	* spvw_debug.d (hex_table): const
	* spvw_memfile.d (memflags): const
	* stream.d (vktable, attr_table): const
	* encoding.d, utils/unicode/nls_table.c:
	renamed nls_table to nls_table_t
	* spvw_alloca.d: renamed malloca_header to malloca_header_t
	* spvw_multimap.d: renamed mmap_interval to mmap_interval_t

2003-02-17  Sam Steingold  <sds@gnu.org>

	* type.lisp (encoding-charset): removed (this completes the
	2002-05-21 patch)

2003-02-16  Sam Steingold  <sds@gnu.org>

	* type.lisp (with-interval-designators): new macro
	(interval-mix, interval-mix-not, canonicalize-type, subtypep): use it

2003-02-16  Sam Steingold  <sds@gnu.org>

	* cmacros.lisp (define-compiler-macro): pass non-NIL as the 3rd
	argument of SYS::CHECK-REDEFINITION only when actually redefining
	* clos.lisp (analyze-method-description): ditto

2003-02-15  Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (defstruct): permit keywords as structure names

2003-02-15  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* src/makemake.in (CFLAGS) [win32msvc]: do not use optimization
	when debugging. Use enviroinment variable MSVCDIR to avoid manual
	editing.
	* win32msvc/makefile.msvc5d - new file - MSVC debug makefile.
	* Makefile.devel (win32msvc/makefile.msvc5d): new target.

2003-02-14  Sam Steingold  <sds@gnu.org>

	never compare types using EQUAL!
	* type.lisp (interval-mix): handle integers better by making AND
	intervals inclusive and OR intervals exclusive
	(interval-mix-not, simplify-and-or): new functions
	(canonicalize-type): (MEMBER 1 2 3) --> (INTEGER 1 3)
	(subtypep): types staring with AND, OR &c are undecidable

2003-02-14  Sam Steingold  <sds@gnu.org>

	* macros2.lisp (typecase): OTHERWISE must be the last clause to
	be considered an "otherwise clause"

2003-02-14  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 678194 ]: symbol-macrolet not always expanded
	* eval.d (parse_dd): do not macroexpand the potential
	declarations and docstrings (as per ANSI CL)

2003-02-13  Sam Steingold  <sds@gnu.org>

	* stream.d (create_input_pipe, create_output_pipe, create_io_pipe):
	wrap child creation in begin_want_sigcld()/end_want_sigcld(),
	just like it is done in EXECUTE
	Reported by Kaz Kylheku <kaz@ashi.footprints.net>
	(MAKE-STRING-PUSH-STREAM): fixed error message arguments

2003-02-13  Sam Steingold  <sds@gnu.org>

	* io.d (PARSE-INTEGER): signal a PARSE-ERROR on bad syntax and
	report only the substring being parsed, not the whole string
	Reported by Jörg Höhle

2003-02-13  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 685855 ]: ext:string-width ignores :start
	* charstrg.d (STRING-WIDTH): start with :START, not 0
	* stream.d (MAKE-STRING-INPUT-STREAM): respect both index and offset

2003-02-10  Sam Steingold  <sds@gnu.org>

	Do not treat #\/ in logical pathnames as #\;
	* pathname.d (lslashp): reintroduced
	(slashp): removed
	(parse_logical_word, parse_logical_pathnamestring):
	use lslashp() instead of slashp()
	(PARSE-NAMESTRING): use pslashp() instead of slashp()
	(ensure_last_slash): check both pslashp() and lslashp()

2003-02-09  Sam Steingold  <sds@gnu.org>

	* debug.d (break_driver): unbind *TERMINAL-READ-OPEN-OBJECT*,
	just like *TERMINAL-READ-STREAM*
	* reploop.lisp (break-loop): ditto

2003-02-09  Sam Steingold  <sds@gnu.org>

	* modules/bindings/linuxlibc6/linux.lisp (__ctype_get_mb_cur_max):
	returns size_t
	(errno): commented out (neither method works)
	(initstate, setstate): statebuf is a C-STRING, not a C-POINTER
	(seed48): seed16v is a C-ARRAY, not a (C-PTR (C-ARRAY ...))
	(unsetenv): return int
	(realpath): return C-STRING
	(execv, execve, execvp): added
	Thanks to Dan Knapp, John K. Hinsdale, and Jörg Höhle

2003-02-09  Sam Steingold  <sds@gnu.org>

	fixed EXT:MAPLAP, EXT:MAPCAP, MAPCAN and MAPCON in compiled code
	* compiler.lisp (copy-list-lax): new inline function
	(c-MAP-on-CARs, c-MAP-on-LISTs): use forward consing for
	EXT:MAPLAP, EXT:MAPCAP, MAPCAN and MAPCON

2003-02-08  Sam Steingold  <sds@gnu.org>

	brought EXT:MAPLAP and EXT:MAPCAP in line with MAPCAN and MAPCON
	* control.d (set_last_inplace, set_last_copy): new functions
	(MAPCAN_MAPCON_BODY): accept `append_function' arg
	(MAPCAN, MAPCON): pass it
	(MAPCAP, MAPLAP): implemented using MAPCAN_MAPCON_BODY()
	* constsym.d, subr.d (mapcan, mapcon): added
	* init.lisp (MAPCAP, MAPLAP): export
	* macros1.lisp (MAPCAP, MAPLAP): removed

2003-02-07  Sam Steingold  <sds@gnu.org>

	MAPCAN and MAPCON now correctly handle functions returning ATOMs
	* control.d (MAPCAR_MAPLIST_BODY) [!MAP_REVERSES]: do not create
	an extra cons; this is now the default method
	(MAPCAN_MAPCON_BODY) [MAP_REVERSES]: removed (cannot handle ATOMs)
	[!MAP_REVERSES]: do not create an extra cons
	see also the 2002-11-28 loop.lisp patch

2003-02-07  Sam Steingold  <sds@gnu.org>

	* list.d (endp): made global
	* lispbibl.d (endp): added the prototype
	* control.d (ENDP): removed
	(MAPCAR_MAPLIST_BODY, MAPC_MAPL_BODY, MAPCAN_MAPCON_BODY):
	use endp() instead of ENDP

2003-02-06  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out): return the object argument
	(back_trace_out): use STACK_item_count() instead of STACK_diff()
	* spvw.d (main): ditto
	* lispbibl.d (nobject_out): updated the prototype
	(STACK_diff): removed

2003-02-05  Sam Steingold  <sds@gnu.org>

	turned FCASE into a special form, just like CASE
	* macros1.lisp (fcase): defmacro-special
	* compiler.lisp (c-form-table): FCASE --> c-CASE
	(c-CASE): handle FCASE

2003-02-04  Sam Steingold  <sds@gnu.org>

	* clos.lisp (class): new slot DIRECT-SUBCLASSES
	(obsolete-class): new function
	(ensure-class): use it
	(initialize-instance-standard-class, make-instance-built-in-class)
	(initialize-instance-structure-class): update DIRECT-SUBCLASSES of
	the DIRECT-SUPERCLASSES of this class
	* lispbibl.d (Class): new slot direct_subclasses
	* clos.lisp (class-and): new function
	* type.lisp (canonicalize-type): use it

2003-02-04  Sam Steingold  <sds@gnu.org>

	* type.lisp (type-class, %standard-char-p)
	(valid-interval-designator-p, interval-mix): new functions
	(STANDARD-CHAR): use %STANDARD-CHAR-P to define
	(canonicalize-type): STANDARD-CHAR -> use %STANDARD-CHAR-P
	to avoid errors
	AND/OR -> more rigorous attempts to simplify
	REALs -> check interval designators
	CONS -> check components

2003-02-04  Sam Steingold  <sds@gnu.org>

	* array.d (bit_up): fixed a GC-safety bug: allocation invalidates
	dimptr (a pointer inside an Iarray structure) [this bug have
	never triggered before because, as the 2003-01-31 indicates, this
	code has never been used since it was written!]

2003-02-04  Jörg Höhle  <hoehle@users.sourceforge.net>
	    Sam Steingold  <sds@gnu.org>

	fixed bug #[ 679661 ]: FFI segfault passing struct arrays
	* foreign.d (count_walk_pre): C-ARRAY-PTR should reserve room
	for the array argument

2003-02-03  Sam Steingold  <sds@gnu.org>

	EXT:XOR checks that exactly one of its arguments is non-NIL
	* control.d (XOR): implemented
	* init.lisp (XOR): exported
	* constsym.d, subr.d (xor): added

2003-02-02  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out): handle pathnames and some special
	objects, like `nullobj' and `unbound'; fflush out; do not print
	package prefix for keywords

2003-02-01  Sam Steingold  <sds@gnu.org>

	* io.d (read_delimited_list): fixed a crash introduced by the
	2003-01-21 "multiple forms on one line" patch: need to unbind
	*TERMINAL-READ-OPEN-OBJECT* even if *TERMINAL-READ-STREAM* changed

2003-01-31  Sam Steingold  <sds@gnu.org>

	* type.lisp (typep, subtypep): accept &optional environment,
	as per ANSI CL spec
	* compiler.lisp (c-TYPEP): ditto

2003-01-31  Sam Steingold  <sds@gnu.org>

	* array.d (bit_up): fixed multi-dimensional array handling

2003-01-31  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 678105 ]: unchecked :start/end in
	ext:convert-string-from/to-bytes
	* encoding.d (CONVERT-STRING-FROM-BYTES): use test_vector_limits()
	to check :START/:END arguments
	(CONVERT-STRING-TO-BYTES): use test_string_limits_ro()
	to check :START/:END arguments
	* charstrg.d (test_vector_limits): extracted from
	test_string_limits_ro()
	(test_string_limits_ro): use it
	* lispbibl.d (test_vector_limits): declare

2003-01-29  Sam Steingold  <sds@gnu.org>

	SOCKET-STATUS on lists does not have to cons
	* stream.d (parse_sock_list): new function
	(handle_set, handle_isset): use it
	(SOCKET-STATUS): do not cons if the list provides places for the STATUS
	return the number of actionable streams as the second values

2003-01-29  Sam Steingold  <sds@gnu.org>

	upgraded to autoconf-2.57
	* Makefile.devel, ffcall/Makefile.devel (AUTOCONF_VERSION): removed
	(AUTOCONF, AUTOCONF_CACHE): do not depend on it

2003-01-25  Sam Steingold  <sds@gnu.org>

	* stream.d (handle_isset): increased granularity of
	SOCKET-STATUS: distinguish between EOF and INPUT for READ

2003-01-28  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* src/m4/as-underscore.m4, ffcall/m4/as-underscore.m4
	(CL_AS_UNDERSCORE) [__cplusplus]: declare test function
	as extern "C".

2003-01-24  Sam Steingold  <sds@gnu.org>

	READ-BYTE-SEQUENCE now accepts :NO-HANG keyword argument
	* stream.d (rd_by_array_Pseudofun, rd_by_array_error)
	(rd_by_array_dummy, read_byte_array, rd_by_array_synonym)
	(rd_by_array_concat, rd_by_array_twoway, rd_by_array_echo)
	(strm_unbuffered_extrafields_t/low_read_array)
	(low_read_array_unbuffered_handle, rd_by_array_iau8_unbuffered)
	(strm_buffered_extrafields_t/low_fill, low_fill_buffered_handle)
	(buffered_nextbyte, read_byte_array_buffered)
	(rd_by_array_iau8_buffered, low_read_array_unbuffered_socket)
	(low_fill_buffered_socket): accept no_hang
	(listen_handle): extracted from low_listen_unbuffered_handle()
	(low_listen_unbuffered_handle): use listen_handle()
	(rd_by_aux_iax_unbuffered, rd_ch_array_unbuffered): pass
	no_hang=false to UnbufferedStreamLow_read_array()()
	(buffered_writebyte, position_file_buffered)
	(write_byte_array_buffered, rd_ch_buffered, listen_char_buffered)
	(rd_ch_array_buffered, position_file_i_buffered)
	(rd_by_aux_iax_buffered, rd_by_aux_ibx_buffered)
	(rd_by_aux_icx_buffered, rd_by_iau8_buffered)
	(listen_byte_ia8_buffered, WRITE_LAST_BYTE, wr_by_aux_ib_buffered)
	(wr_by_aux_ic_buffered, logical_position_file_end)
	(make_file_stream): pass no_hang=false to buffered_nextbyte()
	(READ-N-BYTES, READ-INTEGER, READ-FLOAT): pass no_hang=false
	to read_byte_array()
	* pathname.d (copy_file_low): ditto
	* sequence.d (READ-BYTE-SEQUENCE): accept :NO-HANG
	* subr.d, subrkw.d (READ-BYTE-SEQUENCE): ditto
	* gray.lisp (STREAM-READ-BYTE-SEQUENCE): ditto
	* constsym.d (:NO-HANG): added
	* unix.d (sock_read): define to read_helper(,,,true)

2003-01-23  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (arrayrank_limit_1): set to lp_limit_1 because
	array_dimensions() pushes the dimensions on the STACK

2003-01-23  Sam Steingold  <sds@gnu.org>

	* type.lisp (upgraded-array-element-type): accept an &optional
	environment argument, as per ANSI CL
	(subtypep): fixed a typo (quote '(and))

2003-01-23  Sam Steingold  <sds@gnu.org>

	* _clisp.c (main): -B specifies where -K is looked for
	* spvw.d (main): --help prints *CURRENT-LANGUAGE* and *LIB-DIRECTORY*

2003-01-21  Sam Steingold  <sds@gnu.org>

	permit multiple forms in one line of interactive input
	* reploop.lisp (break-loop): makunbound *TERMINAL-READ-STREAM*
	when clearing *DEBUG-IO*
	* debug.d (break_driver): ditto
	(read_form): do not discard unprocessed input after the first form
	in the first line (in *TERMINAL-READ-STREAM*)

2003-01-21  Mirian Crzig Lennox  <mirian@cosmic.com>

	* backquote.lisp, defmacro.lisp: translated all comments

2003-01-19  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Make clisp compiling on cygwin with g++
	* avl.d (AVL(AVLID,delete1)): legalize goto for CC=g++
	* spvw_garcol.d (free_some_unused_pages): explicit typecast
	* spvw_allocate.d (make_space_gc): modern definition, explicit typecast
	* lispbibl.d: don't define setjmp, longjmp as  _setjmp, _longjmp
	* spvw_memfile (offset_pages_t): new type
	(loadmem_from handle): use it in explicit typecast

2003-01-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (allocate_weakkvt): DON'T USE LOCAL VARIABLES OF TYPE
	gcv_object_t.
	* hashtabl.d (prepare_resize): Likewise.
	* spvw_typealloc.d (allocate_weakkvt_low, allocate_weakkvt): Likewise.

2003-01-16  Sam Steingold  <sds@gnu.org>

	do not bind slot names (which may be special variables) in keyword
	constructors
	* defstruct.lisp: DS-SLOT vector now has a new slot - VAR
	(make-ds-slot): init VAR
	(ds-slot-var): new function
	(ds-make-constructor-body): accept a GET-VAR argument
	(ds-make-boa-constructor): pass #'DS-SLOT-NAME to
	ds-make-constructor-body
	(ds-make-keyword-constructor): pass #'DS-SLOT-VAR to
	ds-make-constructor-body

2003-01-14  Stefan Kain  <stefan.kain@freenet.de>

	* defstruct.lisp: translated all comments

2003-01-14  Sam Steingold  <sds@gnu.org>

	* defstruct.lisp (ds-make-constructor-body): optimize LIST
	structures just like the VECTOR ones

2003-01-12  Sam Steingold  <sds@gnu.org>

	* spvw_typealloc.d (reallocate_small_string): do not create the
	hole (and do not plug it) because both this object and the
	possible hole/plug will be collected during the next GC

2003-01-09  John  Hinsdale <hin@alma.com>

	* modules/fastcgi/*: new add-in module for FastCGI interface

2003-01-09  Sam Steingold  <sds@gnu.org>

	implemented CHANGE-CLASS and UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
	* clos.lisp (change-class, update-instance-for-different-class):
	implemented
	* init.lisp (change-class, update-instance-for-different-class):
	export
	* constsym.d, subr.d (pchange_class): added
	* lispbibl.d (Rectype_realloc_Instance): new record type
	(instance_un_realloc): new macro
	(instancep): handle Rectype_realloc_Instance
	(instanceof): make into a function and call instance_un_realloc()
	(case_Rectype_Instance_above): include Rectype_realloc_Instance
	* hashtabl.d (sxhash_atom): un_realloc instances
	* predtype.d (TYPE-OF, CLASS-OF): ditto
	* spvw_garcol.d (GC_MARK, down_record): ditto
	* io.d (pr_orecord): handle Rectype_realloc_Instance
	* record.d (class_of, ptr_to_slot): make into a function and call
	instance_un_realloc()
	(%CHANGE-CLASS): implemented

2003-01-08  Sam Steingold  <sds@gnu.org>

	* stream.d (GENERIC-STREAM-P, BUILT-IN-STREAM-OPEN-P)
	(INPUT-STREAM-P, OUTPUT-STREAM-P, STREAM-ELEMENT-TYPE-EQ):
	use VALUES_IF

2003-01-06  Sam Steingold  <sds@gnu.org>

	some more work on MT: added stubs for functions,
	WITH-TIMEOUT almost works
	* zthread.d: new file - for the actual functions implementations
	(CALL-WITH-TIMEOUT): almost works
	* thread.lisp: renamed threads to processes to comply with CMUCL &c
	(WITH-TIMEOUT): use CALL-WITH-TIMEOUT
	* subr.d, constsym.d [MULTITHREAD]: added thread functions
	* makemake.in: added zthread.d
	* stream.d (sec_usec): made global for use in zthread.d
	* lispbibl.d (current_thread): made static (compiles with -g now)
	* xthread.d (xcondition_timedwait, xthread_cancel): added

2003-01-04  Sam Steingold  <sds@gnu.org>

	* hashtabl.d (%SET-HASH-TABLE-WEAK-P): a variable cannot have
	type gcv_object_t
	* makemake.in (check-sources): the target fails iff egrep succeeds

2003-01-04  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Get rid of some scary warnings
	* stream.d (wr_ch_array_window) [WIN32_NATIVE]: use uintB, not char
	* win32.d: undef SEEK_SET, SEEK_CUR, SEEK_END before redefining

2003-01-04  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fix mingw compilation
	* pathname.d (resolve_shell_shortcut) [WIN32_NATIVE]: use number
	instead of missing SLGP_RAWPATH, cast to void - avoid a warning.
	(TrueName) [WIN32_NATIVE]: inline isalpha.
	* win32aux.d (MyCreateProcess): fix declaration.
	(abort): call exit to avoid a warning.

2003-01-03  Stefan Kain  <stefan.kain@freenet.de>

	* lisparit.d, intelem.d, dfloat.d, lfloat.d: translated all comments

2003-01-03  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* src/makemake.in (init): do not include floatparam.h and
	intparam.h in the init rule for win32.

2003-01-03  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fix MSVC compilation without libsigsegv
	* spvw.d (main) [WIN32_NATIVE]: do not init SP_bound when
	NO_SP_CHECK - SP_bount is not declared.

2003-01-02  Sam Steingold  <sds@gnu.org>

	* lispbibl.d [WIDE_HARD]: treat UNIX_NETBSD on DECALPHA just like
	UNIX_OSF, UNIX_LINUX and UNIX_FREEBSD
	From Indrayana Rustandi <i_rustandi@yahoo.com>

2002-12-24  Sam Steingold  <sds@gnu.org>

	added VALUE, EITHER and BOTH weak hash tables
	* hashtabl.d (prepare_resize): weak argument is now an object
	(check_weak): new function
	(MAKE-HASH-TABLE, %SET-HASH-TABLE-WEAK-P): use it
	(hash_lookup): value may be obsoleted too
	* constobj.d (type_weak_ht): added
	* constsym.d (Kboth, Keither, Kvalue): added
	* io.d (pr_orecord): print ht_weak() for weak hash tables
	(pr_weakkvt): print wkvt_type
	* lispbibl.d (ht_weak): new macro
	(weakkvt_t): added wkvt_type slot
	* spvw_garcol.d (gar_col_normal): handle the new types of weak
	hash tables
	* spvw_typealloc.d (allocate_weakkvt, allocate_weakkvt_low):
	accept a second argument - the wkvt_type

2002-12-24  Sam Steingold  <sds@gnu.org>

	* foreign.d (FOREIGN-CALL-OUT): fixed argument order in the call
	to fehler_too_few_args()

2002-12-23  Sam Steingold  <sds@gnu.org>

	DOCUMENTATION is now a generic function
	* clos.lisp (ensure-class): use SYS::%SET-DOCUMENTATION explicitly
	(analyze-method-description): pass the method object to
	CHECK-REDEFINITION when possible
	(documentation, (setf documentation)): new generic functions
	* defs2.lisp (defpackage): remember documentation string
	* defstruct.lisp (defstruct): use SYS::%SET-DOCUMENTATION explicitly
	* macros2.lisp (deftype): ditto
	* describe.lisp (describe1): print all documentation
	* places.lisp (documentation, %SET-DOCUMENTATION): removed
	* init.lisp (*documentation*): new variable
	(%set-documentation): implemented
	(check-redefinition): save and check the SYS::FILE docstring

2002-12-22  Sam Steingold  <sds@gnu.org>

	* symbol.d (%PUTF): when the place is a cons, modify it in-place

2002-12-21  Sam Steingold  <sds@gnu.org>

	* makemake.in (LIBSIGSEGV): init to @LTLIBSIGSEGV@ (-L/... -lsigsegv)
	instead of @LIBSIGSEGV@ (/.../libsigsegv.a) because this value
	gets into LIBS and from there into distmakefile and breaks that

2002-12-21  Sam Steingold  <sds@gnu.org>

	* makemake.in (--without*): escape "(|)" in sed RE with #\\
	now handles --with-noreadline correctly
	(my_eval): new function

2002-12-20  James Chacon  <jmc@netbsd.org>
	    Sam Steingold  <sds@gnu.org>

	applied NetBSD patches: do not assume r11 is free on PowerPC
	<http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/lang/clisp/patches/>
	* lispbibl.d (RS6000) [__powerpc__]: define
	* ffcall/avcall/Makefile.in: use linux syntax for netbsd
	* ffcall/vacall/Makefile.in: ditto
	* ffcall/callback/vacall_r/Makefile.in: use netbsd syntax for netbsd
	* ffcall/callback/trampoline_r/test1.c: do not assume r11 is free
	* ffcall/callback/trampoline_r/trampoline.c: provide a trampoline
	implementation that does not presume r11 is free (it is not in
	dynamically linked programs and the ELF ABI says as much but
	somehow linux managed to avoid this it seems). Use r13 for the
	time being since while gcc will allocate it, it is the last
	"local" one allocated so none of the clisp code hits that (nothing
	needed 17+ local registers in use ever). Update the vacall
	implementation to match the trampoline calls but otherwise for any
	assembly use the linux code.

2002-12-30  Sam Steingold  <sds@gnu.org>

	reversed the 2002-12-12 patch, reinstating the 2001-11-27 patch:
	elt_nreverse() can now be used because bitbuffer is 8bit now
	* stream.d (byte_swap): removed
	(READ-INTEGER, READ-FLOAT, WRITE-INTEGER, WRITE-FLOAT):
	use elt_nreverse() instead of byte_swap()

2002-12-20  Sam Steingold  <sds@gnu.org>

	* realtran.d (R_sin_R, R_cos_R, R_sinh_R, R_cosh_R):
	fixed GC-safety bugs triggered by the regression test
	* comptran.d (N_tan_N, N_sinh_N, N_cosh_N, N_tanh_N)
	(R_R_atanh_R_R): ditto
	* pathname.d (parse_logical_host_prefix): ditto
	* array.d (elt_nreverse): elements in Array_type_svector
	are type `gcv_object_t', not `object'

2002-12-20  Sam Steingold  <sds@gnu.org>

	* makemake.in (XCFLAGS) [CC=g++]: add DEBUG_GCSAFETY
	* pathname.d, socket.d, spvw.d, stream.d:
	compilable with DEBUG_GCSAFETY
	* arilev1i.d (sub_loop_down, subx_loop_down, subfrom_loop_down):
	(dec_loop_down, neg_loop_down): avoid some C++ warnings

2002-12-04  Bruno Haible  <bruno@clisp.org>

	GC-safety checker.
	* lispbibl.d: Recognize DEBUG_GCSAFETY.
	(INNARDS_OF_GCV_OBJECT): New macro.
	(TYPEDEF_OBJECT): Remove.
	(gcv_object_t): Define instead of object.
	(as_object): Fix for OBJECT_STRUCT case. Add optional allocstamp
	initializer.
	(gcv_object_t) [DEBUG_GCSAFETY]: Define as a C++ class.
	(object): Define after gcv_object_t.
	(alloccount): New declaration.
	(INIT_ALLOCSTAMP): New macro.
	(fake_gcv_object) [DEBUG_GCSAFETY]: Define as a C++ class.
	(gcunsafe_object_t): Likewise.
	(type_untype_object, type_data_object): Add optional allocstamp
	initializer.
	(gcinvariant_bias_p): New macro.
	(pointable) [DEBUG_GCSAFETY]: Verify pointer integrity.
	(type_pointable): Update.
	(cgci_pointable, pgci_pointable, ngci_pointable) [DEBUG_GCSAFETY]:
	Verify pointer integrity when the argument is an object.
	(eq) [DEBUG_GCSAFETY]: Verify pointer integrity.
	(gcinvariant_symbol_p): New function.
	* genclisph.d (main): Update.
	* spvw_allocate.d (alloccount): New variable.
	(inc_alloccount): New macro.
	(make_space, make_space_true, make_space_false): Call inc_alloccount.
	* spvw_page.d (_Page): In DEBUG_GCSAFETY mode, use 'struct' instead
	of 'union', to avoid compilation erro.

2002-12-19  Sam Steingold  <sds@gnu.org>

	* charstrg.d (DIGIT-CHAR-P): correctly identify MATHEMATICAL_*
	digits (* = SANS-SERIF/BOLD DOUBLE-STRUCK MONOSPACE)

2002-12-19  Bruno Haible  <bruno@clisp.org>

	* uni_attribute.c: Regenerated for Unicode 3.2.0 by gen-ctype.c.
	* uni_upcase.c: Likewise.
	* uni_downcase.c: Likewise.

	* utils/gen-uninames: Update for Unicode 3.2.0.
	* uninames.h: Regenerated for Unicode 3.2.0 by gen-uninames.
	* uniname.c: Assume ANSI C.
	(unicode_character_name, unicode_name_character): Update for Unicode
	3.2.0.

	* utils/unicode/UnicodeDataFull.txt: Upgrade to Unicode 3.2.
	* describe.lisp (unicode-attributes-line): Lines in
	UnicodeDataFull.txt may start with up to 6 hex digits now.

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* io.d (%PPRINT-LOGICAL-BLOCK): Make GC-safe.
	* lispbibl.d (gcunsafe_object_t): New type.
	* package.d (shadow, use_package): Prepare for DEBUG_GCSAFETY.
	* sequence.d (delete_help): Likewise.

	Fix some GC-safety bugs.
	* package.d (safe_check_pack_lock): Use the first argument.
	(unuse_1package): Mark as "can trigger GC".
	(unuse_package): Likewise. Make GC-safe.
	(SYSTEM::%IN-PACKAGE): Make GC-safe.
	(DELETE-PACKAGE): Make GC-safe.
	* pathname.d (copy_upcase): Change return type to void.
	(parse_logical_word): Make GC-safe.
	(simplify_directory): Make GC-safe. Avoid bug when dir list contains
	"." followed by a non-string.
	* realelem.d (R_R_contagion_R): Make GC-safe.
	(N_N_contagion_R): Simplify and make GC-safe.
	(C_R_float_C): Make GC-safe.
	(N_N_float_N): Make GC-safe.
	* comptran.d (N_exp_N): Make GC-safe.
	(N_log_N): Make GC-safe.

2002-12-18  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (bt_beyond_stack_p): fixed the back_trace circularity
	bug: unwind until back_trace is strictly within STACK
	* eval.d (unwind_upto): no need to unwind_back_trace() in the beginning

2002-12-18  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out): handle uninterned symbols and
	special forms (Fsubrs) correctly

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (alignof): With g++, use the builtin __alignof__. This
	avoids an error in alignof(jmp_buf) on FreeBSD that occurred because
	jmp_buf is defined using an anonymous struct type which makes jmp_buf
	not suitable as a template argument.

	* spvw_garcol.d (gc_mark): Add DEBUG_GC_MARK debugging facility.

	* lispbibl.d (simple_array_to_storage, simple_array_to_storage1):
	Change to avoid gcc warning.

	* lispbibl.d: Add inference TYPECODES => TRY_TYPECODES_1 on
	FreeBSD/x86.

2002-12-17  Sam Steingold  <sds@gnu.org>

	* describe.lisp (unicode-attributes-line): lines in
	UnicodeDataFull.txt may start with up to 6 hex digits now

2002-12-17  Sam Steingold  <sds@gnu.org>

	* charstrg.d (DIGIT-CHAR-P): correctly identify MYANMAR,
	ETHIOPIC, KHMER, and MONGOLIAN digits
	* uni_upcase.c, uni_downcase.c, uni_attribute.c: regenerated

2002-12-17  Bruno Haible  <bruno@clisp.org>

	* utils/unicode/UnicodeDataFull.txt: Renamed from
	utils/unicode/ftp.unicode.org/UnicodeData.txt.
	* Makefile.devel (src/uninames.h): Update.
	* src/makemake.in: Use UnicodeDataFull.txt instead of UnicodeData.txt.
	* src/describe.lisp (unicode-attributes-line): Likewise.
	* src/_README.en: Update.

2002-12-17  Sam Steingold  <sds@gnu.org>

	when :CONC-NAME is NIL, use the slot name as accessor and setter
	* defstruct.lisp (ds-make-accessors, ds-make-defsetfs): when
	concname is NIL, use slot-name without concatenation
	(defstruct): do not reset NIL conc-name-option to ""

2002-12-04  Bruno Haible  <bruno@clisp.org>

	New memory model WIDE_AUXI.
	* lispbibl.d (WIDE): Define if WIDE_AUXI.
	(value1_register, back_trace_register): Update.
	(TYPECODES): Update.
	(NO_ASYNC_INTERRUPTS): Update.
	(object, oint, soint): Define differently if WIDE_AUXI.
	(as_oint, as_object): Likewise.
	(as_object_with_auxi): New macro.
	(_attribute_aligned_object_): Update.
	(objectplus, wbit, wbitm, wbit_test, type_untype_object): Update.
	(IMMEDIATE_FFLOAT): New macro.
	(gcinvariant_type_p): Depend on IMMEDIATE_FFLOAT. Make it work also if
	tint_avoid is nonzero.
	(ffloat_): Depend on IMMEDIATE_FFLOAT.
	(Stream): Add more fillers if WIDE && !TYPECODES.
	(make_machine): Update.
	(TheFfloat): Depend on IMMEDIATE_FFLOAT.
	(cgci_pointable, pgci_pointable, ngci_pointable): New macros.
	(TheCons, TheRatio, TheComplex, TheSymbol, TheBignum, TheFfloat)
	(TheDfloat, TheLfloat, TheSarray, TheSbvector, TheS8string)
	(TheS16string, TheS32string, TheSstring, TheSvector, TheWeakKVT)
	(TheSiarray, TheIarray, TheRecord, TheSrecord, TheXrecord, ThePackage)
	(TheHashtable, TheReadtable, ThePathname, TheLogpathname)
	(The_Random_state, TheByte, TheFsubr, TheLoadtimeeval, TheSymbolmacro)
	(TheMacro, TheFunctionMacro, TheEncoding, TheFpointer, TheFaddress)
	(TheFvariable, TheFfunction, TheWeakpointer, TheFinalizer)
	(TheSocketServer, TheDirKey, TheYetanother, TheStream, TheStructure)
	(TheClass, TheClosure, TheIclosure, TheCclosure, TheInstance, TheSubr)
	(TheFramepointer, TheMachine, TheVarobject, ThePointer): Use them.
	(eq): Update.
	(bias_type_pointer_object): Update.
	(subr_tab_ptr_as_object, S_help_): Update.
	(topofframe): Add one more cast, to avoid warnings.
	* spvw.d (symbol_tab_ptr_as_object): Update.
	* spvw_allocate.d (pointable_usable_test): Update.
	* spvw_circ.d (get_circ_mark, get_circ_unmark): Depend on
	IMMEDIATE_FFLOAT.
	* spvw_garcol.d (gc_mark, alive): Depend on IMMEDIATE_FFLOAT.
	(pointer_as_object, pointer_was_object): Update.
	* spvw_global.d (init_mem_heaptypes): Depend on IMMEDIATE_FFLOAT.
	* spvw_mark.d (mark, unmark, marked): Update.
	* spvw_memfile.d (loadmem_update): Depend on IMMEDIATE_FFLOAT.
	* spvw_objsize.d (size_ffloat, objsize, objsize_ffloat,
	init_objsize_table): Depend on IMMEDIATE_FFLOAT.
	* spvw_typealloc.d (allocate_ffloat): Depend on IMMEDIATE_FFLOAT.
	* constobj.d (hs_single_float, FF_zero, FF_one, FF_minusone): Depend
	on IMMEDIATE_FFLOAT.
	* aridecl.d (make_FF, FF_0, FF_1, FF_minus1): Depend on
	IMMEDIATE_FFLOAT.
	* ffloat.d (FF_to_float): Depend on IMMEDIATE_FFLOAT.
	* hashtabl.d (hashcode1): Use untype() only if WIDE && TYPECODES.
	* intelem.d (FN_MSD): Use typecode() only if WIDE && TYPECODES.
	* lisparit.d (init_arith): Depend on IMMEDIATE_FFLOAT.
	* predtype.d (eql): Depend on IMMEDIATE_FFLOAT.
	(enum_hs_single_float, heap_statistics_mapper): Likewise.
	* eval.d (closure_register): Don't undefine if WIDE_AUXI.
	* genclisph.d (main): Update.

2002-12-16  Sam Steingold  <sds@gnu.org>

	* predtype.d (COERCE): accept CLOS class object as a type-spec
	when cannot coerce, signal a TYPE-ERROR
	when coercing FLOAT to COMPLEX, return (complex x (float 0 x))
	* compelem.d (F_complex_C): new function
	* lispbibl.d (F_complex_C): declare it

2002-12-16  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (disassemble-closure): print the list of special
	variables read and written

2002-12-16  Sam Steingold  <sds@gnu.org>

	* type.lisp (*canonicalize-type-prefer-clos*): new variable
	(canonicalize-type): depending on *canonicalize-type-prefer-clos*,
	return a CLOS class (e.g., NUMBER) or a list (e.g., (OR REAL COMPLEX))
	(subtypep): try CLOS before playing with lists

2002-12-16  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (DYNAMIC_8BIT_VECTOR): Renamed from DYNAMIC_BIT_VECTOR.
	Expect the length in bytes, not bits.
	(FREE_DYNAMIC_8BIT_VECTOR): Renamed from FREE_DYNAMIC_BIT_VECTOR.
	* stream.d: Update callers.
	* pathname.d: Update callers.

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d: Reorder some definitions, so that 'object' and
	'gcv_object_t' get defined earlier.

	* hashtabl.d (sxhash_atom): Really mask out all non-type bits.

	* io.d (fehler_read_eval_forbidden): Use const.

	* package.d (import): Remove unused macros CONFLICT1, CONFLICT2.

	* pathname.d (directory_diff_ab): Remove extra declaration.

	* amigaaux.d: Use WIDE_SOFT instead of WIDE.
	* spvw_allocate.d (mymalloc): Likewise.

	* lispbibl.d (fake_gcv_object): New macro.
	(SAVE_REGISTERS, finish_entry_frame, make_HANDLER_frame): Use it.
	* eval.d (funcall_iclosure, interpret_bytecode_): Likewise.
	* control.d (make_variable_frame, finish_flet): Likewise.

2002-12-15  Sam Steingold  <sds@gnu.org>

	* stream.d (stream_handles): handle KEYBOARD-STREAMs

2002-12-15  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (DYNAMIC_BIT_VECTOR): make an 8bit vector, not 1bit
	vector, because READ-FLOAT, WRITE-FLOAT, WRITE-INTEGER and
	WRITE-FLOAT will pass this bit vector to STREAM-READ-BYTE-SEQUENCE
	and STREAM-WRITE-BYTE-SEQUENCE

2002-12-13  Sam Steingold  <sds@gnu.org>

	CLUE and CLIO now compile with MIT-CLX
	* modules/clx/mit-clx/dependent.lisp (radians->int16)
	(int16->radians): avoid floating contagion warnings
	* modules/clx/mit-clx/depdefs.lisp
	(*def-clx-class-use-defclass*): set to '(window drawable pixmap)
	* modules/clx/mit-clx/clx.lisp: (provide :clx)

2002-12-13  Sam Steingold  <sds@gnu.org>

	* stream.d (kbd_last_buf): new function
	(rd_ch_keyboard): use it to flush UnbufferedStream_bytebuf before
	checking strm_keyboard_buffer: this fixes a bug in
	LISTEN/READ-CHAR interaction: listen would consume the char and
	READ-CHAR will never see it, while LISTEN will now always return T
	Reported by Jamison Masse <jamison@redwood.snu.ac.kr>

2002-12-12  Sam Steingold  <sds@gnu.org>

	* stream.d (key_event): renamed to key_event_t
	(add_keybinding): renamed to keybinding();
	second argument is a struct, not a pointer now
	(keybinding): removed the macro
	(make_keyboard_stream): use new macros BIND_KEY() and CHECK_CAP()

2002-12-12  Sam Steingold  <sds@gnu.org>

	reversed the 2001-11-27 patch: elt_nreverse() reverses
	_bits_ in the bitvector, while we need to swap _bytes_
	* stream.d (byte_swap): new function
	(READ-INTEGER, READ-FLOAT, WRITE-INTEGER, WRITE-FLOAT):
	use it instead of elt_nreverse()
	Reported by Bernard Urban <Bernard.Urban@meteo.fr>

2002-12-12  Sam Steingold  <sds@gnu.org>

	* init.lisp (expand-form): export the code walker

2002-12-12  Sam Steingold  <sds@gnu.org>

	* unixconf.h.in (ENABLE_NLS): added (this fixes
	the 2002-07-19 lispbibl.d patch)

2002-12-12  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	* pathname.d (TrueName) [WIN32_NATIVE]: fixed a bug -
	assure_dir_exists returned false on D:\ (D - any drive).

2002-12-12  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fix MSVC compilation
	* stream.d (sock_opt_bool, sock_opt_int, sock_opt_time)
	(socket_options): use SOCKLEN_T instead of socklen_t.
	* spvw_mmap.d (mmap_zeromap) [HAVE_WIN32_VM]: fix declaration.

2002-12-11  Sam Steingold  <sds@gnu.org>

	* reploop.lisp (debug-inspect-error): new function
	(commands1): bind it to Inspect/:i
	(break-loop): handle inspect-error catch'ed return

2002-12-11  Sam Steingold  <sds@gnu.org>

	* debug.d (break_driver): restore back_trace before
	unwind()/reset() when the error is not continuable;
	use const and p_backtrace_t as appropriate

2002-12-11  Sam Steingold  <sds@gnu.org>

	DRIBBLE now works by redefining *TERMINAL-IO* instead of a host
	of i/o variables; new type DRIBBLE-STREAM
	* dribble.lisp: full rewrite
	* savemem.lisp (saveinitmem): DRIBBLE-RESET is no longer needed

2002-12-04  Bruno Haible  <bruno@clisp.org>

	Avoid conditional expressions of the form
	 (bool ? object : gcv_object_t) or (bool ? gcv_object_t : object).
	* aridecl.d (FF_0, FF_1, FF_minus1, DF_0, DF_1, DF_minus1): Cast
	to object.
	* array.d (bit_up): Cast conditional expression branch to object.
	* compelem.d (N_realpart_R, N_imagpart_R): Likewise.
	* debug.d (read_form): Likewise.
	* encoding.d (SYSTEM::CHARSET-RANGE, init_dependent_encodings):
	Likewise.
	* eval.d (interpret_bytecode_): Likewise.
	* foreign.d (convert_from_foreign, foreign_with_pointers_p)
	(convert_to_foreign): Likewise.
	* i18n.d (SYS::TEXT): Likewise.
	* io.d (klammer_auf, FORMAT-TABULATE): Likewise.
	* lisparit.d (NUMERATOR, DENOMINATOR): Likewise.
	* package.d (PACKAGE-ITERATE): Likewise.
	* pathname.d (pathname_host_maybe, pathname_device_maybe)
	(pathname_version_maybe): Add cast to object.
	(xpathname_host, xpathname_directory, xpathname_name, xpathname_type)
	(xpathname_version): Cast conditional expression branch to object.
	(string2wild, wild2string): Likewise.
	(NAMETYPE_MATCH): Likewise.
	(MAKE-LOGICAL-PATHNAME): Likewise.
	(version_diff, translate_nametype_aux): Likewise.
	* predtype.d (COERCE): Likewise.
	* record.d (class_of): Likewise.
	* spvw_circ.d (subst_circ_mark): Likewise.
	* stream.d (check_stream, check_wr_int): Likewise.
	(get_synonym_stream): Likewise.
	(Truename_or_Self): Likewise.
	(handle_set, handle_isset): Likewise.
	(init_standard_io): Likewise.

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (object) [WIDE_STRUCT]: Wrap the union in struct.
	(as_object, typecode, mtypecode, untype, type_pointable): Update.
	* genclisph.d (main): Update.

2002-12-09  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (p_backtrace_t): new type, mostly useful for
	debugging back_trace issues in C++ mode
	(back_trace_check): declared
	(BT_CHECK, BT_CHECK1): new CPP macros
	(saved_back_trace, back_trace, _back_trace, _saved_back_trace):
	type p_backtrace_t
	* genclisph.d, spvw.d, spvw_garcol.d: ditto
	* spvw_debug.d (back_trace_check): implemented
	(back_trace_depth, back_trace_out): handle circular back_trace

2002-12-09  Bruno Haible  <bruno@clisp.org>

	* arilev1i.d (add_loop_down, addto_loop_down, sub_loop_down)
	(subx_loop_down, subfrom_loop_down): Limit variable scope to make
	it compile in C++ mode.

2002-12-09  Sam Steingold  <sds@gnu.org>

	* spvw_garcol.d (gar_col_normal): gc_mark() bt_caller's even
	though we are certain they have already been marked, since Bruno
	said: "Better safe than sorry"

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (gcv_environment_t): New type.
	(aktenv): Change type to gcv_environment_t.
	(make_STACK_env): Use gcv_environment_t.
	(nest_env): Change argument and return type to gcv_environment_t*.
	(get_closure): Change argument type to gcv_environment_t*.
	* spvw.d (aktenv): Change type to gcv_environment_t.
	* eval.d (nest_env): Change argument and return type to
	gcv_environment_t*.
	(get_closure): Change argument type to gcv_environment_t*.
	Don't mix environment_t and gcv_environment_t.
	(eval, eval_applyhook): Update.
	* control.d (compile_eval_form): Don't mix environment_t and
	gcv_environment_t.
	(EVALHOOK, APPLYHOOK): Likewise.
	* debug.d (same_env_as): Likewise.
	* predtype.d (COERCE): Update.

	* array.d, control.d, eval.d, lispbibl.d, predtype.d, sequence.d:
	* spvw.d, spvw_circ.d, spvw_garcol.d, spvw_genera1.d, spvw_memfile.d:
	* spvw_objsize.d, spvw_update.d, spvwtabo.d: Use sizeof(gcv_object_t)
	where appropriate.

2002-12-08  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (backtrace_t): bt_caller is also a gcv_object_t(!)
	prefix all slots of backtrace_t with `bt_'
	(unwind_back_trace) [DEBUG_SPVW]: do circularity checking
	* debug.d, genclisph.d, spvw_debug.d, spvw_garcol.d: updated

2002-12-06  Sam Steingold  <sds@gnu.org>

	* makemake.in (check-sources): check that there are no variables
	of type gcv_object_t - only pointers to it (see lispbibl.d)

2002-12-06  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/demos/sokoban.lisp: provide "sokoban"
	(sokoban): check that *display* is alive
	* modules/clx/new-clx/demos/qix.lisp: provide "qix"
	* modules/clx/new-clx/demos/clx-demos.lisp (CLX-DEMOS): use XLIB
	and EXT and shadow some symbols to avoid conflicts
	(getenv): removed (there is one in EXT)
	replaced the EVAL-WHEN kludge with REQUIRE
	* modules/clx/new-clx/clx.lisp (closed-display-p, x-error): export
	use PRINT-OBJECT, not :PRINT-FUNCTION DEFSTRUCT option
	use (DEFSETF foo set-foo) instead of (SETF (FDEFINITION '(SETF
	foo)) #'set-foo) for all setters
	(make-gcontext): new function (for clue)
	(x-error, closed-display): new conditions (complete)
	(request-error, resource-error, request-error, resource-error)
	(access-error, alloc-error, atom-error, colormap-error)
	(connection-failure, cursor-error, device-busy, drawable-error)
	(font-error, gcontext-error, id-choice-error, implementation-error)
	(length-error, lookup-error, match-error, missing-parameter)
	(name-error, pixmap-error, reply-length-error, reply-timeout)
	(sequence-error, server-disconnect, unexpected-reply)
	(unknown-error, value-error, window-error): new conditions (just
	the stubs)
	* modules/clx/new-clx/clx.f (closed_display_error): new function
	(isa_struct_p): use memq() instead of an explicit loop
	(ensure_living_display): return Bool indicator of whether the
	display has been closed
	(CLOSED-DISPLAY-P): new public function
	(CLOSE-DISPLAY): mark the display as closed
	by setting fp_pointer to NULL
	(display_hash_table, pop_display, general_lookup): signal a
	CLOSED-DISPLAY error when ensure_living_display() returns false
	(get_ptr_object_and_display, get_xid_object_and_display): use
	pop_display() instead of ensure_living_display()
	(SET-DISPLAY-AFTER-FUNCTION): do not call
	ensure_living_display() twice
	(xlib_after_function): no need to call ensure_living_display()
	converted *-SETTER --> SET-*
	* modules/clx/new-clx/e2d.c (do_defun): terminate name on '('

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (gcv_object_t): New type.
	(kvtable_data): Don't confuse object and void*.
	(copy_mem_b, copy_mem_o): Use const.
	* genclisph.d (main): Emit gcv_object_t type.
	* affi.d, array.d, charstrg.d, comptran.d, constobj.d, control.d:
	* debug.d, encoding.d, error.d, eval.d, foreign.d, hashtabl.d, io.d:
	* lisparit.d, list.d, modules.d, package.d, pathname.d, predtype.d:
	* realtran.d, record.d, rexx.d, sequence.d, spvw.d, spvw_circ.d:
	* spvw_garcol.d, spvw_genera1.d, spvw_genera2.d, spvw_genera3.d:
	* spvw_heap.d, spvw_mark.d, spvw_memfile.d, spvw_page.d:
	* spvw_sigsegv.d, spvw_typealloc.d, spvw_update.d, stream.d:
	* subr.d, symbol.d: Use gcv_object_t instead of object where
	appropriate.
	* charstrg.d (char_name, name_char): Use const.
	* hashtabl.d (hashcode3_atom): Likewise.

2002-12-05  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (lp_limit_1, ca_limit_1): set to 2^12-1
	* spvw.d (main) [DEBUG_SPVW]: check that the STACK depth is more
	that CALL-ARGUMENTS-LIMIT

2002-12-05  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/clx.f (get_event_mask): fixed error handling
	removed saving/restoring subr_self throughout
	applied the macrology patch (boundp, missingp, VALUES1 &c)
	(display_hash_table): replace STACK_0 instead of returning a value
	(make_xid_obj_2): reflect this change
	* modules/clx/new-clx/clx.lisp (*GCONTEXT-COMPONENTS*):
	define the constant (required by CLUE)
	* modules/clx/new-clx/demos/sokoban.lisp (*xpm-directory*)
	(*screen-directory*): use *LOAD-TRUENAME*, not *LOAD-PATHNAME*,
	and make sure that :NAME and :TYPE are NIL
	(save-state, load-state): use WITH-STANDARD-IO-SYNTAX
	(*sokoban-debug*): new variable; `d' - new command

2002-12-04  Bruno Haible  <bruno@clisp.org>

	* foreign.d (convert_function_to_foreign, init_ffi): Add casts to make
	it compile in C++ mode.

2002-12-04  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): removed the `initializations2'
	optimization which bound some iteration variables right around
	the main-code: this allows accessing iteration variables in the
	finally clauses (this also shortens the bytecode)

2002-12-04  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (make-length-test): use EXT:LIST-LENGTH-DOTTED
	instead if LENGTH because the argument may be dotted when it comes
	from a destructuring lambda list

2002-12-03  Sam Steingold  <sds@gnu.org>

	* stream.d (MAKE-WINDOW): do not assume that *TERMINAL-IO* is a
	terminal-stream
	(FILE-POSITION): decrement the position if a character has been
	unread (so that PEEK-CHAR does not modify FILE-POSITION)

2002-12-02  Sam Steingold  <sds@gnu.org>

	* spvw_debug.d (nobject_out): handle characters

2002-12-02  Sam Steingold  <sds@gnu.org>

	* foreign1.lisp (finalize-coutput-file): produce ANSI C,
	compilable with a C++ compiler such as g++

2002-12-02  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 647015 ]: ffi:def-c-enum broken from .fas file
	* foreign1.lisp (def-c-enum): use DEF-C-TYPE to define the enum
	type to C `int'

2002-12-02  Sam Steingold  <sds@gnu.org>

	* int2adic.d (D_D_mal2adic_D, UDS_UDS_durch2adic_UDS):
	avoid "warning: statement with no effect"
	* hashtabl.d (hashcode, CLASS-TUPLE-GETHASH): ditto

2002-12-01  Bruno Haible  <bruno@clisp.org>

	* spvw_debug.d (nobject_out): Fix compilation error when !DYNAMIC_FFI.

2002-12-01  Bruno Haible  <bruno@clisp.org>

	Make it buildable with CC=g++.

	* m4/proto.m4 (CL_PROTO_RET): Add an argument, the ANSI-DECL.
	* m4/abort.m4 (CL_ABORT): Update.
	* m4/closedir.m4 (CL_CLOSEDIR): Update.
	* m4/free.m4 (CL_FREE): Make it work better with CC=g++.
	* m4/getpagesize.m4 (CL_GETPAGESIZE): Update.
	* m4/putenv.m4 (CL_PUTENV): Avoid buggy AC_CHECK_FUNCS(putenv).
	* m4/select.m4 (RL_SELECT): Avoid buggy AC_CHECK_FUNCS(select).
	(CL_SELECT): Likewise.
	* m4/shmat.m4 (CL_SHMAT): Make it work better with CC=g++.
	* m4/signal.m4 (RL_RETSIGTYPE): Make it work better with CC=g++.
	* m4/strlen.m4 (CL_STRLEN): Make it work better with CC=g++.

	* cjk.h (is_cjk_encoding): Convert declaration to ANSI C.
	* uniname.c (unicode_name_word, unicode_name_word_lookup)
	(unicode_character_name, unicode_name_character): Convert declaration
	to ANSI C.
	* uniname.h (unicode_character_name, unicode_name_character): Convert
	declaration to ANSI C.
	* width.c (uc_width): Likewise.

	* utils/ccmp2c.c (token_type_t): Renamed from enum token_t.

	* debug.d (read_form): Limit variable scope because of 'goto'.
	(SHOW-STACK): Add a cast.
	* eval.d (sym_value): Limit variable scope because of 'goto'.
	(setq): Likewise.
	(nest_env): Move variable declaration because of 'goto'.
	(eval_closure): Bug fix: Avoid setting the STACK to an uninitialized
	value in case of error.
	(apply): Move error code because of 'goto'.
	(apply_closure): Likewise.
	(funcall): Likewise.
	* io.d (write_sstring_case): Move some code because of 'goto'.
	(pr_enter_1): Limit variable scope because of 'goto'.
	* realelem.d (defaultfloatcase): Move variable declaration because of
	'goto'.
	* spvw.d (main): Limit variable scope because of 'goto'.
	* spvw_debug.d (string_out): Fix element type of buffer.
	* spvw_memfile.d (loadmem_update_fsubr): Add cast.
	* stream.d (lisp_completion): Limit variable scope because of 'goto'.
	(rd_ch_terminal3): Add some casts.
	(sock_opt_bool, sock_opt_int, sock_opt_time, SOCKET-OPTIONS): Use
	socklen_t instead of 'int'.
	(read_line): Bug fix: Avoid using uninitialized variable in error
	message.
	* unix.d (ioctl): Move declaration after <sys/ioctl.h> has been
	included.

2002-12-01  Sam Steingold  <sds@gnu.org>

	* stream.d (check_wr_char): new macro (used in 18 places)

2002-11-30  Sam Steingold  <sds@gnu.org>

	* places.lisp (remove-plist): new function
	* inspect.lisp (with-http-output): use it instead of REMF

2002-11-28  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): APPEND/NCONC do not allow backward
	consing because REVAPPEND/NRECONC drop the last atom in dotted lists

2002-11-28  Sam Steingold  <sds@gnu.org>

	* pprint.lisp (with-gensyms): append the variable name
	to GENSYM prefix

2002-11-27  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 644353 ]: Segfault when overriding stdin
	* stream.d (read_line): call ssstring_append_extend() only when len>0

2002-11-26  Sam Steingold  <sds@gnu.org>

	* list.d (list_length): new function
	(LIST-LENGTH, LIST-LENGTH-DOTTED): use it
	* subr.d, constsym.d (LIST-LENGTH-DOTTED): added
	* init.d (LIST-LENGTH-DOTTED): exported
	* describe.lisp (LIST-LENGTH-DOTTED): defined in list.d now

2002-11-25  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): when IT keyword is not appropriate,
	treat it as a variable and hope it is bound somewhere
	- THEREIS clause adds NIL to RESULTS to
	prevent ambiguity in the return values
	- when summing (or counting &c) into a variable for which the type has
	been declared, make sure it is initialized to that particular type

2002-11-25  Sam Steingold  <sds@gnu.org>

	* loop.lisp (loop-syntax-error, expand-loop): macro-expansion-time
	errors have type SOURCE-PROGRAM-ERROR

2002-11-25  Sam Steingold  <sds@gnu.org>

	use C standard I/O <stdio.h> instead of asciz_out() and friends
	* acorn.d, encoding.d, error.d, genclisph.d, io.d, misc.d:
	* msdos.d, pathname.d, socket.d, spvw.d, stream.d:
	do not include <stdio.h> here
	* lispbibl.d: include <stdio.h>
	(asciz_out, asciz_out_s, asciz_out_ss, asciz_out_1, asciz_out_2)
	(asciz_out_3, asciz_out_1_, asciz_out_2_, asciz_out_3_, dez_out)
	(dez_out_, hex_out, hex_out_, mem_hex_out): removed
	(STACK_diff): new macro
	(bt_beyond_stack_p): use it
	(OS_error, OBJECT_OUT, OS_file_error, OS_filestream_error):
	use fprintf(), fputs() &c instead of asciz_out() and friends
	(nobject_out): declare
	* affi.d (reg_call): ditto
	* amigaaux.d (abort, init_amiga): ditto
	* avl.d (AVL/out): ditto
	* erramiga.d, errunix.d, errwin32.d (errno_out): ditto
	* predtype.d (with_gc_statistics): ditto
	* rexx.d (debug_asciz_out, debug_out_1): ditto
	* spvw.d (SP_ueber, STACK_ueber, fsubr_argtype, subr_argtype)
	(fehler_code_alignment, init_subr_tab_1, init_module_2)
	(usage, main): ditto
	* spvw_alloca.d (malloca): ditto
	* spvw_allocate.d (error_speicher_voll, make_space_gc_true)
	(make_space_gc_false, make_space_gc): ditto
	* spvw_fault.d (handle_mmap_fault, handle_fault, xmprotect): ditto
	* spvw_garcol.d (gc_unmarkcheck, gar_col_normal): ditto
	* spvw_global.d (check_gc_consistency, check_gc_consistency_2): ditto
	* spvw_memfile.d (loadmem, loadmem_from_handle): ditto
	* spvw_mmap.d (mmap_zeromap, mmap_prepare, mmap_filemap)
	(mprotect, mmap_init): ditto
	* spvw_multimap.d (initmap, msync_mmap_intervals, fdmap, idmap)
	(open_temp_fd, fdsave, close_temp_fd, exitmap, open_shmid)
	(shmsave, close_shmid): ditto
	* spvw_sigsegv.d (sigsegv_handler_failed): ditto
	* stream.d (rd_ch_keyboard) [WIN32_NATIVE]: ditto
	* win32aux.d (DumpProcessMemoryMap); ditto
	* pathname.d (string_concat): ditto
	(debug_output, debug_printf): removed
	(DOUT, SDOUT): use object_out() and nobject_out()
	* debug.d (back_trace_out): moved to spvw_debug.d
	* spvw_debug.d (asciz_out, asciz_out_s, asciz_out_ss, asciz_out_1)
	(asciz_out_2, asciz_out_3, asciz_out_1_, asciz_out_2_, asciz_out_3_)
	(dez_out, dez_out_, hex_out, hex_out_): removed
	(mem_hex_out): turned into local, use fputs(), not asciz_out()
	(string_out, nobject_out): non-consing, STACK non-modifying output
	(back_trace_depth): new function
	(back_trace_out): moved here, use nobject_out() and STACK_diff()

2002-11-23  Sam Steingold  <sds@gnu.org>

	* eval.d (interpret_bytecode, eval_closure, apply_closure)
	(funcall_closure, interpret_bytecode_): wrap calls to
	funcall_iclosure() and interpret_bytecode_() with a
	with_saved_back_trace()
	(interpret_bytecode_): do not augment back_trace

2002-11-23  Sam Steingold  <sds@gnu.org>

	* spvw_garcol.d (gar_col_normal) [DEBUG_SPVW]: check that all
	callers in back_trace have been already marked

2002-11-16  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): fixed a bug: check that accumulation
	variables have not been bound yet (by iteration or WITH clauses)

2002-11-15  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): fixed a bug: package argument for
	symbol iteration is not required and defaults to *PACKAGE*

2002-11-15  Sam Steingold  <sds@gnu.org>

	replaced subr_self with back_trace
	* lispbibl.d, genclisph.d, spvw.d (backtrace_t): new struct
	(*back_trace_reg*): renamed from *subr_self_reg*
	(HAVE_SAVED_back_trace): renamed from HAVE_SAVED_subr_self
	(saved_back_trace): renamed from saved_subr_self
	(bt_beyond_stack_p, unwind_back_trace, with_saved_back_trace):
	new macros
	(enter_frame_at_STACK): call unwind_back_trace()
	* array.d (eltype_code, initial_contents): do not save subr_self
	(initial_contents_aux): do not set subr_self
	* charstrg.d, control.d, error.d, foreign.d, hashtabl.d:
	* lisparit.d, package.d, record.d, rexx.d: do not mention subr_self
	as an argument in the comments
	* debug.d (driver, break_driver): bind back_trace
	(print_back_trace, back_trace_out): new functions
	(DESCRIBE-FRAME): call print_back_trace()
	(show_stack): new function
	(SHOW-STACK): call show_stack() and accept 3 arguments
	* subr.d (SHOW-STACK): reflect this change
	* reploop.lisp (debug-backtrace): use SHOW-STACK instead of a loop
	* encoding.d (CONVERT-STRING-FROM-BYTES): do not save subr_self
	* eval.d (unwind_upto): call unwind_back_trace() explicitly at
	the beginning, even though it is called by enter_frame_at_STACK()
	(eval_fsubr, apply_subr, funcall_subr, interpret_bytecode_):
	use with_saved_back_trace() instead of setting subr_self
	* io.d (SET-DISPATCH-MACRO-CHARACTER): no need to restore subr_self
	* list.d (member, MEMBER-IF, MEMBER-IF-NOT, ADJOIN):
	no need to save subr_self
	* pathname.d (coerce_xpathname, parse_as_logical, coerce_pathname)
	(defaults_pathname, assure_dir_exists, prepare_create)
	(directory_search, DYNLOAD-MODULES): ditto
	(ENOUGH-NAMESTRING, assume_dir_exists): use
	with_saved_back_trace() instead of setting subr_self
	(NAMESTRING, copy_one_file): no need to set subr_self
	* predtype.d (COERCE): no need to set subr_self
	* sequence.d (fehler_seqtype_length): use subr_self in error
	reporting (we now know that it is correct)
	(end_default_len, SUBSEQ, COERCED-SUBSEQ, seq_filterop)
	(seq_duplicates, find_op, position_op, count_op):
	no need to save and restore subr_self
	(copy_seqpart_into, FILL): use with_saved_back_trace()
	instead of setting subr_self
	(MISMATCH, SEARCH): no need to set subr_self
	* spvw_garcol.d (gar_col_normal): update callers in back_trace,
	they are all on the stack so we do not need to mark them
	(gar_col_simple, gar_col): no need to save and restore subr_self
	* stream.d (test_eltype_arg, sec_usec, check_float_eltype): ditto
	(read_line): use with_saved_back_trace() instead of setting subr_self

2002-11-15  Sam Steingold  <sds@gnu.org>

	* m4/libtool.m4: upgraded to libtool-1.4.3

2002-11-14  Sam Steingold  <sds@gnu.org>

	moved %REMF and %PUTF to C to unify all plist handling in one place
	* symbol.d (fehler_sym_plist_odd): renamed from fehler_plist_odd()
	(fehler_plist_odd): new function for property lists (not
	associated with any symbol)
	(plist_find): generic property list search
	(get, GETF, %PUT, REMPROP): use plist_find()
	(%PUTF, %REMF): new functions (use plist_find())
	* subr.d, constsym.d (%PUTF, %REMF): new functions
	* places.lisp (remf): use the built-in SYS::%REMF
	(%putf): removed

2002-11-10  Sam Steingold  <sds@gnu.org>

	* spvw.d (SP_ueber, STACK_ueber): quit when CLISP is non-interactive

2002-11-06  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-FORMAT): when destination is T, pass
	*STANDARD-OUTPUT* to the value of the FORMATTER call, not NIL;
	also treat destination NIL specially

2002-11-05  Sam Steingold  <sds@gnu.org>

	* clos.lisp (documentation): implemented
	(ensure-class): use SYS::%SET-DOCUMENTATION instead
	of (SETF DOCUMENTATION)
	* defstruct.lisp (defstruct): ditto
	* defs2.lisp (defpackage): do not discard the documentation string

2002-11-04  Sam Steingold  <sds@gnu.org>

	* macros1.lisp (declare): added a defmacro-special that expands to
	NIL: since DECLARE is not enumerated in the Figure 3-2, and it is
	a special operator in CLISP, a macro expander have to be provided

2002-11-03  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (defpackage): accept characters as symbol and
	package designators
	* init.lisp (in-package): accept characters as package designators

2002-11-02  Sam Steingold  <sds@gnu.org>

	* package.d (unintern): do not put the same symbol into the
	options list twice

2002-11-02  Sam Steingold  <sds@gnu.org>

	* pathname.d (directory_search_scandir): when returning from
	inside with_sstring_0, call FREE_DYNAMIC_ARRAY

2002-11-02  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (set-exclusive-or, nset-exclusive-or): call TEST and
	TEST-NOT with the arguments in the correct order, i.e., the first
	arg from the first list and the second arg from the second list

2002-11-01  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (do-symbols, do-external-symbols, do-all-symbols):
	wrap BODY-REST in TAGBODY

2002-11-01  Sam Steingold  <sds@gnu.org>

	* package.d (shadow): accept characters too
	(test_stringsym_arg): removed
	(FIND-PACKAGE, test_names_args, %IN-PACKAGE, FIND-ALL-SYMBOLS):
	use test_stringsymchar_arg() instead of test_stringsym_arg()
	(apply_symbols) [X3J13_161]: pass characters to shadow()
	* constobj.d (type_stringsym): removed
	* charstrg.d, lispbibl.d (test_stringsymchar_arg): declare global

2002-11-01  Sam Steingold  <sds@gnu.org>

	* package.d (FIND-PACKAGE): package object is a package designator too

2002-11-01  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): process argument `-p' _after_ all `-i' arguments
	so that the `-p' package can be created in one of the init files;
	this is backward compatible as long as all the files have an
	IN-PACKAGE statement, which they all certainly should have!

2002-11-01  Sam Steingold  <sds@gnu.org>

	* condition.lisp, macros2.lisp (etypecase, ctypecase): when
	KEYCLAUSELIST contains T, expand to TYPECASE

2002-11-01  Sam Steingold  <sds@gnu.org>

	* sequence.d (valid_type1): NULL --> (LIST 0); CONS --> (LIST (0) *)
	(fehler_seqtype_length): adjusted accordingly
	(SEQTYPE_LENGTH_MATCH): new macro
	(MAKE-SEQUENCE, coerce_sequence, COERCED-SUBSEQ, CONCATENATE, MAP)
	(MERGE): use it

2002-11-01  Sam Steingold  <sds@gnu.org>

	* loop.lisp (li-vars): new inline function
	(expand-loop): check for duplicate iteration variables;
	use ATOM for ON iteration, as per ANSI CL spec

2002-10-31  Sam Steingold  <sds@gnu.org>

	* error.d, lispbibl.d (fehler_lambda_expression):
	accept `caller' argument
	* symbol.d (%PUTD): pass caller to fehler_lambda_expression()
	* eval.d (coerce_function, apply, funcall): ditto

2002-10-30  Sam Steingold  <sds@gnu.org>

	* error.d (fehler_proper_list): accept `caller' argument
	* control.d (ENDP): pass caller to fehler_proper_list()
	* lispbibl.d (list_to_mv): ditto
	* list.d (endp, memq1, LIST-LLENGTH): ditto
	* sequence.d (LENGTH): ditto

2002-10-30  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (restart): renamed the typedef to restartf_t
	* control.d (UNWIND-PROTECT): ditto
	* eval.d (reset, invoke_handlers, interpret_bytecode_): ditto
	* spvw.d (quit): ditto

2002-10-28  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (signature): make it (:TYPE VECTOR) to avoid
	going through PRINT-OBJECT and MAKE-LOAD-FORM when compiling
	(function-signature): return function _name_ as the first value
	- this restores inline compilation
	(test-argument-syntax): with APPLY forms, one have to be more
	permissive wrt keyword arguments (a key may be explicitly in the
	list and the value maybe in the rest arguments)
	* init.lisp (nth-value, function-lambda-expression): export here
	for FUNCTION-SIGNATURE in compiler.lisp

2002-10-27  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (function-lambda-expression): always return a name,
	return the lambda expression for some compiled functions too

2002-10-25  Sam Steingold  <sds@gnu.org>

	* eval.d (coerce_function): use fehler_function()
	* sequence.d (seq_boolop): ditto
	* symbol.d (%PUTD): ditto

2002-10-23  Sam Steingold  <sds@gnu.org>

	* loop.lisp (expand-loop): separated `startup-code' from
	`initially-code' so that INITIALLY clauses can access variables

2002-10-23  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Bugfixing directory shortcuts on win32.
	* pathname.d (assure_dir_exists) [WIN32_NATIVE]:
	handle situation when dir exists but filename does not.
	(directory_search_scandir) [WIN32_NATIVE]: return symbolic
	name for nonexistent targets.

2002-10-22  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): call DESCRIBE only if there was
	something typed and it is in the completions

2002-10-22  Sam Steingold  <sds@gnu.org>

	Make sure COMPILE-FILE-PATHNAME does not barf in SEARCH-FILE
	* init.lisp (search-file): pass :IF-DOES-NOT-EXIST :IGNORE to DIRECTORY
	* pathname.d (dir_search_if_none_t): added DIR_IF_NONE_IGNORE
	(directory_search_hashcode): never signal error, just return nullobj
	(directory_search_scandir): do not barf when DIR_IF_NONE_IGNORE,
	otherwise treat DIR_IF_NONE_IGNORE just like DIR_IF_NONE_DISCARD
	(directory_search): be more careful with subdirectories when
	DIR_IF_NONE_IGNORE
	(DIRECTORY): accept :IF-DOES-NOT-EXIST :IGNORE
	* constobj.d (type_directory_not_exist): added :IGNORE

2002-10-18  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-LABELS, c-GENERIC-LABELS): new macro ADD-FENV
	in their common MACROLET

2002-10-17  Sam Steingold  <sds@gnu.org>

	* debug.d (read_form): do not nreverse STACK_2 before binding
	SYS::*KEY-BINDINGS*, since this destructively modifies commandsr
	in reploop.lisp
	* reploop.lisp (help): avoid much consing by not calling REVERSE +
	REMOVE-IF-NOT, this also simplifies the logic everywhere and makes
	the help message appear in the same order for different invocations
	(break-loop): push the restart announcement onto commandsr
	(break-loop, step-hook-fn): compute the command list just once,
	instead of for each READ-EVAL-PRINT invocation

2002-10-16  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): respect (readtable-case *readtable*)
	when printing and searching completions; do not close the
	parenthesis when quoting since readline will add a close quote
	after the closing parenthesis

2002-10-16  Sam Steingold  <sds@gnu.org>

	* realtran.d (F_pi_round_I_F): removed
	(F_pi2_round_I_F): the second (integer) value is taken mod 4
	(cos_stack, sin_stack): new functions
	(R_sin_R, R_cos_R): rewrote to use them

2002-10-16  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Directory shortcuts on win32.
	* pathname.d (FullName): save final slash, respect it.
	(resolve_shell_shortcut): don't call IShellLink->Resolve
	don't need to substitute missing target with any other file.
	Try to use description field on missing symlinks.
	(shell_shortcut_target_t): resolve result enumeration.
	(resolve_shell_shortcut_more): new function - resolve links
	to links, returns target attributes.
	(TrueName): similar to FullName, but tries to resolve every
	pathname component up to filename.
	(resolve_shell_symlink): changed result type, input parameters.
	(assure_dir_exists): split MSDOS and WIN32_NATIVE, the latter
	is rewritten.
	(directory_search_1subdir) [WIN32_NATIVE]: separated from others.
	Uses TrueName to handle links.
	(directory_search_hashcode) [WIN32_NATIVE]: new for win32.
	(directory_search_scandir) [WIN32_NATIVE]: reworked.
	(directory_search) [WIN32_NATIVE]: handle :CIRCLE flag.

2002-10-16  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Fix build for MSVC.
	* win32.d (MyCreateProcess): declare 1st parameter as const
	* win32aux.d (MyCreateProcess): same.
	* stream.d (sock_opt_bool, sock_opt_int, sock_opt_time)
	(SOCKET-OPTIONS): change length parameter of [g|s]etsockopt
	to type int (uint is absent). Cast option to (char *) - as
	declared in winsock (won't hurt (void *) unix declaration).

2002-10-15  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): print help when nothing useful was
	entered (just some whitespace)

2002-10-14  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 598128 ]: values / multiple-value-list crash
	* lispbibl.d (list_to_mv): fixed the check for mv_space overrun
	(mv_to_STACK): check space on STACK beforehand, not post-factum

2002-10-13  Sam Steingold  <sds@gnu.org>

	* places.lisp (psetf): handle the empty form (PSETF) properly

2002-10-13  Sam Steingold  <sds@gnu.org>

	* list.d (llength1): new global function, returning the last atom
	in addition to the list length
	(LIST-ENDTEST): use llength1: sequence functions expect proper sequences
	* lispbibl.d (llength1): declare
	(llength): define as a macro expanding to llength1()
	* sequence.d (LENGTH): use llength1 for lists and check for
	proper list termination

2002-10-13  Sam Steingold  <sds@gnu.org>

	a character is a package designator too
	* package.d (test_package_arg, test_stringsym_arg)
	(DELETE-PACKAGE): convert characters to singleton strings
	(%SET-PACKAGE-LOCK): adapt to now triggering GC test_package_arg()

2002-10-13  Sam Steingold  <sds@gnu.org>

	* sequence.d (MAKE-SEQUENCE): do not init strings with #\Space,
	keep the #\Null's from MAKE-STRING

2002-10-13  Sam Steingold  <sds@gnu.org>

	MAPC[AR|ON|AN]/MAPL[IST] require proper lists
	* compiler.lisp (c-MAP-on-CARs-inner, c-MAP-on-LISTs, c-MAPL):
	use ENDP, not ATOM to check for the list end
	* control.d (MAPCAR_MAPLIST_BODY, MAPC_MAPL_BODY)
	(MAPCAN_MAPCON_BODY): ditto
	(ENDP): new macro

2002-10-13  Sam Steingold  <sds@gnu.org>

	* list.d (TAILP): use EQL to compare the sublist, not EQ

2002-10-12  Sam Steingold  <sds@gnu.org>

	* type.lisp (canonicalize-type): recognize typed structures;
	barf on symbols that do not name types
	(subtypep): handle ATOM properly

2002-10-12  Sam Steingold  <sds@gnu.org>

	As per <http://www.lisp.org/HyperSpec/Body/sec_11-1-2-1-1.html>,
	external symbols in COMMON-LISP cannot have properties accessible
	in COMMON-LISP-USER, so we have to move EXT:MACRO to SYS::MACRO
	* init.lisp: do not export MACRO from EXT
	* lispbibl.d: fixed comments
	* describe.lisp (describe-object): EXT:MACRO --> SYS::MACRO
	* constsym.d (macro): EXT --> SYS
	* constobj.d (hs_macro): EXT --> SYS

2002-10-12  Sam Steingold  <sds@gnu.org>

	* pathname.d (DELETE-FILE): delete the argument, not its TRUENAME

2002-10-12  Sam Steingold  <sds@gnu.org>

	* pathname.d (DIRECTORY): accept new :IF-DOES-NOT-EXIST argument
	(dir_search_if_none_t, dir_search_param_t): new typedefs
	(directory_search): accept a second dir_search_param_t argument
	(directory_search_scandir): accept a third dir_search_param_t argument
	* subr.d, subrkw.d (DIRECTORY): added :IF-DOES-NOT-EXIST
	* constobj.d (version): bumped (DIRECTORY is in FUNTAB)
	(type_directory_not_exist): new type
	* constsym.d (Kkeep, Kdiscard): new keywords

2002-10-11  Sam Steingold  <sds@gnu.org>

	fixed PEEK-CHAR for ECHO-STREAMs and non-NIL peek-type
	* io.d (wpeek_char_eof, PEEK-CHAR): use peek_char()+read_char(),
	not read_char()+unread_char() - for the sake of echo streams

2002-10-10  Sam Steingold  <sds@gnu.org>

	* makemake.in (PARAMS): for the sake of a same-dir build, renamed
	the temporary C file to tmp.c (instead of the actual name ${parf}.c)
	(XCFLAGS) [GCC-3 DEBUG]: add -falign-functions=4

2002-10-09  Sam Steingold  <sds@gnu.org>

	* spvw_memfile.d (loadmem_from_handle): accept a second argument
	'filename' for better error reporting

2002-10-06  Sam Steingold  <sds@gnu.org>

	* realelem.d (F_R_float_F, RA_R_float_F): use Lfloat_length(y)
	instead of O(LF_digits), when y is actually a long float
	(C_R_float_C, N_N_float_N): do not modify the first argument
	* realtran.d (R_cosh_sinh_R_R): handle start_p/end_p for x=0 too
	* comptran.d (N_N_log_N): fixed a typo in the last patch
	(N_cis_N): (sin a) may be 0
	(N_exp_N): handle contagion properly
	(N_log_N): do not modify the complex argument
	(N_N_expt_N, N_tan_N, N_tanh_N): fixed C_R_float_C/N_N_float_N calls
	* lisparit.d (EXP): pass a real as the 3rd arg of N_exp_N
	(LOG): pass a real as the 3rd arg of N_log_N

2002-10-04  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 618428 ]: LOOP: local variables shadowing globals
	* loop.lisp (expand-loop): initialize accumulation variables
	after iteration variables

2002-10-04  Sam Steingold  <sds@gnu.org>

	* spvw.d (init_object_tab) [DEBUG_SPVW]: add :CLISP-DEBUG to features
	* compiler.lisp: COMPILER-DEBUG --> CLISP-DEBUG
	(make-anode) [CLISP-DEBUG]: define when LOAD
	[CLISP-DEBUG]: do not remprop SYS::DEFSTRUCT-DESCRIPTION,

2002-10-04  John Hinsdale <hin@alma.com>

	* modules/oracle/oracle.lisp: More error checking throughout

2002-10-03  Sam Steingold  <sds@gnu.org>

	* defs2.lisp (read-sequence, write-sequence): when deciding
	between byte and char i/o, check the sequence element type too

2002-10-02  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (test_symbol): moved here from symbol.d
	(test_symbol_non_constant): declare new function
	* error.d (test_symbol_non_constant): new function
	* control.d (funname_to_symbol): new function
	(FDEFINITION, FBOUNDP, FMAKUNBOUND): use it
	(fehler_funsymbol, fehler_symbol_constant): removed
	(FUNCTION, FLET, LABELS): use fehler_funname_source() instead of
	fehler_funsymbol()
	(check_setq_body, SET, MAKUNBOUND, COMPILER-LET)
	(MULTIPLE-VALUE-SETQ): use test_symbol_non_constant()
	(%SYMBOL-VALUE, SYMBOL-VALUE, SYMBOL-FUNCTION, BOUNDP)
	(SPECIAL-OPERATOR-P, BLOCK, RETURN-FROM)
	(MACRO-FUNCTION, PROCLAIM): use test_symbol()
	* eval.d (SPECIAL-VARIABLE-P): ditto
	(progv, get_closure): use test_symbol_non_constant()
	* i18n.d (SET-CURRENT-LANGUAGE): ditto
	* record.d (SYMBOL-MACRO-EXPAND): ditto
	* stream.d (SYMBOL-STREAM): ditto
	* symbol.d (test_symbol): moved to lispbibl.d

2002-10-02  Sam Steingold  <sds@gnu.org>

	removed SYS::%FUNCALL
	* compiler.lisp (c-form-table): removed SYS::%FUNCALL
	(c-form, c-HANDLER-BIND, c-FUNCTION-CALL, c-MAP-on-CARs)
	(c-MAP-on-LISTs, c-MAPC, c-MAPL): use FUNCALL instead of SYS::%FUNCALL
	* defstruct.lisp (ds-arg-default): ditto
	* trace.lisp (get-traced-definition, trace-step-apply)
	(trace-pre-output, trace-post-output, trace-print): do not use
	SYS::%FUNCALL - call the inlined functions directly
	(trace-level-inc): removed
	* constsym.d, subr.d, control.d (pfuncall): removed
	* spvw.d (*MACROEXPAND-HOOK*): init to FUNCALL, not SYS::%FUNCALL
	* eval.d (macroexp0): use FUNCALL, not SYS::%FUNCALL
	(FUNTABR): removed _(pfuncall)
	* constobj.d (version): bumped (because of FUNTABR)

2002-10-02  Sam Steingold  <sds@gnu.org>

	* stream.d (BUILT-IN-STREAM-ELEMENT-TYPE): resolve synonym streams

2002-10-01  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 617221 ]: distmakefile on cygwin uses `run', not `exe'
	* _distmakefile (lexe): new variable, init to @@LEXE@@
	* makemake.in (distmakefile): substitute ${LEXE} for @@LEXE@@

2002-10-01  Sam Steingold  <sds@gnu.org>

	* m4/readline.m4: check for `rl_already_prompted' after
	AC_SEARCH_LIBS and define HAVE_READLINE on success
	* lispbibl.d, unixconf.h.in: use HAVE_READLINE instead of
	HAVE_READLINE_READLINE_H

2002-09-30  Sam Steingold  <sds@gnu.org>

	* init.lisp (get-funname-symbol): moved here
	(defun): use GET-FUNNAME-SYMBOL instead of GET-SETF-SYMBOL
	* trace.lisp (check-traceable): ditto
	* places.lisp (get-setf-symbol): moved to init.lisp

2002-09-29  Sam Steingold  <sds@gnu.org>

	* makemake.in: fixed regeneration of intparam.h and floatparam.h

2002-09-29  Sam Steingold  <sds@gnu.org>

	* m4/readline.m4 (CL_READLINE): check for `rl_already_prompted'
	and reject readline versions that lack it

2002-09-29  Sam Steingold  <sds@gnu.org>

	* intparam.c: include <stdlib.h> for exit(3) to avoid a warning

2002-09-26  Sam Steingold  <sds@gnu.org>

	SOCKET:SOCKET-OPTIONS - an interface to getsockopt/setsockopt
	* stream.d (sock_opt_bool, sock_opt_int, sock_opt_time)
	(SOCKET-OPTIONS): new functions
	* constsym.d (SOCKET-OPTIONS, :SO-*): added
	* subr.d (socket_options): added
	* constobj.d (type_socket_option): added
	* init.lisp (SOCKET-OPTIONS): export

2002-09-25  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (special-variable-p): added a COMPILER-MACRO
	* init.lisp (%the-environment-error): renamed to %UNCOMPILABLE

2002-09-25  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-form): fixed the same bug again:
	EXPAND-COMPILER-MACRO may return an atom.
	This bug has already been fixed on 2002-02-28,
	but it was re-introduced on 2002-04-22.  Yuk.

2002-09-25  Sam Steingold  <sds@gnu.org>

	* compiler.lisp: removed the cross-compilation infrastructure,
	which was not used for over 10 years!

2002-09-25  Sam Steingold  <sds@gnu.org>

	* check-lispfun.lisp (check-lisp-defs): do not need explicit
	APPEASE-CERRORS

2002-09-25  Sam Steingold  <sds@gnu.org>

	* eval.d (symbol_env_search): new function
	(sym_value, setq): use it
	(SPECIAL-VARIABLE-P): accept an optional second argument
	- the environment (NIL for global, T for local, VENV, or ENV5)
	moved here from symbol.d because it uses symbol_env_search()
	* subr.d (SPECIAL-VARIABLE-P): changed the signature
	* constobj.d (version): bumped because SPECIAL-VARIABLE-P is in FUNTAB
	* symbol.d (SPECIAL-VARIABLE-P): moved to eval.d
	* compiler.lisp (subr-info) [CROSS]: updated the signature
	* error.d (fehler_environment): new function
	* lispbibl.d (fehler_environment): prototype it
	* control.d (test_optional_env_arg): use it

2002-09-23  Sam Steingold  <sds@gnu.org>

	some code clean-up
	* describe.lisp (unicode-attributes): avoid a warning in LOOP
	* charstrg.d (eqcomp_fun_t): renamed from `eqcomp_fun'
	* array.d (ADJUSTABLE-ARRAY-P): use VALUES_IF
	(uint_bitpack_t): renamed from `uint_bitpack'
	(uint_2bitpack_t): renamed from `uint_2bitpack'
	(initial_contents_locals_t): renamed from `initial_contents_locals'
	(reshape_data): renamed from `reshape_data'
	(test_array): turned into a function
	(ADJUST-ARRAY): use it
	* symbol.d (test_symbol): new function
	(%PUTD, %FIND-SUBR, GET, %PUTPLIST, %PUT, REMPROP, SYMBOL-PACKAGE)
	(SYMBOL-PLIST, SYMBOL-NAME, SPECIAL-VARIABLE-P): use it
	* debug.d (climb_fun_t): renamed from `kletterfun'

2002-09-22  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Bring (directory) to compliance with new win32 shortcut handling.
	* pathname.d [WIN32_NATIVE]:
	(resolve_shell_shortcut): changed parameters and semantics to
	lower level (symlink is based on shortcuts which is
	an implementation method).
	(resolve_shell_symlink): use it, work as old
	resolve_shell_shortcut did.
	(assure_dir_exists): renamed a call to it.
	(directory_search_scandir): now handles shortcuts specially.

2002-09-21  John Hinsdale <hin@alma.com>

	* module/oracle/Makefile.in: better Oracle -I path for v8.0.5

2002-09-20  Sam Steingold  <sds@gnu.org>

	* control.d (UNWIND-TO-DRIVER): accept a TOP-P argument
	(UNWIND-TO-TOP): removed
	* subr.d, constsym.d (UNWIND-TO-TOP): removed
	* subr.d, compiler.lisp (UNWIND-TO-DRIVER): changed the signature
	* eval.d (FUNTAB): added MEMQ
	* constobj.d (version): bumped because of UNWIND-TO-DRIVER and MEMQ
	* reploop.lisp (break-loop, step-hook-fn): do not use
	UNWIND-TO-TOP but pass an argument to UNWIND-TO-DRIVER

2002-09-20  Sam Steingold  <sds@gnu.org>

	fix the OBSOLETE-ACTION patch
	* init.lisp (warn): the preliminary definition must return NIL
	(open-for-load): use SYS::BUILT-IN-STREAM-CLOSE instead of CLOSE

2002-09-20  Sam Steingold  <sds@gnu.org>

	error reporting clean-up
	* charstrg.d (coerce_ss, coerce_imm_ss, coerce_normal_ss)
	(coerce_imm_normal_ss): use fehler_string() instead of explicit
	fehler(type_error,...)
	(test_char_arg): renamed from test_newchar_arg(), use fehler_char()
	(STANDARD-CHAR-P, GRAPHIC-CHAR-P, CHAR-WIDTH, STRING-CHAR-P)
	(BASE-CHAR-P, ALPHA-CHAR-P, UPPER-CASE-P, LOWER-CASE-P)
	(BOTH-CASE-P, DIGIT-CHAR-P, ALPHANUMERICP, CHAR-CODE)
	(CHAR-UPCASE, CHAR-DOWNCASE, CHAR-INT, CHAR-NAME, STORE-CHAR)
	(STORE-SCHAR): use test_char_arg()

2002-09-20  Sam Steingold  <sds@gnu.org>

	LOAD now takes an additional :OBSOLETE-ACTION keyword
	* init.lisp (open-for-load): new function
	(load): use it to open the file
	(*load-obsolete-action*): new user variable

2002-09-20  Stefan Kain  <stefan.kain@freenet.de>

	* constsym.d, subr.d, encoding.d, predtype.d, intlog.d, control.d:
	* charstrg.d, arihppa.d, array.d: translated all comments

2002-09-20  John Hinsdale <hin@alma.com>

	* modules/oracle: Fix Makefile format and vars to work
	on more systems; take ORACLE_HOME from environment.

2002-09-20  Will Newton  <will@misconception.org.uk>

	* ariarm.d: ARM assembler code updated to the newer gas syntax

2002-09-19  Sam Steingold  <sds@gnu.org>

	* lispbibl.d [SPARC GCC3]: disable global register declarations
	Suggested by Will Newton <will@misconception.org.uk>

2002-09-19  Sam Steingold  <sds@gnu.org>

	* lisparit.d (log_digits): fixed last patch: make sure
	that the saved value is not more precise than it is accurate

2002-09-18  Sam Steingold  <sds@gnu.org>

	* makemake.in: treat floatparam.[ch] just like intparam.[ch]

2002-09-18  Sam Steingold  <sds@gnu.org>

	* m4/fenv_default.m4: fixed AC_DEFINE macro calls

2002-09-18  Sam Steingold  <sds@gnu.org>

	* modules/bindings/linuxlibc6/linux.lisp (NGROUPS_MAX): do not
	redefine the constant based on _POSIX_NGROUPS_MAX

2002-09-18  Sam Steingold  <sds@gnu.org>

	* foreign1.lisp (default-foreign-language): avoid a compile-time
	warning by wrapping SETQ *FOREIGN-LANGUAGE* inside a
	WITHOUT-PACKAGE-LOCK macro
	* compiler.lisp (c-form-table, compile-toplevel-form): handle
	WITHOUT-PACKAGE-LOCK specially
	(*compiler-unlocked-packages*): new variable
	(set-check-lock): use it
	(c-WITHOUT-PACKAGE-LOCK): new function, binds
	*COMPILER-UNLOCKED-PACKAGES*

2002-09-18  Will Newton  <will@misconception.org.uk>

	* arihppa.d: syntactic changes to make the GNU assembler happy

2002-09-18  Sam Steingold  <sds@gnu.org>

	do not print QUOTE and FUNCTION specially when that results
	in a dotted list representation
	* io.d (special_list_p): new `dotted_p' argument
	(pr_cons): pass `dotted_p' to special_list_p()

2002-09-17  John  Hinsdale <hin@alma.com>

	* modules/oracle/oracle.lisp: use new FFI calls; many performance
	improvements in low-level functions and macros

2002-09-17  Sam Steingold  <sds@gnu.org>

	* lisparit.d (log_digits): fixed the 2002-09-11 patch:
	give NULL as end_p to R_ln_R() and shorten the result

2002-09-17  Bruno Haible  <bruno@clisp.org>

	* loop.lisp (expand-loop): Warn if a sequence of forms is empty -
	allowed by CLtL2, but invalid according to ANSI CL.

2002-09-14  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-APPLY): check whether FUN is locally defined
	to check signature in (flet ((foo (...) ...)) (apply #'foo ...))
	this also kills a spurious warning about undefined functions

2002-09-14  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (SOURCES): removed SOURCES3
	(SOURCES2): simplified
	(SOURCES3): removed
	* makemake.in (clisp.html): VERSION --> `cat VERSION`
	* _clisp.html: report the CLISP version too

2002-09-15  Sam Steingold  <sds@gnu.org>

	* version.h: 2.30 is released

2002-09-13  Sam Steingold  <sds@gnu.org>

	* intparam.d: removed
	* Makefile.devel: do not regenerate comment5.c and intparam.c

2002-09-12  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (form-name): removed
	(compile-file): folded FORM-NAME; pass :PRETTY NIL to WRITE-TO-STRING

2002-09-11  Stefan Kain  <stefan.kain@freenet.de>

	* error.d, socket.d: translated all comments

2002-09-11  Sam Steingold  <sds@gnu.org>

	improved accuracy of some transcendental functions
	* realtran.d (pi): return long float of the same format as the arg
	(R_cos_sin_R_R, R_ln_R, R_exp_R, R_cosh_sinh_R_R): accept two
	additional arguments: start_p (whether to increase the precision
	in the beginning) and end_p (whether to lower the precision back
	at the end of computation)
	(R_R_log_R): handle these changes
	* realelem.d (N_N_contagion_R, F_R_float_F, RA_R_float_F)
	(R_R_float_F, C_R_float_C, N_N_float_N): new functions
	* lisparit.d (EXP, EXPT, log_digits): accommodate the changes in
	signatures of the basic transcendental functions
	* comptran.d (N_exp_N, N_log_N): accept start_p and end_p
	(N_N_log_N, N_N_expt_N, N_sin_N, N_cos_N, N_tan_N, N_cis_N)
	(N_sinh_N, N_cosh_N, N_tanh_N, R_R_atanh_R_R, N_atanh_N, N_atan_N)
	(R_R_asinh_R_R, N_acosh_N, N_acos_N): handle these changes

2002-09-11  John  Hinsdale <hin@alma.com>

	* modules/oracle/*: new add-in module for Oracle interface
	* src/Makefile.devel: build autoconf script for modules/oracle

2002-09-11  Marco Baringer  <empb@bese.it>
	    Sam Steingold  <sds@gnu.org>

	* lispbibl.d (VALUES_IF, VALUES0, VALUES1, VALUES2, VALUES3)
	(boundp, nullpSv, missingp): new macros
	* affi.d, aridecl.d, array.d, charstrg.d, control.d, debug.d:
	* dirkey.d, encoding.d, error.d, eval.d, flo_rest.d, foreign.d:
	* hashtabl.d, i18n.d, io.d, lisparit.d, lispbibl.d, list.d, misc.d:
	* package.d, pathname.d, predtype.d, realelem.d, record.d, rexx.d:
	* sequence.d, socket.d, spvw.d, spvw_garcol.d, stream.d, symbol.d:
	* time.d: use them

2002-09-08  Sam Steingold  <sds@gnu.org>

	* acorn.d, msdos.d, unix.d, unixaux.d, m4/signal.m4, unix/sigsegv.c:
	renamed signal_handler type to signal_handler_t

2002-09-07  Sam Steingold  <sds@gnu.org>

	* defmacro.lisp (analyze-key): fixed the bug with
	  (destructuring-bind (&key (x x)) ...)

2002-09-05  Stefan Kain  <stefan.kain@freenet.de>

	* avl.d: translated all comments

2002-09-05  Sam Steingold  <sds@gnu.org>

	* makemake.in (LN_S) [win32gcc]: do not redefine: Arseny made
	CLISP understand symlinks!
	(CPP) [win32gcc]: make sure it contains -mno-cygwin
	(comment5) [win32gcc]: avoid -mno-cygwin so that comment5.exe
	understands symbolic links

2002-09-04  Sam Steingold  <sds@gnu.org>

	* realtran.d (R_cos_sin_R_R): avoid one sqrt() and use
	sin(r)=r when r=0

2002-09-04  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (disassemble-closure): print the number of instructions

2002-09-04  Bruno Haible  <bruno@clisp.org>

	* m4/sigsegv.m4 (CL_SIGSEGV): Do not define NO_SIGSEGV.
	* makemake.in (XCFLAGS): Add -DNO_SIGSEGV if there is no libsigsegv.

2002-09-03  Bruno Haible  <bruno@clisp.org>

	* sigsegv: Remove directory.
	* unix/INSTALL: Recommend installation of GNU libiconv, GNU libsigsegv.
	* win32msvc/INSTALL: Likewise.
	* m4/sigsegv.m4: New file.
	* configure.in: Call CL_SIGSEGV.
	* makemake.in (LIBSIGSEGV): New variable.
	(USE_SIGSEGV, XCL_SIGSEGVLIB): Remove variables.
	(FILES, LIBS): Remove libsigsegv.a.
	(EVERY_INCLUDES_H): Remove sigsegv.h.
	(sigsegv.h, libsigsegv.a): Remove rules.
	(clean1, clean4): Don't remove libsigsegv.a, sigsegv.h, sigsegv.
	* lispbibl.d: Don't include sigsegv.h if NO_SIGSEGV is defined.
	* Makefile.devel (SOURCES4): Remove sigsegv.
	(CONFIGURES): Remove sigsegv/configure.
	(configures): Remove dependency on sigsegv/autoconf/aclocal.m4.
	(sigsegv/autoconf/aclocal.m4, sigsegv/configure): Remove rules.

2002-09-03  Sam Steingold  <sds@gnu.org>

	* win32.d (HAVE_UNISTD_H): do not define (revert the 2002-08-19
	patch) since <unistd.h> is needed only for exec() which is not
	used on WIN32_NATIVE

2002-09-02  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Fixing makemake.in for mingw.
	* makemake.in: fixed 2002-08-10 patch: double quotes now
	used on TSYS=win32msvc.
	(LIBS) [win32gcc]: added libuuid to library list (need it on mingw
	to handle shell objects)

2002-09-02  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Implemented shorcut symlink ersatz on win32 (read-only,
	for CYGWIN compatibility).
	* win32aux.d (com_initialized): new global variable.
	(init_win32): initialize COM library.
	(done_win32): deinitialize COM library.
	* win32.d: include shell object headers.
	* pathname.d [WIN32_NATIVE] (FullName): new function,
	translates short name to long one.
	(resolve_shell_shortcut): new function handles shortcuts.
	(assure_dir_exists): now trying to resolve ersatzsymlinkshortcuts.

2002-08-26  Sam Steingold  <sds@gnu.org>

	* list.d (sublis_assoc): moved saving/restoring alist (to/from
	STACK) outside the loop because otherwise this function is
	mis-compiled by gcc-3.2 on linux (go figure!)
	Reported by James Mcclain <jmccla3@gl.umbc.edu>

2002-08-19  Sam Steingold  <sds@gnu.org>

	more win32gcc tweaks
	* unix.d (ualarm) [UNIX_CYGWIN32]: declaration tweak
	* win32.d (STDC_HEADERS, HAVE_UNISTD_H, HAVE_PERROR_DECL):
	declare for _clisp.c
	* acorn.d, amiga.d, msdos.d, unix.d, win32.d (OS_set_errno): new macro
	* socket.d (connect_to_x_server): use it
	* makemake.in (LN_S) [win32gcc]: set to "cp -p"
	* _clisp.c [WIN32_NATIVE]: ported to win32

2002-08-23  Marco Baringer <empb@bese.it>
	    Sam Steingold  <sds@gnu.org>

	* pathname.d (DUPLICATE-HANDLE): dup/dup2 calls were reversed

2002-08-14  Sam Steingold  <sds@gnu.org>

	* io.d (multi_line_sub_block_out): fixed a crash when block
	contains several indentations
	Reported by Glauber Ribeiro <glauber.ribeiro@experian.com>

2002-08-14  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (form-name): use WRITE-TO-STRING instead of
	SYS::WRITE-TO-SHORT-STRING (reversed a major compilation
	performance hit introduced on 2002-03-11)

2002-08-14  Sam Steingold  <sds@gnu.org>

	* makemake.in (makemake): no need for a separate second
	config.status invocation to get the additional commands
	* configure.in (po/Makefile.in): use AC_CONFIG_FILES, not AC_OUTPUT
	(makemake): use AC_CONFIG_FILES, not AC_CONFIG_COMMANDS

2002-08-12  Sam Steingold  <sds@gnu.org>

	* makemake.in (encflags): new variable: -Efile and -Eterminal
	instead of the general -E (see patch 2002-06-10): need to keep
	*MISC-ENCODING* set to the user localization
	Reported by Arseny Slobodjuck.

2002-08-11  Sam Steingold  <sds@gnu.org>

	fixed the EXEEXT inconsistencies
	* _clisp.c (main): execname may be lisp.exe
	* clisp-link (LISPRUN): new variable, used throughout
	* makemake.in (clisp-link): replace EXEEXT
	use ${LEXE} more consistently

2002-08-10  Arseny Slobodjuck <ampy@ich.dvo.ru>

	* makemake.in [win32]: do not use apostrophes as shell screening
	characters on win32.

2002-08-10  Arseny Slobodjuck <ampy@ich.dvo.ru>

	* makemake.in: lisp executable depends on libcharset.

2002-08-09  Sam Steingold  <sds@gnu.org>

	fixed makemake creation: additional commands were not executed
	* configure.in (makemake): AC_OUTPUT with arguments is
	deprecated, use AC_CONFIG_COMMANDS instead
	* makemake.in (makemake): separate config.status invocation for
	variable substitution and the additional commands in configure.in

2002-08-09  Sam Steingold  <sds@gnu.org>

	* _clisp.c (main): accept `-d' (now that .clisp is gone, the
	developers are expected to use the driver)

2002-08-09  Sam Steingold  <sds@gnu.org>

	* makemake.in (TEXE, LEXE) [cygwin32]: exe/exe, because some
	win32 programs (e.g. Emacs) cannot start lisp.run (cygwin bash has
	no problems, of course)

2002-08-09  Sam Steingold  <sds@gnu.org>

	added Gabriel's benchmarks
	* makemake.in (bench): new target

2002-08-09  Sam Steingold  <sds@gnu.org>

	avoid compiler warning in (defun z () #'(lambda () (z)))
	* compiler.lisp (defining-p): new function
	(in-defun-p): use it
	(note-function-used): use it instead of IN-DEFUN-P

2002-08-07  Sam Steingold  <sds@gnu.org>

	* charstrg.d (MAKE-STRING) [HAVE_SMALL_SSTRING]: create a string
	of minimal element size for the given initial element

2002-08-07  Sam Steingold  <sds@gnu.org>

	* m4/ln.m4 (CL_PROG_HLN): this time, fixed the link test for real

2002-08-07  Sam Steingold  <sds@gnu.org>

	* pathname.d (COPY-FILE): instead of returning file count and
	byte count, return a list of (source dest byte-count) for each
	copy operation performed
	(copy_one_file, copy_file_low): updated for that

2002-08-06  Sam Steingold  <sds@gnu.org>

	rewrote the last patch to accept wildcards
	* pathname.d (check_copy_method, hardlink_file, symlink_file)
	(true_namestring): new functions
	(copy_method_t): new typedef
	(TRUENAME, PROBE-FILE, DELETE-FILE, rename_file, open_file, CD)
	(FILE-WRITE-DATE, FILE-AUTHOR, EXECUTE): use true_namestring()
	(NAMESTRING2, FILENAME_ACTION): removed
	(copy_attributes_and_close): converted from copy_attributes()
	(copy_file_low): do NOT do pathname merging and resolving
	(copy_one_file): do it here
	(COPY-FILE): return 2 values: file count and byte count

2002-08-05  Marco Baringer <empb@bese.it>
	    Sam Steingold  <sds@gnu.org>

	POSIX:COPY-FILE - copying/renaming/linking files
	* pathname.d (COPY-FILE, copy_file_low, copy_attributes): new functions
	* constobj.d (type_link_arg): new object
	* constsym.d, subr.d, subrkw.d (copy_file): added
	* posix.lisp (copy-file): exported
	* lispbibl.d (strm_buffered_bufflen): moved here from stream.d
	* stream.d (strm_buffered_bufflen): commented out

2002-08-05  Sam Steingold  <sds@gnu.org>

	* install.lisp: add a URL shortcut to CLISP home to the desktop
	* makemake.in (TXT_FILES): make clisp.c on all systems
	(needs): drop .clisp and .clisp-full in favor of clisp.c
	(IMPNOTES_FILES) [win32]: added clisp.ico
	(clisp): new target
	* doc/clisp.ico: new file

2002-08-05  Sam Steingold  <sds@gnu.org>

	* m4/dynload.m4 (CL_DYNLOAD): check for <dlfcn.h> before doing
	anything else and drop out if the header is not there

2002-08-03  Sam Steingold  <sds@gnu.org>

	* spvw_garcol.d (GC_MARK): new macro
	(gc_mark_stack): use it
	(gc_mark): unroll Rectype_reallocstring
	* spvw_genera2.d (gc_mark_at, gc_mark_old_generation): use GC_MARK

2002-08-02  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (c-DIRECT-FUNCTION-CALL): fixed repeated key
	handling: ignore the value of the argument and issue a warning

2002-08-02  Sam Steingold  <sds@gnu.org>

	* stream.d (make_terminal_stream_) [UNIX_CYGWIN32]: check
	ttyname() instead of inodes for stdin/out_handle
	(finish_tty_output, force_tty_output) [UNIX_CYGWIN32]:
	ignore EACCES (in addition to EBADF) for xterm/rxvt
	Suggested by David Young and Matthias Linder

2002-08-01  Sam Steingold  <sds@gnu.org>

	* m4/ln.m4 (CL_PROG_HLN): fixed the "hard links to symlinks" check
	* makemake.in (TEXE, LEXE) [cygwin32]: exe/run
	(distrib): rmrf TOPDIR before making the distribution

2002-08-01  Sam Steingold  <sds@gnu.org>

	* type.lisp (COMPLEX): use UPGRADED-COMPLEX-PART-TYPE,
	just like VECTOR uses UPGRADED-ARRAY-ELEMENT-TYPE

2002-08-01  Sam Steingold  <sds@gnu.org>

	* makemake.in (DISTFILE): strip parens from OS version for cygwin

2002-08-01  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (load-lpt-many): simplified messages
	* init.lisp (load): likewise

2002-08-01  Sam Steingold  <sds@gnu.org>

	cygwin: understand win32 "c:" pathnames
	* pathname.d (PARSE-NAMESTRING) [UNIX_CYGWIN32]: use
	*DEVICE-PREFIX* to parse "c:/gnu/" --> "/cygdrive/c/gnu/"
	* constsym.d (*DEVICE-PREFIX*) [UNIX_CYGWIN32]: added
	* spvw.d (init_symbol_values) [UNIX_CYGWIN32]: defvar *DEVICE-PREFIX*
	* makemake.in [UNIX_CYGWIN32]: better cygwin32 canonicalization;
	less special treatment; add SETQ *DEVICE-PREFIX* to config.lisp

2002-07-31  Sam Steingold  <sds@gnu.org>

	* utils/ccmp2c.c, utils/modprep.c: added
	* utils/ccmp2c.d, utils/modprep.d: removed
	* utils/txt2c.c: no pre-processing is needed
	* makemake.in: do not pre-process ccmp2c.c, modprep.c, txt2c.c

2002-07-31  Sam Steingold  <sds@gnu.org>

	mingw port moving along - in-place only for now
	* configure: handle --with-mingw and pass 'win32gcc gcc' to makemake
	* makemake.in [win32gcc]: no special treatment for libcharset,
	sigsegv, and ffcall
	* Makefile.devel: removed win32gcc
	* win32gcc: removed directory
	* encoding.d [__MINGW32__]: #include <stdio.h> for sprintf()
	* pathname.d (default_drive) [WIN32_NATIVE]: cast chart/cint properly
	* stream.d (rd_ch_keyboard, wr_ch_array_window, wr_ch_window)
	[WIN32_NATIVE]: ditto
	* win32.d (HAVE_LC_MESSAGES) [__MINGW32__]: define to 0
	* win32aux.d (temp_interrupt_handler) [__MINGW32__]: no
	WSACancelBlockingCall() - need a replacement!

2002-07-31  Sam Steingold  <sds@gnu.org>

	* m4/general.m4 (CL_CANONICAL_HOST_CPU_FOR_FFCALL)
	(CL_CANONICAL_HOST_CPU): canonicalize alphaev[4-8] to alpha
	Suggested by Will Newton <will@misconception.org.uk>

2002-07-30  Sam Steingold  <sds@gnu.org>

	* utils/comment5.c (main): meaningful error messages
	* utils/comment5.d: removed

2002-07-29  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 552171 ]: failure with clx.e
	* modules/clx/new-clx/e2d.c (do_defun): terminate with '\0' after
	inserting '}'

2002-07-29  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): warp all signal handler installations in
	begin/end_system_call()
	* spvw_debug.d [DEBUG_SPVW]: added some debugging functions

2002-07-26  Sam Steingold  <sds@gnu.org>

	* stdint.h.in [__sun__]: <sys/int_types.h> defines everything

2002-07-26  Sam Steingold  <sds@gnu.org>

	* type.lisp (upgraded-complex-part-type): spec must be a
	subtype of REAL, and the return value is REAL

2002-07-26  Sam Steingold  <sds@gnu.org>

	* socket.d (RESOLVE-HOST-IPADDR-INTERNAL): fixed a GC safety bug

2002-07-26  Sam Steingold  <sds@gnu.org>

	Readline is now used properly on Cygwin
	* stream.d (make_terminal_stream_) [UNIX_CYGWIN32]: inode numbers
	do not make sense on Cygwin: they are based on filenames

2002-07-25  Sam Steingold  <sds@gnu.org>

	* version.h: 2.29 is released

2002-07-25  Sam Steingold  <sds@gnu.org>
            Bruno Haible <bruno@clisp.org>

	fixed the (compile nil (lambda () ... #'(lambda ...))) bug
	* compiler.lisp (symbol-suffix): also work when funname is NIL,
	but suffix is not a symbol (see also the 2002-02-11 patch)

2002-07-22  Sam Steingold  <sds@gnu.org>

	* check-lispfun.lisp: new file: check LISPFUN, LISPFUNN and
	LISPSPECFORM between *.d and subr.d/subrkw.d/fsubr.d
	* makemake.in (check-sources): new target
	* array.d, charstrg.d, dirkey.d, io.d, posixmisc.d, rexx.d:
	* sequence.d, subr.d: removed backslashes from LISPFUNs

2002-07-22  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 584866 ]: inspect.lisp invalid XHTML & e-mail
	* inspect.lisp (*user-mail-address*): new user variable
	(with-html-output): use it; link/rev should be a string,
	not a symbol, like all the other attribute values;
	added a comment about overriding keep-alive

2002-07-21  Bruno Haible  <bruno@clisp.org>

	* stdint.h.in: Add support for FreeBSD.

2002-07-21  Bruno Haible  <bruno@clisp.org>

	Avoid using floating-point hardware where it leads to exceptions or
	wrong computations.
	* floatparam.c: New file.
	* m4/fenv_default.m4: New file.
	* configure.in: Create floatparam.h.
	Call CL_{FLOAT,DOUBLE}_{DIV0,OVERFLOW,UNDERFLOW,INEXACT}.
	* unixconf.h.in (FLOAT_DIV0_EXCEPTION, FLOAT_OVERFLOW_EXCEPTION)
	(FLOAT_UNDERFLOW_EXCEPTION, FLOAT_INEXACT_EXCEPTION)
	(DOUBLE_DIV0_EXCEPTION, DOUBLE_OVERFLOW_EXCEPTION)
	(DOUBLE_UNDERFLOW_EXCEPTION, DOUBLE_INEXACT_EXCEPTION): New macros.
	* lispbibl.d: Include floatparam.h.
	(FAST_FLOAT, FAST_DOUBLE): Define according to the
	autoconf-determined parameters.
	* ffloat.d (FF_FF_durch_FF): Choose slow path if FLOAT_DIV0_EXCEPTION.
	* dfloat.d (DF_DF_durch_DF): Choose slow path if DOUBLE_DIV0_EXCEPTION.
	* lisparit.d (init_arith): Remove wrong value of DOUBLE-FLOAT-EPSILON
	and DOUBLE-FLOAT-NEGATIVE-EPSILON on Linux/i386.
	* unixaux.d (__fpu_control): Remove definition.
	* spvw.d (main): Remove __setfpucw call.

2002-07-21  Bruno Haible  <bruno@clisp.org>

	* defs1.lisp (module-name): Rewrite without using ETYPECASE.

2002-07-21  Bruno Haible  <bruno@clisp.org>

	* m4/rusage.m4 (CL_RUSAGE): Move CL_LINK_CHECK outside of
	AC_CACHE_CHECK.

2002-07-21  Bruno Haible  <bruno@clisp.org>

	* configure: Test ulimit result against 'unlimited'.

2002-07-21  Sam Steingold  <sds@gnu.org>

	* m4/readline.m4 (CL_READLINE): fixed whitespace
	* configure: remove config.cache to avoid stale cache problems
	* stream.d: #include <stdio.h> before <readline/readline.h>
	because of FILE* references in readline.h

2002-07-20  Sam Steingold  <sds@gnu.org>

	* m4/readline.m4 (CL_READLINE): check for the name of the file
	completion function and CONST modifier of its first argument
	* unixconf.h.in (READLINE_CONST, READLINE_FILE_COMPLETE): undef
	* stream.d: use them

2002-07-19  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): more begin/end_system_call

2002-07-19  Sam Steingold  <sds@gnu.org>

	* m4/termcap.m4 (CL_TERMCAP): use AC_SEARCH_LIBS
	* m4/readline.m4 (CL_READLINE): AC_REQUIRE CL_TERMCAP;
	check for the readline library, not just the header
	* configure (conf_dir): new function
	* makemake.in (LIBS): LIBTERMCAP and LIBREADLINE
	get into LIBS automagically

2002-07-19  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (GNU_GETTEXT): define based on NO_GETTEXT and
	ENABLE_NLS, not complex heuristics

2002-07-19  Sam Steingold  <sds@gnu.org>

	do not distribute readline and termcap with CLISP
	* configure, makemake.in: dropped termcap and readline
	* m4/termcap.m4 (LIBTERMCAP): set to "broken" when termcap does
	not work
	* m4/readline.m4 (CL_READLINE): new test
	* configure.in (CL_READLINE): call it
	* lispbibl.d (GNU_READLINE): define based on NO_READLINE and
	HAVE_READLINE_READLINE_H, not complex heuristics
	* stream.d [GNU_READLINE]: include system headers, not local ones
	* unixconf.h.in (HAVE_READLINE_READLINE_H): undef
	* readline/*, termcap/*: removed
	* _distmakefile: removed readline docs

2002-07-19  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 583751 ]: (compile-file xx :verbose NIL)
	* compiler.lisp (with-compilation-unit): bind *C-LISTING-OUTPUT*

2002-07-15  Marco Baringer  <empb@bese.it>
	    Sam Steingold  <sds@gnu.org>

	POSIX:DUPLICATE-HANDLE - interface to dup/dup2/DuplicateHandle
	* pathname.d (DUPLICATE-HANDLE): implemented
	* constsym.d, subr.d (duplicate_handle): ditto
	* posix.lisp (duplicate-handle): export

2002-07-16  Sam Steingold  <sds@gnu.org>

	* defs1.lisp (module-name): do not use ETYPECASE for
	bootstrapping reasons
	Reported by Marco Baringer <empb@bese.it>

2002-07-16  Sam Steingold  <sds@gnu.org>

	* misc.d (GETENV): return all the environment as an alist when
	the argument is NIL or omitted

2002-07-15  Bruno Haible  <bruno@clisp.org>

	* unix.d (fstatfs): Remove unused declaration.

	* makemake.in (lisp.a): Adapt to gcc-3.1; its libgcc.a contains *.oS,
	not *.o.

	* spvw_sigsegv.d (stackoverflow_handler): Add support for FreeBSD.

	* io.d (right_margin): Avoid gcc warning when compiling with -DWIDE.

	* lispbibl.d (copy_mem_o): Fix parentheses.
	(UNIX_HURD): Renamed from UNIX_GNU.
	(UNIX_GNU): New macro.
	(_REENTRANT): Use for UNIX_GNU, not only UNIX_LINUX.
	(setjmp, longjmp): Treat UNIX_GNU like UNIX_LINUX.

2002-07-15  Sam Steingold  <sds@gnu.org>

	check for OpenLDAP
	* m4/ldap.m4: new file
	* unixconf.h.in (HAVE_LDAP_H): undef
	* configure.in (CL_LDAP): call

2002-07-15  Sam Steingold  <sds@gnu.org>

	fallout of 2002-07-09 parse-namestring patch in ANSI mode
	* pathname.d (test_default_pathname): treat NIL as unbound,
	permitting (parse-namestring "foo" nil nil ...) again
	* compiler.lisp (compile-file-pathname-helper): do not pass
	NIL as the :DEFAULTS to MAKE-PATHNAME

2002-07-15  Sam Steingold  <sds@gnu.org>

	* configure: user-specified options (like --with-noreadline)
	override the default/inferred options

2002-07-15  Sam Steingold  <sds@gnu.org>

	* pathname.d (wildcard_match): handle special patterns like
	:WILD, :WILD-INFERIORS, :UP and :BACK

2002-07-15  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 581646 ]: REQUIRE uses STRING-EQUAL
	since CLISP in ANSI mode does not coerce symbols to pathnames,
	this also fixes a bug introduced on 2002-07-09 which precluded
	symbols as module names
	* defs1.lisp (module-name): new function
	(provide, require): use it to convert module name to a string
	* compiler (c-PROVIDE, c-REQUIRE): ditto
	(require, c-REQUIRE): use STRING= instead of STRING-EQUAL

2002-07-15  Sam Steingold  <sds@gnu.org>

	* _distmakefile (clisp): new target for installing locally

2002-07-13  Sam Steingold  <sds@gnu.org>

	ported DIR-KEY to cygwin32
	* dirkey1.lisp (dir-key): export
	* dirkey.d (to_time_t_): stole from cygwin sources
	* constsym.d (Kwin32) [UNIX_CYGWIN32 DIR_KEY]: define

2002-07-13  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 514741 ]: ldap bugs (describe, dir-key-info)
	* describe.lisp (describe-object): handle DIR-KEY

2002-07-12  Sam Steingold  <sds@gnu.org>

	reverted the last patch wrt bindings (it broke lots of stuff)
	* control.d: reverted
	* eval.d (progv): reverted
	* compiler (bind-check-lock): removed
	(set-check-lock): use SYMBOL-VALUE-LOCK
	(c-LET/LET*, c-MULTIPLE-VALUE-BIND): reverted
	* package.d (SYMBOL-VALUE-LOCK): new function
	* subr.d, constsym.d (symbol_value_lock): ditto

2002-07-11  Sam Steingold  <sds@gnu.org>

	extended package locking to assignments and bindings
	* compiler.lisp (set-check-lock, bind-check-lock): new functions
	(c-SETQ, c-PSETQ, c-MULTIPLE-VALUE-SETQ): use SET-CHECK-LOCK
	(c-LET/LET*, c-MULTIPLE-VALUE-BIND): use BIND-CHECK-LOCK
	* package.d (symbol_value_check_lock): new function
	* lispbibl.d (symbol_value_check_lock): declare
	* control.d (LET, LET*, COMPILER-LET): use it
	* eval.d (progv, setq): ditto

2002-07-11  Sam Steingold  <sds@gnu.org>

	fixed bug #[ 580090 ]: unbound SYSTEM::*COMPILING-FROM-FILE*
	error on (lambda () (defmethod ...))
	* init.lisp (%expand-form): when evaluating (EVAL-WHEN (COMPILE))
	bind COMPILER::*COMPILING-FROM-FILE* to nil

2002-07-10  Sam Steingold  <sds@gnu.org>

	* spvw.d (quit): call done_win32()

2002-07-09  Sam Steingold  <sds@gnu.org>

	* compiler.lisp (compile-file): do not clobber *.c file when
	there are no FFI forms

2002-07-09  Sam Steingold  <sds@gnu.org>

	* bindings/linuxlibc6/linux.lisp (read): added commas before
	arguments in backquote

2002-07-09  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): consider the situation FUNCTIONALP
	when start==end, this fixes the "(finalize TAB" bug)

2002-07-09  Sam Steingold  <sds@gnu.org>

	* pathname.d (PARSE-NAMESTRING): barf on symbols when
	CUSTOM:*PARSE-NAMESTRING-ANSI* is non-NIL
	(FILE-STAT-INTERNAL): use coerce_pathname()

2002-07-08  Sam Steingold  <sds@gnu.org>

	* clos.lisp (check-metaclass-mix): new function
	(initialize-instance-standard-class, make-instance-built-in-class):
	(initialize-instance-structure-class): use it

2002-07-02  Sam Steingold  <sds@gnu.org>

	* _clisp.c [STDC_HEADERS]: #include <stdlib.h> (HAVE_STDLIB_H is
	obsolete)

2002-07-01  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): removed the obsolete -W option for the sake of
	the CYGWIN port getting "-M c:/gnu/clisp/lispinit.mem"
	* _clisp.c (main): ditto

2002-07-01  LaMont Jones  <lamont@smallone.fc.hp.com>

	* ffcall/callback/trampoline_r/trampoline.c (alloc_trampoline_r)
	(is_tramp): work around a bug in gcc 3.*
	* ffcall/avcall/avcall-hppa.s:
	* ffcall/callback/trampoline_r/cache-hppa.s:
	* ffcall/callback/trampoline_r/proto-hppa.s:
	* ffcall/callback/trampoline_r/tramp-hppa.s:
	* ffcall/callback/vacall_r/vacall-hppa.s:
	* ffcall/trampoline/cache-hppa.s:
	* ffcall/trampoline/proto-hppa.s:
	* ffcall/trampoline/tramp-hppa.s:
	* ffcall/vacall/vacall-hppa.s:
	support both HP-UX assembler and GAS

2002-07-01  Sam Steingold  <sds@gnu.org>

	* makemake.in (echotab_mkdir_maybe): pass `-p' to mkdir(1)
	(shared): new make var; create it before doc dirs

2002-06-29  Sam Steingold  <sds@gnu.org>

	implemented feature request #[ 575303 ]: quit to top-level in debugger
	* reploop.lisp (debug-quit): new function
	(commands1): document `Quit/:q'
	(break-loop, step-hook-fn): handle it (as `abort-to-top')
	* control.d (UNWIND-TO-TOP): new function
	* constsym.d, subr.d (unwind_to_top): ditto

2002-06-28  Sam Steingold  <sds@gnu.org>

	* configure: work around the ulimit bug in cygwin /bin/sh

2002-06-28  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (alloca) [UNIX_CYGWIN32]: already defined in <alloca.h>

2002-06-27  Sam Steingold  <sds@gnu.org>

	fixed Sparc/Linux glibc 2.2 --with-debug build
	* lispbibl.d (oint_type_*, oint_data_*) [SPARC UNIX_LINUX]:
	do special handling only for glibc 2.1 and earlier

2002-06-27  Sam Steingold  <sds@gnu.org>

	* configure: check stack limit and suggest ulimit when printing
	further recommendations and call ulimit before make

2002-06-26  Sam Steingold  <sds@gnu.org>

	* lispbibl.d: separate `chart' and `object'
	(object, as_oint, as_object) [OBJECT_STRUCT]: `one' --> `one_o'
	(chart, as_cint, as_chart) [CHART_STRUCT]: `one' --> `one_c'
	* stream.d (stream_reset_eltype): compare ch with LF properly
	* array.d (make_storagevector): use char_int(), not as_cint(), to
	convert an object to `cint'
	* spvw_mark.d (mark, unmark): object slot is `one_o'

2002-06-26  Sam Steingold  <sds@gnu.org>

	* m4/general.m4 (CL_CANONICAL_HOST_CPU)
	(CL_CANONICAL_HOST_CPU_FOR_FFCALL): handle hppa64
	the same way as hppa1 and hppa2
	Suggested by Will Newton <will@misconception.org.uk>

2002-06-25  Sam Steingold  <sds@gnu.org>

	memcpy() & begin/end_system_call() cleanup
	* lispbibl.d (copy_mem_b, copy_mem_o): new macros
	(do_cclosure_copy): use copy_mem_o()
	* hashtabl.d (%SET-HASH-TABLE-WEAK-P): use copy_mem_o()
	instead of memcpy()
	* record.d (COPY-STRUCTURE): ditto
	* stream.d (read_byte_array_buffered, write_byte_array_buffered)
	(READ-FLOAT, WRITE-FLOAT): use copy_mem_b() instead of memcpy()
	(%DEFGRAY): use copy_mem_o() instead of memcpy()
	(create_input_pipe, create_output_pipe, create_io_pipe):
	move the memcpy() call inside the begin/end_system_call()
	* encoding.d (MAKE-ENCODING): use copy_mem_b() instead of memcpy()

2002-06-25  Sam Steingold  <sds@gnu.org>

	fixed the spurious "fatal error in the fatal error handler" message:
	break_driver() lost the stack location of its `continuable' argument
	* debug.d (break_driver): accept a boolean argument instead of an
	object (save on stack manipulation, gain clarity)
	* lispbibl.d (break_driver): fixed the prototype
	* eval.d (unwind): adjusted break_driver() call
	* error.d (end_error, ERROR, ERROR-OF-TYPE, tast_break): ditto

2002-06-25  Sam Steingold  <sds@gnu.org>

	* error.d (end_error): print the abort message to stderr
	include <stdio.h> to avoid compiler warning

2002-06-25  Sam Steingold  <sds@gnu.org>

	* charstrg.d (STRING-INFO): new function
	* constsym.d, subr.d (string_info): ditto

2002-06-25  Sam Steingold  <sds@gnu.org>

	* stream.d (test_external_format_arg): fixed for the 2002-06-19
	patch (new MAKE-ENCODING keyword arg)

2002-06-20  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (CHART_STRUCT): Enable for gcc >= 3.0.

2002-06-20  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (sstring_): Define using chart.
	(Sstring): Likewise.
	* array.d (elt_copy_T_Char, ssstring_extend_low): Make it compile
	with CHART_STRUCT.
	* charstrg.d (copy_string, subsstring, SUBSTRING, string_concat):
	Likewise.
	* io.d (write_sstring_case): Likewise.
	* lisparit.d (decimal_string): Likewise.
	* pathname.d (Z_AT_SLASH): Fix for changed return type of schar.
	(wildcard_diff_ab): Likewise.

2002-06-20  Sam Steingold  <sds@gnu.org>

	* record.d (COPY-STRUCTURE): use memcpy() instead of dotimespC
	(call_init_fun): new function
	(%REINITIALIZE-INSTANCE, do_initialize_instance): use it

2002-06-20  Sam Steingold  <sds@gnu.org>

	* spvw_typealloc.d (reallocate_small_string) [TYPECODES]:
	fixed a typo

2002-06-19  Sam Steingold  <sds@gnu.org>

	* pathname.d (nametype_diff_aux): treat logical and physical
	pathnames the same way

2002-06-19  Sam Steingold  <sds@gnu.org>

	* encoding.d (MAKE-ENCODING): new keyword argument
	:IF-DOES-NOT-EXIST to return nil for non-existing charsets
	(init_encodings_2): when the charset does not exist,
	just unintern the symbol
	(encoding_from_name): pushSTACK() the extra keyword argument for
	C_make_encoding()
	* subr.d, subrkw.d (make_encoding): new keyword argument
	* lispbibl.d (check_charset): return bool
	* stream.d (open_iconv): do not barf when charset is nullobj
	(check_charset): return false when code is invalid and charset is
	nullobj

2002-06-19  Bruno Haible  <bruno@clisp.org>

	* constsym.d (CHARSET:ARMSCII-8, CHARSET:TCVN): Disable in glibc-2.2.

2002-06-19  Sam Steingold  <sds@gnu.org>

	new built-in MEMQ == MEMBER :TEST #'EQ
	* list.d (MEMQ): new function (uses memq)
	* constsym.d, subr.d (memq): ditto
	* clos.lisp, compiler.lisp, defstruct.lisp, describe.lisp:
	* init.lisp, type.lisp: use it instead of MEMBER :TEST #'EQ

2002-06-17  Sam Steingold  <sds@gnu.org>

	abstracted some code
	* list.d (memq): new function
	* lispbibl.d (memq): declare
	* control.d (PROCLAIM, KEYWORD-TEST): use it
	* eval.d (augment_decl_env): ditto
	* io.d (interpret_feature): ditto
	* package.d (symtab_find, symtab_delete, shadowing_find)
	(use_package, %IN-PACKAGE, FIND-ALL-SYMBOLS, RE-EXPORT): ditto
	* symbol.d (GET-PROPERTIES): ditto
	* record.d (obj_in_list): removed (superseded by memq)
	(structure_up, %STRUCTURE-TYPE-P, keyword_test, slot_in_arglist)
	(%SHARED-INITIALIZE): use !null(memq()) instead of obj_in_list()

2002-06-17  Sam Steingold  <sds@gnu.org>

	* lispbibl.d [DECALPHA/UNIX_FREEBSD]: treat just like Linux
	Verified by Jeffrey Katcher <jmkatcher@yahoo.com>.

2002-06-15  Sam Steingold  <sds@gnu.org>

	* modules/clx/mit-clx/input.lisp (:configure-request): use
	`member8' instead of `member' for `data'
	From <http://ww.telent.net/cliki/eclipse>
	and <http://dept-info.labri.u-bordeaux.fr/~strandh/patch-xlib.lisp>

2002-06-15  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	more fixes for bug #[ 542902 ]: not only socket-wait is
	interruptible on windows, but also socket-accept is
	* socket.d (accept_connection) [WIN32_NATIVE]: interruptible
	check socket for readability (infinitely long) before calling
	accept.

2002-06-14  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): when there is no word to complete,
	describe the current funcall and return 0
	* stream.d (lisp_completion): when COMPLETION returns 0,
	refresh the current line using rl_refresh_line()

2002-06-14  Sam Steingold  <sds@gnu.org>

	grand type renaming continues
	array_dim_size --> array_dim_size_t
	environment --> environment_t
	gc_function --> gc_function_t
	host_data --> host_data_t
	host_data_fetcher --> host_data_fetcher_t
	map_sequence_function --> map_sequence_function_t
	module_ --> module_t
	sockaddr_max --> sockaddr_max_t
	stack_range --> stack_range_t
	thread_ --> thread_t
	unwind_protect_caller --> unwind_protect_caller_t
	* modules/clx/new-clx/clx.f, modules/clx/new-clx/e2d.c:
	* affi.d, array.d, control.d, debug.d, eval.d, foreign1.lisp:
	* fsubr.d, genclisph.d, io.d, lispbibl.d, modules.d, predtype.d:
	* sequence.d, spvw.d, spvw_memfile.d, spvw_module.d:
	* spvw_space.d, spvw_walk.d, spvwtabf.d, subr.d:
	* utils/modprep.d, utils/modpreptest.out: replaced

2002-06-14  Sam Steingold  <sds@gnu.org>

	* spvw_genera1.d (rebuild_old_generation_cache): fixed last
	patch: FREE_DYNAMIC_ARRAY should be on the same block level as
	DYNAMIC_ARRAY

2002-06-14  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	fixed bug #[ 514805 ]: core dump using :rehash-size in 9nines
	On MSVC, also UNIX with HAVE_ALLOCA_H, RISCOS and others, where
	DYNAMIC_ARRAY implemented through _alloca(3), putting it
	into the loop is dangerous: stack is freed only when function
	returns, not by FREE_DYNAMIC_ARRAY.
	* spvw_genera1.d (rebuild_old_generation_cache): put allocation
	of fixed sized block out of loop. May allocate unneeded block,
	but that case seems rare to me.

2002-06-13  Sam Steingold  <sds@gnu.org>

	grand type renaming: * --> *_t:
	decoded_time --> decoded_time_t
	internal_time --> internal_time_t
	lisp_function --> lisp_function_t
	map_heap_function --> map_heap_function_t
	object_initdata --> object_initdata_t
	subr_initdata --> subr_initdata_t
	timescore --> timescore_t
	* modules/clx/new-clx/e2d.c, affi.d, eval.d, foreign1.lisp,
	* fsubr.d, genclisph.d, lisparit.d, lispbibl.d, modules.d,
	* pathname.d, spvw.d, spvw_gcstat.d, spvw_walk.d, subr.d, time.d,
	* utils/modprep.d, utils/modpreptest.out: replaced

2002-06-12  Sam Steingold  <sds@gnu.org>

	Russian messages are now working
	* configure.in (ALL_LINGUAS): added `ru'
	* constsym.d (russian): added
	* init.lisp (russian.lisp) [GETTEX UNICODE]: load
	* russian.lisp: new file
	* spvw_language.d (language_russian): added
	(current_language_o, init_language): handle it
	(init_language_from): check for Russian
	* makemake.in (LPARTS) [$with_unicode]: added russian

2002-06-12  Sam Steingold  <sds@gnu.org>

	* lispbibl.d (schar): match the cast in return the the return type

2002-06-12  Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Fixed win32 build
	* win32.d [_MSC_VER]: no LC_MESSAGES in msvc
	* socket.d (connect_via_ip): fixed bad goto

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (schar): Add comments! Change return type to chart.
	Make 'static inline', not 'global inline', for better inlining.
	* array.d (storagevector_aref): Update for schar change.
	* charstrg.d (schar): Remove out-of-line definition.
	(coerce_char): Update for schar change.
	(CHAR, SCHAR): Likewise.
	* debug.d (read_form): Likewise.
	* io.d (sstring_printf): Likewise.
	* pathname.d (Z_AT_SLASH, parse_logical_word)
	(parse_logical_host_prefix, parse_logical_pathnamestring)
	(PARSE-NAMESTRING): Likewise.
	(legal_logical_word): Change variable from 'cintX' to 'chart', it's
	safer.
	(legal_type, wild_p, word_wild_p): Likewise.
	(wildcard_diff_ab): Update for schar change. Simplify filling string.
	(translate_nametype_aux, ensure_last_slash): Update for schar change.
	* stream.d (read_char_array, rd_ch_str_in, wr_ch_array_pphelp)
	(rd_ch_buff_in): Likewise.

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCFLAGS): Put a space before --traditional-cpp.

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* array.d (make_storagevector): Create a string with as small
	element size as possible.

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* encoding.d (MAKE-ENCODING): Fix a GC safety bug. Use the
	original arg for the error message, not the upcased one.

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* socket.d (CLOSESOCKET): Make macro more robust.

2002-06-12  Bruno Haible  <bruno@clisp.org>

	* m4/lcmessage.m4 (AM_LC_MESSAGES): Do not test
	ac_cv_header_locale_h here.
	* m4/gettext.m4 (AM_INTL_SUBDIR): Test it here.
	* configure.in: Call AM_LC_MESSAGES.
	* unixconf.h.in (HAVE_LC_MESSAGES): New macro.
	* win32.d (HAVE_LC_MESSAGES): New macro.
	* spvw_ctype.d (init_ctype): Use HAVE_LC_MESSAGES.

2002-06-12  Eduard Haritonov <hed@iis.nsk.su>
	    Arseny Slobodjuck  <ampy@ich.dvo.ru>

	Long awaited Russian translations
	* po/Makefile.devel: added ru language
	* po/Makefile.trans.ru: new translator's makefile
	* po/ru.po: new translations file

2002-06-11  Sam Steingold  <sds@gnu.org>

	* complete.lisp (completion): restored adding ")" when completing
	a function without arguments, broken since FUNCTION-SIGNATURE was
	modified to return the function name as the first value

2002-06-11  Sam Steingold  <sds@gnu.org>

	* spvw.d (main): added an undocumented, unsupported `-d'
	developer option: not in usage(), clisp.c, clisp.html, clisp.1 &c
	for now just unlock all packages

2002-06-11  Sam Steingold  <sds@gnu.org>

	* makemake.in (XCFLAGS) [darwin]: add `--traditional-cpp'
	(--verbose): new option

2002-06-11  Sam Steingold  <sds@gnu.org>

	* spvw_ctype.d (init_ctype) [UNIX_DARWIN]: no LC_MESSAGES,
	just like on WIN32_NATIVE

2002-06-10  Sam Steingold  <sds@gnu.org>

	* charstrg.d (string_gleich): use string_eqcomp()
	(string_equal): use string_eqcomp_ci()

2002-06-10  Sam Steingold  <sds@gnu.org>

	make string element access slightly easier: use schar()
	* lispbibl.d (schar): define
	* charstrg.d (schar) [HAVE_SMALL_SSTRING]: implement
	(coerce_char, CHAR, SCHAR): use schar()
	* array.d (storagevector_aref): use schar()
	* debug.d (read_form): ditto
	* io.d (sstring_printf): ditto
	* pathname.d (schar): removed
	(parse_logical_word, parse_logical_host_prefix)
	(parse_logical_pathnamestring, translate_nametype_aux)
	(parse_logical_host_prefix, wildcard_diff_ab)
	(ensure_last_slash): use direct `==' instead of chareq(as_chart)
	* stream.d (read_char_array, rd_ch_str_in, wr_ch_array_pphelp)
	(rd_ch_buff_in): use schar()

2002-06-10  Sam Steingold  <sds@gnu.org>

	* pathname.d (common_case, test_optional_host, all_digits)
	(split_name_type, legal_logical_word, legal_type, wild_p)
	(word_wild_p, Z_AT_SLASH): adjusted for the new SIMPLE-STRING
	model by using SstringDispatch (for the 2002-05-26 UCS-4 patch)
	(schar, copy_upcase): new functions
	(parse_logical_word, translate_nametype_aux, PARSE-NAMESTRING)
	(parse_logical_host_prefix, parse_logical_pathnamestring)
	(wildcard_diff_ab): use them

2002-06-10  Sam Steingold  <sds@gnu.org>

	* makemake.in: when running CLISP, pass "-E UTF-8" instead of
	"-Efile UTF-8" for the sake of "make check" on badly localized
	machines (ascii terminals make UNICODE warnings into errors)

2002-06-10  Sam Steingold  <sds@gnu.org>

	user can now control the exit code better
	* lispbibl.d, spvw.d (final_exitcode): int, not bool (spvw.d
	and win32aux.d already assign it non-bool values)
	* control.d (%EXIT): errorp maybe a positive fixnum, in which
	case we can use its value for final_exitcode

2002-06-10  Sam Steingold  <sds@gnu.org>

	* erramiga.d: do not use /* ENGLISH */ to mark
	gettext catalog messages

2002-06-07  Sam Steingold  <sds@gnu.org>

	* modules/clx/new-clx/configure.in: work with autoconf-2.53
	(GB_CHECK): removed

2002-06-07  Sam Steingold  <sds@gnu.org>

	do not distribute autoconf with CLISP
	* Makefile.devel (EXCLUDE): exclude the po/tmp and autoconf cache
	(AUTOCONF_VERSION): new exported variable
	(AUTOCONF, AUTOCONF_CACHE): new variables
	(AUTOCONF_FILES): removed autoconf.m4f
	(*/configure): use $(AUTOCONF)
	(check-configures): remove $(AUTOCONF_CACHE)
	(potfiles): cleanup
	* ffcall/Makefile.devel (AUTOCONF_VERSION, AUTOCONF): new variables
	(AUTOCONF_FILES): removed autoconf.m4f
	(*/configure): use $(AUTOCONF)
	* libcharset/Makefile.devel, sigsegv/Makefile.devel:
	(AUTOCONF_VERSION, AUTOCONF): new variables
	(*/configure): use $(AUTOCONF)
	* ffcall/autoconf/autoconf, ffcall/autoconf/autoconf.m4f,
	* sigsegv/autoconf/autoconf, sigsegv/autoconf/autoconf.m4f,
	* src/autoconf/autoconf, src/autoconf/autoconf.m4f: removed

2002-06-06  Peter Burwood  <clisp@peterb.org.uk>

	* stdint.h.in (NEED_SIGNED_INT_TYPES): New define.
	(int8_t) [NEED_SIGNED_INT_TYPES]: Declare type only when needed.
	(int16_t, int32_t, int64_t): Likewise.

2002-06-05  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (DYNAMIC_STRING) [UNICODE]: Use Rectype_S32string, not
	Rectype_S8string.

2002-06-05  Sam Steingold  <sds@gnu.org>

	tweaked the last Arseny's patch
	* socket.d (lingerize_socket) [WIN32]: removed (not used)
	(ioctl) [WIN32]: moved to win32.d
	* win32.d (ioctl): define here, just like ioctl for UNIX is
	defined in unix.d

2002-06-04  Peter Burwood  <clisp@peterb.org.uk>

	* m4/address.m4 (CL_ADDRESS_RANGE): Remove cl_cv_prog_cc_ansi test
	now that CL_CC_ANSI is not required.

2002-06-05  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Working with sockets on win32
	* win32.d (socket_wait_event): new enum typedef
	(interruptible_socket_wait): renamed from
	interruptible_wait and generalized to take event parameter,
	see socket select() function for description of	these events.
	* win32aux.d (socket_wait_params): parameter struct to pass
	in thread.
	(do_socket_wait): renamed from do_wait, takes struct
	as Joerg likes, now tests for given event, not only for read.
	(interruptible_socket_wait): parameters changed to struct.
	* socket.d (ioctl) [WIN32]: define on win32 as ioctlsocket.
	(bindlisten_via_ip): don't lingerize socket (seems working,
	need to test).
	(connect_via_ip): don't lingerize. Fixed for win32 (may affect
	UNIX behavior too).
	* stream.d (socket_server_wait): use renamed
	interruptible_socket_wait.

2002-06-04  Peter Burwood  <clisp@peterb.org.uk>

	* lispbibl.d (DYNAMIC_STRING): Replace obsolete Rectype_Sstring with
	Rectype_S8string

2002-06-04  Sam Steingold  <sds@gnu.org>

	* savemem.lisp (saveinitmem): added :START-PACKAGE argument

2002-06-04  Sam Steingold  <sds@gnu.org>

	* Makefile.devel (CONFIGURES): added libcharset/configure
	(libcharset/configure): new target

2002-06-03  Sam Steingold  <sds@gnu.org>

	* describe.lisp (describe-object): print the length of the lists
	before enumerating properties, packages, symbols &c

2002-06-03  Sam Steingold  <sds@gnu.org>

	* makemake.in (packopt): fixed the 2002-05-15 patch which broke
	giving meaningful package options (e.g. --with-threads=POSIX_THREADS)

2002-06-03  Sam Steingold  <sds@gnu.org>

	build process: tweak 2002-05-30 patch: instead of relying on
	HAVE_*_H, add "." to the include path (-I.) and #include <...>
	* makemake.in (XCFLAGS): add -I. when STDBOOL_H and STDINT_H
	are non-void
	* lispbibl.d, uniname.c, unitypes.h: #include <...>

2002-05-31  Sam Steingold  <sds@gnu.org>

	tweaked the last two win32 patches
	* socket.d (connect_via_ip): use sock_set_errno() instead of
	explicit errno= (for the benefit of win32)
	* win32.d (EINPROGRESS, ETIMEDOUT): removed
	(earlylate_asciz_error): removed declaration
	* win32aux.d (earlylate_asciz_error): local, not global
	if we need such global function in the future,
	it should probably go into <error.d>

2002-06-01  Arseny Slobodjuck <ampy@ich.dvo.ru>

	Win32 build fixes
	* win32.d: include <locale.h>
	(EINPROGRESS, ETIMEDOUT): define to use instead of WSAE*.
	* spvw_ctype (init_ctype) [WIN32_NATIVE]: LC_MESSAGES is not
	defined on win32

2002-05-31  Arseny Slobodjuck <ampy@ich.dvo.ru>

	* win32.d (stderr_handle): new global variable.
	(earlylate_asciz_error): new function.
	* win32aux.d (stderr_handle): define.
	(winsock_initialized): new static variable.
	(init_win32): initialize stderr_handle,
	set winsock_initialized, use earlylate_asciz_error
	(done_win32): use winsock_initialized flag.
	(earlylate_asciz_error): New function. Prints an
	error to stderr, optionally exits clisp (the latter
	is not recommended). Does not use clisp internals.

2002-05-30  Sam Steingold  <sds@gnu.org>

	* genclisph.d: anticipate possible future addition of stdint.h
	(print_file): new function
	(main): use it to output stdbool.h

2002-05-30  Sam Steingold  <sds@gnu.org>

	OpenBSD build fixes
	* lispbibl.d, uniname.c (stdbool.h): check HAVE_STDBOOL_H
	* unitypes.h (stdint.h): check HAVE_STDINT_H
	* unixconf.h.in (HAVE_STDINT_H): added an #undef

2002-05-29  Sam Steingold  <sds@gnu.org>

	* makemake.in (UNICODE_EXTRA): new variable (fixed the build
	broken by addition of streq.h cjk.h uniwidth.h width.c)

2002-05-28  Sam Steingold  <sds@gnu.org>

	* socket.d (connect_via_ip): when 0 timeout is given return
	immediately (do not wait at all); the next i/o operation on this
	socket might block - use SOCKET-STATUS to check that

2002-05-29  Bruno Haible  <bruno@clisp.org>

	Speed up the loading of type.lisp.
	* lispbibl.d (Encoding): Add a maxintervals argument to the enc_range
	function.
	(Encoding_range): Update.
	* stream.d (iconv_range): Add a maxintervals argument.
	* encoding.d (all_range): Likewise.
	(bmp_range): Likewise.
	(nls_range): Likewise.
	(SYSTEM::CHARSET-TYPEP): Update.
	(SYSTEM::CHARSET-RANGE): Add optional maxintervals argument.
	* pseudofun.d (all_range, nls_range, iconv_range): Add a maxintervals
	argument.
	* type.lisp (get-charset-range): Add optional maxintervals argument.

2002-05-29  Bruno Haible  <bruno@clisp.org>

	Upgrade CHAR-WIDTH and STRING-WIDTH to Unicode 3.2.
	* streq.h: New file, from libunistring-0.0.
	* cjk.h: New file, from libunistring-0.0.
	* uniwidth.h: New file, from libunistring-0.0.
	* width.c: New file, from libunistring-0.0.
	* charstrg.d (nonspacing_table_data, nonspacing_table_ind): Remove
	arrays. Instead include width.c.
	(char_width): Rewritten to use uc_width.
	* spvw.d (locale_encoding): New variable.
	* encoding.d (init_dependent_encodings): Initialize locale_encoding.

2002-05-28  Sam Steingold  <sds@gnu.org>

	* stream.d (buffered_half_flush, buffered_full_flush): removed
	(buffered_flush): always do what buffered_half_flush() used to do

2002-05-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (STACK_register): Fix #if condition.

2002-05-28  Bruno Haible  <bruno@clisp.org>

	* makemake.in (XCC_GCC_VERSION): Update for gcc 3.1.
	(XCFLAGS): With gcc 3.1, add -fno-gcse.

2002-05-28  Bruno Haible  <bruno@clisp.org>

	* lispbibl.d (setSP, FAST_SP) [I80386]: Don't define when using
	gcc-3.1.
