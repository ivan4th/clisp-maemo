<?xml version="1.0" encoding="UTF-8"?>

<chapter id="intro" label="Chapter 1">
 <title><ulink url="&clhs;/Body/chap-1.html">Introduction</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_1-4-1-3.html">1.4.1.3
  Special Symbols</ulink></title>

<para>The final delimiter of an interactive stream: On Unix, the user
 has to type
 <keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo> at the
 beginning of a line. On DOS or Win32, the user has to type
 <keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo>, followed
 by <keycap>Return</keycap>.  This final delimiter is never actually
 seen by programs; no need to test for <keysym>#\^D</keysym> or
 <keysym>#\^Z</keysym> - use &read-char-no-hang; to check for end of
 stream.  Calling &clear-input; on the stream removes the &eos; state,
 thus making it available for further input.</para>

<para>A newline character can be entered by the user by pressing the
 <keycap>Newline</keycap> key or, on the numeric keypad, the
 <keycap>Enter</keycap> key.</para>

</section>


<section><title><ulink url="&clhs;/Body/sec_1-4-2.html">1.4.2
  Error Terminology</ulink></title>

<para>Safety settings are ignored; therefore where the standard uses the
 phrase <quote>should signal an error</quote>, an &error; is signaled.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_1-4-4-5.html">1.4.4.5
   Class Precedence Lists</ulink></title>

<para>The class precedence lists of the system classes &class;
 &built-in-class;, &structure-class;, &standard-class;,
 &standard-method-class; contain the class &structure-object-class;
 instead of the class &standard-object-class;.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_1-9.html">1.9
   Symbols in the Package</ulink> &cl-pac;</title>

<para>31 symbol missing from the &cl-pac; package
 (out of 978 specified by the &ansi-cl;):</para>

<simplelist type="horiz" columns="3">
 <member>&print-lines-var;</member>
 <member>&print-miser-width-var;</member>
 <member>&print-pprint-dispatch-var;</member>
 <member>&call-method;</member>
 <member>&change-class;</member>
 <member>&compiler-macro-function;</member>
 <member>&compiler-macro-doc;</member>
 <member>&copy-pprint-dispatch;</member>
 <member>&define-compiler-macro;</member>
 <member>&define-method-combination;</member>
 <member>&ensure-generic-function;</member>
 <member>&invalid-method-error;</member>
 <member>&make-instances-obsolete;</member>
 <member>&make-load-form-saving-slots;</member>
 <member>&make-load-form;</member>
 <member>&make-method;</member>
 <member>&method-combination-error;</member>
 <member>&method-combination-class;</member>
 <member>&pprint-dispatch;</member>
 <member>&pprint-exit-if-list-exhausted;</member>
 <member>&pprint-fill;</member>
 <member>&pprint-indent;</member>
 <member>&pprint-linear;</member>
 <member>&pprint-logical-block;</member>
 <member>&pprint-newline;</member>
 <member>&pprint-pop;</member>
 <member>&pprint-tab;</member>
 <member>&pprint-tabular;</member>
 <member>&set-pprint-dispatch;</member>
 <member>&update-instance-for-different-class;</member>
 <member>&update-instance-for-redefined-class;</member>
</simplelist>

</section>

</chapter>

<chapter id="syntax"><title><ulink url="&clhs;/Body/chap-2.html">Chapter 2:
   Syntax</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_2-3-4.html">2.3.4
   Symbols as Tokens</ulink></title>

<para>A "reserved token", i.e., a <ulink
 url="&clhs;/Body/glo_t.html#token">token</ulink> that has potential number
 syntax but cannot be interpreted as a number, is interpreted as symbol
 when being read.</para>

<para>When creating a symbol from a token, no character attributes are
 removed.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_2-3-5.html">2.3.5
   Valid Patterns for Tokens</ulink></title>

<para>When a token with package markers is read, then no checking is
 done whether the package part and the symbol-name part do not have
 number syntax. (What's the purpose of this check?) So we consider
 tokens like <token>USER::</token> or <token>:1</token> or
 <token>LISP::4711</token> or <token>21:3</token> as
 symbols.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_2-4-5.html">2.4.5
   Double-Quote</ulink></title>

<para>When a string is read, no character attributes are removed.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_2-4-6.html">2.4.6
   Backquote</ulink></title>

<para>The backquote read macro also works when nested. Example:
<informalexample><programlisting>
   (&eval; ``(,#'(&lambda; () ',a) ,#'(&lambda; () ',b)))
 = (&eval; `(list #'(&lambda; () ',a) #'(&lambda; () ',b)))
 = (&eval; (list 'list (list 'function (list 'lambda nil (list 'quote a)))
                     (list 'function (list 'lambda nil (list 'quote b)))))
</programlisting></informalexample></para>

<para>Multiple backquote combinations like <literal>,,@</literal> or
 <literal>,@,@</literal> are not implemented.  Their use would be
 confusing anyway.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_2-4-8.html">2.4.8
  Sharpsign</ulink></title>

<para>Reader macros are also defined for the following:

<segmentedlist><title>Additional reader macros</title>
 <segtitle>Macro</segtitle><segtitle>Meaning</segtitle>
 <seglistitem><seg>#,</seg><seg>load-time evaluation</seg></seglistitem>
 <seglistitem><seg>#Y</seg><seg>function objects and file
  encodings</seg></seglistitem>
 <seglistitem><seg>#&quot;</seg><seg>pathname</seg></seglistitem>
</segmentedlist>
</para>

</section>
</chapter>


<chapter id="eval"><title><ulink url="&clhs;/Body/chap-3.html">Chapter 3:
   Evaluation and Compilation</ulink></title>

<para>All the functions built by &function;, &compile; and the like are
 atoms.  There are built-in functions written in &c-lang;, compiled
 functions (both of type &compiled-function-type;) and interpreted
 functions (of type &function-class;).</para>

<section><title><ulink url="&clhs;/Body/sec_3-1.html">3.1
   Evaluation</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_3-1-1.html">3.1.1
   Introduction to Environments</ulink></title>

<formalpara><title><function>ext:the-environment</function></title>
<para>As in Scheme, the macro <literal
 role="sexp">(<function>ext:the-environment</function>)</literal>
 returns the current lexical environment.  This works only in
 interpreted code and is not compilable!</para></formalpara>

<formalpara><title><literal role="sexp">(ext:eval-env
 <replaceable>form</replaceable> &optional-amp;
 <replaceable>env</replaceable>)</literal></title>
<para>evaluates a form in a given lexical environment, just if the form
 had been part of the program text that environment came from.
</para></formalpara>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_3-2.html">3.2
   Compilation</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_3-2-1.html">3.2.1
   Compiler Terminology</ulink></title>

<para>&clisp; compiles to platform-independent byte-code.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_3-2-4-2-2.html">3.2.4.2.2
   Definition of Similarity</ulink></title>

<para>Hash tables are <ulink
 url="&clhs;/Body/glo_e.html#externalizable_object">externalizable
 object</ulink>s.</para>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_3-3.html">3.3
   Declarations</ulink></title>

<para>The declarations
 <literal role="sexp">(&type-dec; <replaceable>type</replaceable>
        <replaceable>var</replaceable> ...)</literal>,
 <literal role="sexp">(&ftype-dec; <replaceable>type</replaceable>
        <replaceable>fun</replaceable> ...)</literal>,
 <literal role="sexp">(&optimize-dec; (<replaceable>quality</replaceable>
        <replaceable>value</replaceable>) ...)</literal>
   are ignored by the interpreter and the compiler.</para>

<para>The &ansi-cl; declaration <literal role="sexp">(&optimize-dec;
 (debug ...))</literal> is legal.</para>

<para>The &ansi-cl; declaration <literal role="sexp">(&ignorable-dec;
 <replaceable>var</replaceable> ...)</literal> affects the variable
 binding for the variable <replaceable>var</replaceable>.  The compiler
 will not warn about the variable, regardless whether it is used or
 not.</para>

<section id="compile-decl"><title>Additional declarations</title>

<para>The declaration <literal role="sexp">(compile)</literal> has the
 effect that the current form is compiled prior to execution.
 Examples:
<programlisting>
 (locally (declare (compile)) <replaceable>form</replaceable>)
</programlisting>
executes a compiled version of form.</para>

<para><programlisting>
(let ((x 0))
  (flet ((inc () (declare (compile)) (incf x))
         (dec () (decf x)))
    (values #'inc #'dec)))
</programlisting>
 returns two functions.  The first is compiled and increments
 <replaceable>x</replaceable>, the second is interpreted (slower) and
 decrements the same <replaceable>x</replaceable>.</para>

<para>The type assertion <literal role="sexp">(&the;
 <replaceable>value-type</replaceable>
 <replaceable>form</replaceable>)</literal> enforces a type check in
 interpreted code.  No type check is done in compiled code.  See also
 the <link linkend="ethe"><function>ext:ethe</function></link>
 macro.</para>

</section>
</section>

<section id="lalist"><title><ulink url="&clhs;/Body/sec_3-4.html">3.4
   Lambda Lists</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_3-4-6.html">3.4.6
   Boa Lambda Lists</ulink></title>

<para>The initial value of an &aux-amp; variable in a boa &lalist; is
 the value of the corresponding slot's initial form.</para>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_3-8.html">3.8
   The Evaluation and Compilation Dictionary</ulink></title>

<section><title>&special-dec;</title>

<para><literal role="sexp">(&proclaim; '(&special-dec;
 <replaceable>var</replaceable>))</literal> declarations may not be
 undone.  The same holds for &defvar;, &defparameter; and &defconstant;
 declarations.</para>

<para>It is an error if a &defconstant; variable is bound at the
 moment the &defconstant; is executed, but
 &defconstant; does not check this.</para>

<para>Constants may not be bound dynamically or lexically.</para>

</section>

<section><title>&eval-when;</title>

<para>&eval-when; also accepts the situations <literal role="sexp">(not
 eval)</literal> and <literal role="sexp">(not
 compile)</literal>.</para>

</section>

</section>
</chapter>


<chapter id="types"><title><ulink url="&clhs;/Body/chap-4.html">Chapter 4:
   Types and Classes</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_4-2.html">4.2
   Types.</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_4-2-3.html">4.2.3
   Type Specifiers.</ulink></title>

<para>The general form of the &complex-class; type specifier is <literal
 role="sexp">(&complex-class;
 <replaceable>type-of-real-part</replaceable>
 <replaceable>type-of-imaginary-part</replaceable>)</literal>.  The type
 specifier <literal role="sexp">(&complex-class;
 <replaceable>type</replaceable>)</literal> is equivalent to <literal
 role="sexp">(&complex-class; <replaceable>type</replaceable>
 <replaceable>type</replaceable>)</literal>.</para>

<para>The &ansi-cl; type specifier <literal role="sexp">(&real-class;
 <replaceable>low</replaceable>
 <replaceable>high</replaceable>)</literal> denotes the real numbers
 between <replaceable>low</replaceable> and
 <replaceable>high</replaceable>.</para>

<para>&deftype; &lalist;s are subject to destructuring (nested &lalist;s
 are allowed, as in &defmacro;) and may contain a &whole-amp; marker,
 but not an &environment-amp; marker.</para>

<formalpara><title><literal
 role="sexp">(<function>ext:type-expand-1</function>
  <replaceable>typespec</replaceable>)</literal></title>
<para>If <replaceable>typespec</replaceable> is a user-defined type,
 <function>ext:type-expand-1</function> will expand it once and return
 two values: the expansion and &t;. If
 <replaceable>typespec</replaceable> is not a user-defined type, then
 the two values <replaceable>typespec</replaceable> and &nil; are returned.
</para></formalpara>

<formalpara><title><literal
 role="sexp">(<function>ext:type-expand</function>
 <replaceable>typespec</replaceable>)</literal></title>
<para>This is similar to <literal
 role="sexp">(<function>ext:type-expand-1</function>
 <replaceable>typespec</replaceable>)</literal>, but repeatedly expands
 <replaceable>typespec</replaceable> until it is no longer a
 user-defined type.  A second value of &t; or &nil; is returned as for
 <function>ext:type-expand-1</function>, indicating whether the
 original <replaceable>typespec</replaceable> was a user-definedtype.
</para></formalpara>

<para>The possible results of &type-of; are:

<itemizedlist>
 <listitem><simpara>&cons-class;</simpara></listitem>
 <listitem><simpara>&symbol-class;, &null-class;,
  &boolean-type;</simpara></listitem>
 <listitem><simpara>&fixnum-type;, &bignum-type;, &rational-class;,
  &short-float-type;, &single-float-type;, &double-float-type;,
  &long-float-type;, &complex-class;</simpara></listitem>
 <listitem><simpara>&character-class;, &base-char-type;</simpara></listitem>
 <listitem><simpara><literal role="type">(&array-class;
  <replaceable>element-type</replaceable>
  <replaceable>dimensions</replaceable>)</literal>,
  <literal role="type">(&simple-array-type;
  <replaceable>element-type</replaceable>
  <replaceable>dimensions</replaceable>)</literal></simpara></listitem>
 <listitem><simpara><literal role="type">(&vector-class; &t;
  <replaceable>size</replaceable>)</literal>, <literal
  role="type">(&simple-vector-type;
  <replaceable>size</replaceable>)</literal></simpara></listitem>
 <listitem><simpara><literal role="type">(&string-class;
  <replaceable>size</replaceable>)</literal>, <literal
  role="type">(&simple-string-type;
  <replaceable>size</replaceable>)</literal></simpara></listitem>
 <listitem><simpara><literal role="type">(&base-string-type;
  <replaceable>size</replaceable>)</literal>, <literal
  role="type">(&simple-base-string-type;
  <replaceable>size</replaceable>)</literal></simpara></listitem>
 <listitem><simpara><literal role="type">(&bit-vector-class;
  <replaceable>size</replaceable>)</literal>, <literal
  role="type">(&simple-bit-vector-type;
  <replaceable>size</replaceable>)</literal></simpara></listitem>
 <listitem><simpara>&function-class;,
  &compiled-function-type;</simpara></listitem>
 <listitem><simpara>&stream-class;, &file-stream-class;,
  &synonym-stream-class;, &broadcast-stream-class;,
  &concatenated-stream-class;, &two-way-stream-class;,
  &echo-stream-class;, &string-stream-class;</simpara></listitem>
 <listitem><simpara>&package-class;, &hash-table-class;, &readtable-class;,
  &pathname-class;, &logical-pathname-class;, &random-state-class;,
  <classname>byte</classname></simpara></listitem>
 <listitem><simpara><classname>special-operator</classname>,
  <classname>load-time-eval</classname>, &symbol-macro;,
  <link linkend="encoding"><classname>encoding</classname></link>,
  <classname>foreign-pointer</classname>,
  <classname>foreign-address</classname>,
  <classname>foreign-variable</classname>,
  <classname>foreign-function</classname></simpara></listitem>
 <listitem><simpara><link
 linkend="weak"><classname>weak-pointer</classname></link>,
          <link linkend="reader"><classname>read-label</classname></link>,
          <link linkend="reader"><classname>frame-pointer</classname></link>,
      <classname>system-internal</classname></simpara></listitem>
 <listitem><simpara><classname>address</classname> (should not
  occur)</simpara></listitem>
 <listitem><simpara>any other symbol (structure types or &clos;
  classes)</simpara></listitem>
 <listitem><simpara>a class (&clos; classes without proper
  name)</simpara></listitem>
</itemizedlist></para>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_4-3.html">4.3
   Classes</ulink></title>

<para>The &clos; symbols are &export;ed from the package
 <quote>CLOS</quote> and thus normally visible in all user packages. If
 you do not want them (for example, if you want to use the
 <ulink url="ftp://clisp.cons.org/pub/lisp/clisp/packages/pcl.sept92f.clisp.tar.gz">PCL</ulink>
 implementation of &clos; instead of the native one), do
 <literal role="sexp">(&unuse-package; &quot;CLOS&quot;)</literal>.</para>

</section>

<section id="clos-diff"><title>Deviations from &ansi-cl;:</title>

<formalpara><title>&defclass;</title>
<para>It <emphasis>is</emphasis> required that the superclasses of a
 class be defined before the &defclass; form for the class is evaluated.
 </para></formalpara>

<para>&defclass; supports the option &metaclass-k; &structure-class;.
 This option is necessary in order to define a subclass of a
 &defstruct;-defined structure type using &defclass; instead of
 &defstruct;.</para>

<para>When &call-next-method; is called with arguments, the rule that
 the ordered set of applicable methods must be the same as for the
 original arguments is enforced by the implementation only in
 interpreted code.</para>

<para>There is a generic function <emphasis
 role="strong"><function>clos:no-primary-method</function></emphasis>
 (similar to &no-applicable-method;) which is called when a generic
 function of the class &standard-generic-function-class; is invoked and
 no primary method on that generic function is applicable.</para>

<para><emphasis
 role="strong"><function>clos:generic-flet</function></emphasis> and
 <emphasis
 role="strong"><function>clos:generic-labels</function></emphasis> are
 implemented as macros, not as special operators.  They are not imported
 into the packages &clu-pac; and &cl-pac; because of the &ansi-cl; issue
 <ulink
 url="&clhs;/Issues/iss181.html">GENERIC-FLET-POORLY-DESIGNED:DELETE</ulink>.
 </para>

<para>The function &ensure-generic-function; is not implemented.</para>

<para>&add-method; can put methods into other generic functions
 than the one the method came from.</para>

<para>&print-object; is only called on objects of type
 &standard-object-class; and &structure-object-class;.
 It is not called on other objects, like &cons-class;es
 and &number-class;s, due to the performance concerns.</para>

<para>&documentation; still has the &cltl1; implementation.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_4-3-1-1.html">4.3.1.1
   Standard Metaclasses</ulink></title>

<para>Among those classes listed in <ulink
 url="&clhs;/Body/sec_4-3-7.html#classtypecorrespondence">Figure
 4-8</ulink>, only the following are instances of &built-in-class;:

<itemizedlist>
 <listitem><simpara>&t-class;</simpara></listitem>
 <listitem><simpara>&character-class;</simpara></listitem>
 <listitem><simpara>&number-class;, &complex-class;, &real-class;,
    &float-class;, &rational-class;, &ratio-class;, &integer-class;
  </simpara></listitem>
 <listitem><simpara>&sequence-class;</simpara></listitem>
 <listitem><simpara>&array-class;, &vector-class;, &bit-vector-class;
      &string-class;</simpara></listitem>
 <listitem><simpara>&list-class;, &cons-class;</simpara></listitem>
 <listitem><simpara>&symbol-class;, &null-class;</simpara></listitem>
 <listitem><simpara>&function-class;, &generic-function-class;,
      &standard-generic-function-class;</simpara></listitem>
 <listitem><simpara>&hash-table-class;</simpara></listitem>
 <listitem><simpara>&package-class;</simpara></listitem>
 <listitem><simpara>&pathname-class;, &logical-pathname-class;
  </simpara></listitem>
 <listitem><simpara>&random-state-class;</simpara></listitem>
 <listitem><simpara>&readtable-class;</simpara></listitem>
 <listitem><simpara>&stream-class;, &broadcast-stream-class;,
    &concatenated-stream-class;, &echo-stream-class;,
    &string-stream-class;, &file-stream-class;,
    &synonym-stream-class;, &two-way-stream-class;</simpara></listitem>
</itemizedlist></para>

</section>

<section><title><ulink url="&clhs;/Body/sec_4-3-2.html">4.3.2
   Defining Classes</ulink></title>

<para>&defclass; supports the &metaclass-k; option.  Possible values are
 &standard-class; (the default) and &structure-class; (which creates
 structure classes, like &defstruct; does).</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_4-3-6.html">4.3.6
   Redefining Classes</ulink></title>

<para>Redefining classes is not supported.  The function
 &update-instance-for-redefined-class; is not implemented.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_4-3-7.html">4.3.7
   Integrating Types and Classes</ulink></title>

<para>The class &method-combination-class; is not implemented.</para>

</section>
</chapter>


<chapter id="data"><title><ulink url="&clhs;/Body/chap-5.html">Chapter 5:
   Data and Control Flow</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_data__w_dictionary.html">5.3
   The Data and Control Flow Dictionary</ulink></title>

<formalpara><title>&prog1;, &prog2;, &and;, &or;, &psetq;, &when;,
 &unless;, &cond;, &case;, &multiple-value-list;, &multiple-value-bind;,
 &multiple-value-setq;</title>
<para>are implemented as special operators and, as
 such, rather efficient.</para></formalpara>

<formalpara><title>&destructuring-bind;</title>
<para>does not perform full error checking.</para></formalpara>

<formalpara><title>&compiled-function-p;</title>
<para>returns &t; on built-in functions written in &c-lang;, compiled
 functions and special operator handlers.  Therefore
 &compiled-function-type; is not a subtype of &function-class;.</para>
</formalpara>

<section><title>&eq;</title>

<para>&eq; compares characters and fixnums as &eql; does.  No
 unnecessary copies are made of characters and numbers.  Nevertheless,
 one should use &eql; as it is more portable across CL
 implementations.</para>

<para><literal role="sexp">(let ((x y)) (eq x x))</literal> always
 returns &t;, regardless of <replaceable>y</replaceable>.</para>

</section>

<section><title>&symbol-function;</title>

<para><literal role="sexp">(&setf; (&symbol-function;
 <replaceable>symbol</replaceable>)
 <replaceable>object</replaceable>)</literal> requires
 <replaceable>object</replaceable> to be either a function, a
 &symbol-function; return value or a &lambda-expr;.  The &lambda-expr;
 is thereby immediately converted to a function.</para>

</section>

<section><title>&setf;</title>

<para>Additional places:
<variablelist>
 <varlistentry><term>&funcall;</term>
  <listitem><simpara><literal role="sexp">(&setf; (&funcall;
   #'<replaceable>symbol</replaceable> ...)
     <replaceable>object</replaceable>)</literal>
    and
   <literal role="sexp">(&setf; (&funcall;
   '<replaceable>symbol</replaceable> ...)
    <replaceable>object</replaceable>)</literal>
   are equivalent to
   <literal role="sexp">(&setf; (<replaceable>symbol</replaceable> ...)
               <replaceable>object</replaceable>)</literal>.
  </simpara></listitem></varlistentry>

 <varlistentry><term>&progn;</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&progn; <replaceable>form</replaceable> ...
                                         <replaceable>place</replaceable>)
                                <replaceable>object</replaceable>)</literal>
  </simpara></listitem></varlistentry>

 <varlistentry><term>&locally;</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&locally;
                                 <replaceable>declaration</replaceable> ...
                                 <replaceable>form</replaceable> ...
                                 <replaceable>place</replaceable>)
                                <replaceable>object</replaceable>)</literal>
  </simpara></listitem></varlistentry>

 <varlistentry><term>&if;</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&if; <replaceable>condition</replaceable>
                                  <replaceable>place1</replaceable>
                                  <replaceable>place2</replaceable>)
                                <replaceable>object</replaceable>)</literal>
  </simpara></listitem></varlistentry>

 <varlistentry><term>&get-dispatch-macro-character;</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&get-dispatch-macro-character; ...)
     ...)</literal> calls &set-dispatch-macro-character;.
  </simpara></listitem></varlistentry>

 <varlistentry><term>&lfd;:</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&lfd;)
   <replaceable>digits</replaceable>)</literal> sets the default mantissa
    length of long floats to <replaceable>digits</replaceable> bits.
   </simpara></listitem></varlistentry>

 <varlistentry><term>&values-list;</term>
  <listitem><simpara>
   <literal role="sexp">(&setf; (&values-list;
       <replaceable>list</replaceable>)
       <replaceable>form</replaceable>)</literal>
    is equivalent to
   <literal role="sexp">(&values-list; (&setf;
       <replaceable>list</replaceable>
    (&multiple-value-list; <replaceable>form</replaceable>)))</literal>
  </simpara></listitem></varlistentry>
</variablelist></para>

<para>&key-amp; markers in &defsetf; &lalist;s are supported, but the
 corresponding keywords must appear literally in the program text.</para>

<para><literal role="sexp">(&get-setf-expansion;
 <replaceable>form</replaceable> &optional-amp;
 <replaceable>env</replaceable>)</literal>, <literal
 role="sexp">(ext:get-setf-method <replaceable>form</replaceable>
 &optional-amp; <replaceable>env</replaceable>)</literal>, and <literal
 role="sexp">(ext:get-setf-method-multiple-value
 <replaceable>form</replaceable> &optional-amp;
 <replaceable>env</replaceable>)</literal> receive as optional argument
 the environment necessary for macro expansions.  In
 &define-setf-expander; and <function>ext:define-setf-method</function>
 &lalist;s, one can specify &environment-amp; and a variable, which will
 be bound to the environment.  This environment should be passed to all
 calls of &get-setf-expansion;,
 <function>ext:get-setf-method</function> and
 <function>ext:get-setf-method-multiple-value</function>.  If this is
 done, even local macros will be interpreted as places correctly.</para>

<para>Attempts to modify read-only data will signal an error.  Program
 text and quoted constants loaded from files are considered read-only
 data.  This check is only performed for strings, not for conses, other
 kinds of arrays, and user-defined data types.</para>

<para>See also the <link
 linkend="letf"><function>ext:letf</function></link> and <link
 linkend="letf"><function>ext:letf*</function></link> macros.</para>

</section>

<section><title>&function;</title>

<para><literal role="sexp">(&function;
 <replaceable>symbol</replaceable>)</literal> returns the local function
 definition established by &flet; or &labels;, if it exists, otherwise
 the global function definition.</para>

<para><literal role="sexp">(&special-operator-p;
 <replaceable>symbol</replaceable>)</literal> returns &nil; or &t;.
 If it returns &t;, then <literal role="sexp">(&symbol-function;
 <replaceable>symbol</replaceable>)</literal> returns the (useless)
 special operator handler.</para>

</section>

<section><title>&define-symbol-macro;</title>

<para>The macro &define-symbol-macro; establishes &symbol-macro;s with
 global scope (as opposed to &symbol-macro;s defined with
 &symbol-macrolet;, which have local scope):
 <literal role="sexp">(&define-symbol-macro; <replaceable>symbol</replaceable>
 <replaceable>expansion</replaceable>)</literal>.</para>

<para>The function <emphasis
 role="strong"><function>ext:symbol-macro-expand</function></emphasis>
 tests for a &symbol-macro;: If <replaceable>symbol</replaceable> is defined as
 a &symbol-macro;, <literal role="sexp">(ext:symbol-macro-expand
 <replaceable>symbol</replaceable>)</literal> returns two values, &t; and the
 expansion, otherwise it returns &nil;.</para>

<para>Calling &boundp; on a symbol defined as a &symbol-macro; returns
 &t;.</para>

<para>Calling &symbol-value; on a symbol defined as a &symbol-macro;
 returns the value of the expansion.  Calling &set; on a symbol defined
 as a &symbol-macro; calls &setf; on the expansion.</para>

<para>Calling &makunbound; on a symbol defined as a &symbol-macro;
 removes the &symbol-macro; definition.</para>

</section>

<section><title>&lambda;</title>

<formalpara><title>&lambda-list-keywords;</title>
<para><literal role="sexp">(&optional-amp; &rest-amp; &key-amp;
 &allow-other-keys-amp; &aux-amp; &body-amp; &whole-amp; &environment-amp;)
</literal></para></formalpara>

<table frame="all"><title>Platform dependent</title>
 <tgroup cols="4" colsep="1" rowsep="1" align="center">
 <colspec colname="vars"/><colspec colname="b16"/>
 <colspec colname="b32"/><colspec colname="b64"/>
 <spanspec spanname="b32-64" namest="b32" nameend="b64" align="center"/>
 <spanspec spanname="b16-64" namest="b16" nameend="b64" align="center"/>
 <thead><row><entry>CPU type</entry><entry>16-bit CPU</entry>
             <entry>32-bit CPU</entry> <entry>64-bit CPU</entry></row></thead>
 <tbody>
  <row><entry>&call-arguments-limit;</entry>
   <entry>2<superscript>16</superscript>=65536</entry>
   <entry spanname="b32-64">2<superscript>32</superscript>=4294967296</entry>
  </row>
  <row><entry>&multiple-values-limit;</entry>
       <entry spanname="b16-64">2<superscript>7</superscript>=128</entry></row>
  <row><entry>&lambda-parameters-limit;</entry>
   <entry>2<superscript>16</superscript>=65536</entry>
   <entry spanname="b32-64">2<superscript>32</superscript>=4294967296</entry>
  </row>
</tbody></tgroup></table>

</section>

<section><title>&defun; &amp; &defmacro;</title>

<para>&defun; and &defmacro; are allowed in non-toplevel positions. As
 an example, consider the old (CLtL1) definition of &gensym;:</para>

<programlisting>
(let ((gensym-prefix "G")
      (gensym-count 1))
  (defun gensym (&amp;optional (x nil s))
    (when s
      (cond ((stringp x) (setq gensym-prefix x))
            ((integerp x)
             (if (minusp x)
               (error "~S: index ~S is negative" 'gensym x)
               (setq gensym-count x)))
            (t (error "~S: argument ~S of wrong type" 'gensym x))))
    (prog1
      (make-symbol
        (concatenate 'string
          gensym-prefix
          (write-to-string gensym-count :base 10 :radix nil)))
      (incf gensym-count))))
</programlisting>

</section>

</section>
</chapter>


<chapter id="iteration"><title><ulink url="&clhs;/Body/chap-6.html">
    Chapter 6: Iteration</ulink></title>

<para>No notes.</para>

</chapter>

<chapter id="objects"><title><ulink url="&clhs;/Body/chap-7.html">
    Chapter 7: Objects</ulink></title>

<para><ulink url="&clhs;/Body/sec_7-2.html">Changing the class of a given
 instance</ulink> is not supported.  The functions &change-class;,
 &update-instance-for-different-class;, &make-instances-obsolete; are
 not implemented.</para>

<para>Only the &standard; method combination is implemented.</para>

<para><ulink url="&clhs;/Body/sec_7-6-6-3.html">User-defined method
 combination</ulink> is not supported.  The macros
 &define-method-combination;, &call-method; and the functions
 &invalid-method-error;, &method-combination-error; are not
 implemented.</para>

</chapter>

<chapter id="structures"><title><ulink url="&clhs;/Body/chap-8.html">
    Chapter 8: Structures</ulink></title>

<para>The &print-function-k; option should contain a &lambda-expr;
 <literal role="sexp">(&lambda; (structure stream depth) (declare
 (ignore depth)) ...)</literal> This &lambda-expr; names a function
 whose task is to output the external representation of structure onto
 the stream. This may be done by outputting text onto the stream using
 &write-char;, &write-string;, &write;, &prin1;, &princ;, &print;,
 &pprint;, &format; and the like. The following rules must be
 obeyed:</para>

<itemizedlist>
 <listitem><simpara>The value of &print-escape-var; must be
  respected.</simpara></listitem>
 <listitem><simpara>The value of &print-pretty-var; should not and
  cannot be respected, since the pretty-print mechanism is not
  accessible from outside.</simpara></listitem>
 <listitem><simpara>The value of &print-circle-var; need not to be
  respected.  This is managed by the system.  (But the print-circle
  mechanism handles only those objects that are (direct or indirect)
  components of structure.)</simpara></listitem>
 <listitem><simpara>The value of &print-level-var; is respected by
  &write;, &prin1;, &princ;, &print;, &pprint;, &format; instructions
  &format-a;, &format-s;, &format-w;, and &format; instructions
  &format-r;, &format-d;, &format-b;, &format-o;, &format-x;, &format-f;,
  &format-e;, &format-g;, &format-dollar; with not-numerical arguments.
  Therefore the print-level mechanism works automatically if only these
  functions are used for outputting objects and if they are not called
  on objects with nesting level &gt; 1. (The print-level mechanism does
  not recognize how many parentheses you have output. It only counts how
  many times it was called recursively.)</simpara></listitem>
 <listitem><simpara>The value of &print-length-var; must be respected,
  especially if you are outputting an arbitrary number of
  components.</simpara></listitem>
 <listitem><simpara>The value of &print-readably-var; must be
  respected. Remember that the values of &print-escape-var;,
  &print-level-var;, &print-length-var; are ignored if
  &print-readably-var; is true.  The value of &print-readably-var; is
  respected by &print-unreadable-object;, &write;, &prin1;, &princ;,
  &print;, &pprint;, &format; instructions &format-a;, &format-s;,
  &format-w;, and &format; instructions &format-r;, &format-d;,
  &format-b;, &format-o;, &format-x;, &format-f;, &format-e;,
  &format-g;, &format-dollar; with not-numerical arguments.  Therefore
  &print-readably-var; will be respected automatically if only these
  functions are used for printing objects.</simpara></listitem>
 <listitem><simpara>You need not worry about the values of
  &print-base-var;, &print-radix-var;, &print-case-var;,
  &print-gensym-var;, &print-array-var;, &pr-closure;,
  <link linkend="pr-rpars"><varname>custom:*print-rpars*</varname></link>,
  <link linkend="pr-indent"
   ><varname>custom:*print-indent-lists*</varname></link>
  </simpara></listitem>
</itemizedlist>

<para>The &inherit-k; option is exactly like &include-k; except that it
 does not create new accessors for the inherited slots.</para>

</chapter>


<chapter id="conditions"><title><ulink url="&clhs;/Body/chap-9.html">
    Chapter 9: Conditions</ulink></title>

<para>When an error occurred, you are in a break loop. You can evaluate
 forms as usual. The <command>help</command> command (or help key if
 there is one) lists the available <link linkend="debugger">debugging
 commands</link>.</para>

<formalpara><title><function>ext:muffle-cerrors</function></title>
<para>The macro <literal
 role="sexp">(<function>ext:muffle-cerrors</function>
 {<replaceable>form</replaceable>}*)</literal> executes the
 <replaceable>form</replaceable>s.  When a continuable error occurs, no
 message is printed.  Instead, the &continue; restart is invoked.
</para></formalpara>

<formalpara><title><function>ext:appease-cerrors</function></title>
<para>The macro <literal
 role="sexp">(<function>ext:appease-cerrors</function>
 {<replaceable>form</replaceable>}*)</literal> executes the
 <replaceable>form</replaceable>s.  When a continuable error occurs, the
 error is printed as a warning and the &continue; restart is invoked.
</para></formalpara>

<formalpara><title><function>ext:exit-on-error</function></title>
<para>The macro <literal
 role="sexp">(<function>ext:exit-on-error</function>
 {<replaceable>form</replaceable>}*)</literal> executes the
 <replaceable>form</replaceable>s.  When a non-continuable error or a
 <keycombo><keycap>Ctrl</keycap><keysym>C</keysym></keycombo> interrupt
 occurs, the error is printed and &clisp; terminates with error status.
</para></formalpara>

<formalpara><title><function>ext:with-restarts</function></title>
<para>The macro <function>ext:with-restarts</function> is like
 &restart-case;, except that the forms are specified after the restart
 clauses instead of before them, and the restarts created are not
 implicitly associated to any condition.
 <literal role="sexp">(<function>ext:with-restarts</function>
 ({<varname>restart-clause</varname>}*)
 {<replaceable>form</replaceable>}*)</literal>
 is therefore equivalent to <literal role="sexp">(&restart-case;
 (&progn; {<replaceable>form</replaceable>}*)
 {<varname>restart-clause</varname>}*)</literal>.
</para></formalpara>

<section><title><ulink url="&clhs;/Body/sec_9-1-3-1-3.html">
    9.1.3.1.3 Embedded Newlines in Condition Reports</ulink></title>

<para>The error message prefix for the first line is "*** - ". There is
 no prefix for subsequent error lines. The aesthetics of condition
 reports containing an object, which requires newlines when pretty
 printing is enabled, is undefined.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_condi_s_dictionary.html">
    9.2. The Conditions Dictionary</ulink></title>

<formalpara><title>&restart-case;</title>
<para>In &restart-case; clauses the argument list can also be specified
 after the keyword/value pairs instead of before them.  The syntax
 therefore is

<variablelist><title><literal role="sexp">(&restart-case;
 <replaceable>form</replaceable>
 {<varname>restart-clause</varname>}*)</literal></title>
 <varlistentry><term><varname>restart-clause</varname> ::==</term><listitem>
  <programlisting>
   (<varname>restart-name</varname> <replaceable>arglist</replaceable> {<varname>keyword value</varname>}* {<replaceable>form</replaceable>}*)
   | (<varname>restart-name</varname> {<varname>keyword value</varname>}* <replaceable>arglist</replaceable> {<replaceable>form</replaceable>}*)
</programlisting></listitem></varlistentry></variablelist>
</para></formalpara>

<formalpara><title>&compute-restarts;</title>
<para>&compute-restarts; and &find-restart; behave as specified in
 &ansi-cl;: If the optional condition argument is non-&nil;, only
 restarts associated with that condition and restarts associated to no
 condition at all are considered.  Therefore the effect of associating a
 restart to a condition is not to activate it, but to hide it from other
 conditions.  This makes the syntax dependent implicit association
 performed by &restart-case; nearly obsolete.</para></formalpara>

</section>
</chapter>


<chapter id="symbols"><title><ulink url="&clhs;/Body/chap-10.html">
    Chapter 10: Symbols</ulink></title>

<para>No notes.</para>

</chapter>

<chapter id="packages"><title><ulink url="&clhs;/Body/chap-11.html">
    Chapter 11: Packages</ulink></title>

<para>The &ansi-cl; packages
<itemizedlist>
 <listitem><simpara>&cl-pac; with the nicknames <emphasis
  role="strong"><constant>CL</constant></emphasis> and <emphasis
  role="strong"><constant>LISP</constant></emphasis>;</simpara></listitem>
 <listitem><simpara>&clu-pac; with the nicknames <emphasis
  role="strong"><constant>CL-USER</constant></emphasis> and <emphasis
  role="strong"><constant>USER</constant></emphasis> and</simpara></listitem>
 <listitem><simpara>&kwd-pac;</simpara></listitem>
</itemizedlist></para>

<para>are implemented. The package &cl-pac; &export;s only those symbols
 from the &ansi-cl; that are actually implemented.</para>

<section id="clupack"><title><ulink url="&clhs;/Body/sec_11-1-2-2.html">
    11.1.2.2 The COMMON-LISP-USER Package</ulink></title>

<para>The &clu-pac; package uses the &cl-pac; and &ext-pac; packages.</para>

</section>

<section id="imppack"><title><ulink url="&clhs;/Body/sec_11-1-2-4.html">
    11.1.2.4 Implementation-Defined Packages</ulink></title>

<para>The following additional packages exist:</para>
<variablelist><title>Implementation-Defined Packages</title>
  <varlistentry><term><quote>CLOS</quote></term><listitem>
   <simpara>&export;s all &clos; specific symbols, including some
   <link linkend="clos-diff">additional symbols</link>.
   </simpara></listitem></varlistentry>
  <varlistentry><term><quote>SYSTEM</quote></term><listitem>
   <simpara>has the nicknames <emphasis
   role="strong"><quote>SYS</quote></emphasis> and <emphasis
   role="strong"><quote>COMPILER</quote></emphasis>, and has no
   &export;ed symbols.  It defines many system internals.
   </simpara></listitem></varlistentry>
  <varlistentry id="ext-pac"><term><quote>EXT</quote></term><listitem><simpara>
   is the umbrella package for all extensions: it imports and &re-export;s
   all the external symbols in all &clisp; extensions, so a simple
   <literal role="sexp">(&use-package; "EXT")</literal> is enough to
   make all the extensions available in the current package.
   This package uses packages (in addition to &cl-pac;):
   &ldap-pac; &posix-pac; &socket-pac; &gstream-pac; &gray-pac;
   &i18n-pac; &custom-pac;.
   </simpara></listitem></varlistentry>
  <varlistentry><term>&charset-pac;</term><listitem>
   <simpara>defines and &export;s some character sets, for use with
   <function>make-encoding</function> and as &extfmt; argument.
   </simpara></listitem></varlistentry>
  <varlistentry><term>&ffi-pac;</term><listitem>
   <simpara>implements the <link linkend="dffi">foreign function
   interface</link>.  Some platforms only.
   </simpara></listitem></varlistentry>
  <varlistentry><term>&screen-pac;</term><listitem>
   <simpara>defines an API for <link linkend="screen">random screen
   access</link>.  Some platforms only.
   </simpara></listitem></varlistentry>
</variablelist>

<para>All pre-existing packages except <link
 linkend="clupack"><constant>COMMON-LISP-USER</constant></link> belong
 to the implementation, in the sense that doing side-effects on them or
 on their symbols causes undefined behavior.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_packa_s_dictionary.html">
    11.2. The Packages Dictionary</ulink></title>

<section><title>&make-package;</title>

<para>For &make-package;, the default value of the &use-k; argument is
 <literal role="sexp">("COMMON-LISP")</literal>.
</para>

<para>&make-package; accepts a keyword argument &case-sensitive-k;.
 Similarly, &defpackage; accepts an option &case-sensitive-k;.
 When its value is non-&nil;, the package will be case sensitive, i.e.,
 the reader will not case-convert symbol names before looking them up or
 creating them in this package.
 The package names are still subject to
 <literal role="sexp">(&readtable-case; &readtable-var;)</literal>,
 though.</para>

<section id="re-export"><title><function>ext:re-export</function></title>

<para>The function <literal role="sexp"
 >(&re-export; <replaceable>FROM-PACK</replaceable>
               <replaceable>TO-PACK</replaceable>)</literal>
 re-exports all external symbols from
 <replaceable>FROM-PACK</replaceable> also from
 <replaceable>TO-PACK</replaceable>, provided it already uses
 <replaceable>FROM-PACK</replaceable>.
</para></section>

</section>
</section>
</chapter>

<chapter id="numbers"><title><ulink url="&clhs;/Body/chap-12.html">
    Chapter 12: Numbers</ulink></title>

<section><title>Numeric Types</title>

<para>The type &number-class; is the disjoint union of the types
 &real-class; and &complex-class;.  (<ulink
 url="&clhs;/Body/glo_e.html#exhaustive_partition"><quote>exhaustive
 partition</quote></ulink>)</para>

<para>The type &real-class; is the disjoint union of the types
 &rational-class; and &float-class;.</para>

<para>The type &rational-class; is the disjoint union of the types
 &integer-class; and &ratio-class;.</para>

<para>The type &integer-class; is the disjoint union of the types
 &fixnum-type; and &bignum-type;.</para>

<para>The type &float-class; is the disjoint union of the types
 &short-float-type;, &single-float-type;, &double-float-type; and
 &long-float-type;.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_12-1.html">12.1
  Number Concepts</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_12-1-1-3-2.html">12.1.1.3.2
   Byte Operations on Integers</ulink></title>

<para>Byte specifiers are objects of type <classname>byte</classname>,
 not integers.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_12-1-3-3.html">12.1.3.3
    Rule of Float Substitutability</ulink></title>

<para>When a mathematical function may return an exact (rational) or
 inexact (floating-point) result, it always returns the exact
 result.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_12-1-4.html">12.1.4
    Floating-point Computations</ulink></title>

<para>There are four floating point types: &short-float-type;,
 &single-float-type;, &double-float-type; and &long-float-type;:</para>

<table frame="all"><title>floating point types</title>
<tgroup cols="5" colsep="1" rowsep="1" align="center">
<thead><row><entry>type</entry><entry>sign</entry><entry>mantissa</entry>
       <entry>exponent</entry><entry>comment</entry></row></thead>
<tbody><row><entry>&short-float-type;</entry><entry>1 bit</entry>
 <entry>16+1 bits</entry><entry>8 bits</entry><entry>immediate</entry></row>
       <row><entry>&single-float-type;</entry><entry>1 bit</entry>
 <entry>23+1 bits</entry><entry>8 bits</entry><entry>IEEE format</entry></row>
       <row><entry>&double-float-type;</entry><entry>1 bit</entry>
 <entry>52+1 bits</entry><entry>11 bits</entry><entry>IEEE format</entry></row>
       <row><entry>&long-float-type;</entry><entry>1 bit</entry>
 <entry>&gt;=64 bits</entry><entry>32 bits</entry><entry>variable
 length</entry></row></tbody></tgroup></table>

<para>The single and double float formats are those of the IEEE standard
 (1981), except that &clisp; does not support features like
 <literal>+0</literal>, <literal>-0</literal>, <literal>+inf</literal>,
 <literal>-inf</literal>, gradual underflow, <literal>NaN</literal>,
 etc. (&cl; does not make use of these features.)  This is why
 &features-var; does not contain the
 <constant>:IEEE-FLOATING-POINT</constant> keyword.</para>

<para id="lfd">Long floats have variable mantissa length, which is a
 multiple of 16 (or 32, depending on the word size of the
 processor).  The default length used when long floats are read is given
 by the place <literal role="sexp">(&lfd;)</literal>.  It can be set by
 <literal role="sexp">(&setf; (&lfd;)
 <replaceable>nnn</replaceable>)</literal>, where
 <replaceable>nnn</replaceable> is a positive integer.  E.g., <literal
 role="sexp">(&setf; (&lfd;) 3322)</literal> sets the default precision
 of long floats to 1000 decimal digits.</para>


<section id="flocont"><title><ulink url="&clhs;/Body/sec_12-1-4-4.html">
   12.1.4.4 Rule of Float Precision Contagion</ulink></title>

<para>The floating point contagion is controlled by the variable
 &flocont;.  When it is non-&nil;, contagion is done as per the
 &ansi-cl;: &short-float-type; &rarr; &single-float-type; &rarr;
 &double-float-type; &rarr; &long-float-type;.</para>

<variablelist>
<varlistentry><term>Rationale:</term>
 <listitem><simpara>See it pragmatically: save what you can and let
  others worry about the rest.</simpara></listitem></varlistentry>
<varlistentry><term>Brief:</term>
 <listitem><simpara>CL knows the number's precision, not accuracy, so
  preserving the precision can be accomplished reliably, while anything
  relating to the accuracy is just a speculation - only the user
  (programmer) knows what it is in each case.
 </simpara></listitem></varlistentry>
<varlistentry><term>Detailed:</term>
 <listitem><simpara>A float is an approximation of a real number.  One
  can think of it as a random variable with the mean equal to itself and
  standard deviation equal to half the last significant digit.  E.g.,
  <literal>1.5</literal> is actually <literal>1.5+-0.05</literal>.
  Consider adding <literal>1.5</literal> and <literal>1.75</literal>.
  &ansi-cl; requires that <literal role="sexp">(+ 1.5 1.75)</literal>
  return <literal>3.25</literal>, while traditional &clisp; would return
  <literal>3.3</literal>.  The implied random variables are:
  <literal>3.25+-0.005</literal> and <literal>3.3+-0.05</literal>.  Note
  that the &clisp;'s way <emphasis role="strong">does</emphasis> lie
  about the mean: the mean <emphasis role="strong">is</emphasis>
  <literal>3.25</literal> and nothing else, while the standard way
  <emphasis role="strong">could</emphasis> be lying about the deviation
  (accuracy): if the implied accuracy of <literal>1.5 (0.05)</literal>
  is its actual accuracy, then the accuracy of the result cannot be
  smaller that that.  Therefore, since CL has no way of knowing the
  actual accuracy, &ansi-cl; (and all the other standard engineering
  programming languages, like &c-lang;, FORTRAN etc) decides that
  keeping the accuracy correct is the business of the programmer, while
  the language should preserve what it can - the precision.
  </simpara></listitem></varlistentry>
<varlistentry><term>Experience:</term>
  <listitem><simpara> Rounding errors accumulate, and if a computation
  is conducted with insufficient precision, an outright incorrect
  result can be returned.  (E.g.,
  <literal>E(x<superscript>2</superscript>) -
  E(x)<superscript>2</superscript></literal> can be negative!)  The user
  should not mix floats of different precision (that's what &warn-fpc; is
  for), but one should not be penalized for this too harshly.
  </simpara></listitem></varlistentry>
</variablelist>

<para>When &flocont; is &nil;, the traditional &clisp; method is used,
 namely the result of an arithmetic operation whose arguments are of
 different float types is rounded to the float format of the shortest
 (least precise) of the arguments: &rational-class; &rarr;
 &long-float-type; &rarr; &double-float-type; &rarr; &single-float-type;
 &rarr; &short-float-type; (in contrast to <ulink
 url="&clhs;/Body/sec_12-1-4-4.html">12.1.4.4 Rule of Float Precision
 Contagion</ulink>!)</para>

<variablelist>
<varlistentry><term>Rationale:</term>
 <listitem><simpara> See it mathematically.  Add intervals:
  <literal>{1.0 &plusmn; 1e-8} + {1.0 &plusmn; 1e-16} = {2.0 &plusmn;
  1e-8}</literal>.  So, if we add <literal>1.0s0</literal> and
  <literal>1.0d0</literal>, we should get <literal>2.0s0</literal>.
  </simpara></listitem></varlistentry>
<varlistentry><term>Brief:</term>
 <listitem><simpara>Do not suggest accuracy of a result by giving it a
  precision that is greater than its accuracy.
  </simpara></listitem></varlistentry>
<varlistentry><term>Example:</term>
 <listitem><simpara><literal role="sexp">(- (+ 1.7 &pi;) &pi;)</literal>
  should not return <literal>1.700000726342836417234L0</literal>, it
  should return <literal>1.7f0</literal> (or
  <literal>1.700001f0</literal> if there were rounding errors).
  </simpara></listitem></varlistentry>
<varlistentry><term>Experience:</term>
 <listitem><simpara>If in a computation using thousands of short floats,
  a long float (like &pi;) happens to be used, the long precision should
  not propagate throughout all the intermediate values. Otherwise, the
  long result would look precise, but its accuracy is only that of a
  short float; furthermore much computation time would be lost by
  calculating with long floats when only short floats would be needed.
  </simpara></listitem></varlistentry>
</variablelist>

<formalpara id="warn-fpc"><title>&warn-fpc;</title>
<para>If the variable &warn-fpc; is non-&nil;, a warning is emitted for
 every coercion involving different floating-point types.
</para></formalpara>

<formalpara><title><varname>custom:*default-float-format*</varname></title>
<para>When rational numbers are to be converted to floats (due to
 &float;, &coerce;, &sqrt; or a transcendental function), the result
 type is given by the variable
 <varname>custom:*default-float-format*</varname>.</para></formalpara>

<formalpara><title><function>ext:without-floating-point-underflow</function></title>
<para>The macro <literal
 role="sexp">(<function>without-floating-point-underflow</function>
 {<replaceable>form</replaceable>}*)</literal> executes the
 <replaceable>form</replaceable>s, with errors of type
 &floating-point-underflow-type; inhibited.
 Floating point operations will silently return zero instead of
 signalling an error of type &floating-point-underflow-type;.
 </para></formalpara>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_12-1-5.html">12.1.5
    Complex Computations</ulink></title>

<para>Complex numbers can have a real part and an imaginary part of
 different types. For example, <literal role="sexp">(sqrt
 -9.0)</literal> evaluates to the number <literal>#C(0 3.0)</literal>,
 which has a real part of exactly <literal>0</literal>, not only
 <literal>0.0</literal> (which would mean "approximately 0").</para>

<para>The type specifier for this is <literal
 role="sexp">(&complex-class; &integer-class;
 &single-float-type;)</literal>, and <literal
 role="sexp">(&complex-class; <varname>type-of-real-part</varname>
 <varname>type-of-imaginary-part</varname>)</literal> in general.</para>

<para>The type specifier <literal role="sexp">(&complex-class;
 <replaceable>type</replaceable>)</literal> is equivalent to <literal
 role="sexp">(&complex-class; <replaceable>type</replaceable>
 <replaceable>type</replaceable>)</literal>.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_12-1-5-3.html">12.1.5.3
   Rule of Canonical Representation for Complex Rationals</ulink></title>

<para>Complex numbers can have a real part and an imaginary part of
 different types.  If the imaginary part is &eql; to
 <literal>0</literal>, the number is automatically converted to a real
 number.</para>

<para>This has the advantage that
   <literal role="sexp">(let ((x (sqrt -9.0))) (* x x))</literal>
 - instead of evaluating to <literal>#C(-9.0 0.0)</literal>,
 with <replaceable>x</replaceable> = <literal>#C(0.0 3.0)</literal>
 - evaluates to <literal>#C(-9.0 0)</literal> = <literal>-9.0</literal>,
 with <replaceable>x</replaceable> = <literal>#C(0 3.0)</literal>.</para>

</section>
</section>

<section><title><ulink url="&clhs;/Body/sec_the_numbers_dictionary.html">
    12.2 The Numbers Dictionary</ulink></title>

<section><title>&upgraded-complex-part-type;</title>

<para>&upgraded-complex-part-type; always returns &t;, since a
 &complex-class; number in &clisp; can always have &realpart; and
 &imagpart; of any type.</para>

</section>

<section><title>Additional Integer Functions</title>

<formalpara><title><function>ext:!</function></title>
<para><literal role="sexp">(<function>ext:!</function>
 <replaceable>n</replaceable>)</literal> returns the factorial of
 <replaceable>n</replaceable>, <replaceable>n</replaceable> a
 nonnegative integer.
</para></formalpara>

<formalpara><title><function>ext:exquo</function></title>
<para><literal role="sexp">(<function>ext:exquo</function>
 <replaceable>x</replaceable> <replaceable>y</replaceable>)</literal>
 returns the integer quotient <varname>x/y</varname> of two integers
 <replaceable>x</replaceable>,<replaceable>y</replaceable>, and signals
 an error when the quotient is not integer.  (This is more efficient
 than &slash;.)
</para></formalpara>

<formalpara><title><function>ext:xgcd</function></title>
<para><literal role="sexp">(<function>ext:xgcd</function>
 <replaceable>x<subscript>1</subscript></replaceable>
 ... <replaceable>x<subscript>n</subscript></replaceable>)</literal>
 returns the values <replaceable>g</replaceable>,
 <replaceable>c<subscript>1</subscript></replaceable>, ...,
 <replaceable>c<subscript>n</subscript></replaceable>, where
 <replaceable>g</replaceable> is the greatest common divisor of the integers
 <replaceable>x<subscript>1</subscript></replaceable>, ...,
 <replaceable>x<subscript>n</subscript></replaceable>, and
 <replaceable>c<subscript>1</subscript></replaceable>, ...,
 <replaceable>c<subscript>n</subscript></replaceable> are the integer
 coefficients such that
<programlisting>
 g = (&gcd; x<subscript>1</subscript> ... x<subscript>n</subscript>)
   = (+ (* c<subscript>1</subscript> x<subscript>1</subscript>) ...
        (* c<subscript>n</subscript> x<subscript>n</subscript>))
</programlisting></para></formalpara>

</section>

<section><title>Floating Point</title>

<formalpara><title>&expt;</title>
<para><literal role="sexp">(&expt; <replaceable>base</replaceable>
 <replaceable>exponent</replaceable>)</literal> is not very precise if
 exponent has large absolute value.</para></formalpara>

<formalpara><title>&log;</title>
<para><literal role="sexp">(&log; <replaceable>number</replaceable>
 <replaceable>base</replaceable>)</literal> signals an error if
 <function><replaceable>base</replaceable> = 1</function>.
</para></formalpara>

<formalpara><title>&pi;</title>
<para>The value of &pi; is a &long-float-type; with the precision given
 by <literal role="sexp">(&lfd;)</literal>.  When this precision is
 changed, the value of &pi; is automatically recomputed.  Therefore &pi;
 is a variable, not a constant.</para></formalpara>

</section>

<section><title><ulink url="&clhs;/Body/fun_decode-fl_decode-float.html">
    float decoding</ulink></title>

<para>&float-radix; always returns <literal>2</literal>.</para>

<para><literal role="sexp">(&float-digits;
 <replaceable>number</replaceable>
 <replaceable>digits</replaceable>)</literal> coerces
 <replaceable>number</replaceable> (a real number) to a floating point
 number with at least <replaceable>digits</replaceable> mantissa digits.
 The following holds:
<programlisting>
 (&gt;= (&float-digits; (&float-digits; number digits)) digits)
</programlisting></para>

</section>

<section><title><ulink url="&clhs;/Body/convar_boole-_cm_boole-xor.html">
    Boolean Operations</ulink></title>

<segmentedlist><title>Boolean Operations</title>
<segtitle>constant name</segtitle><segtitle>value</segtitle>
 <seglistitem><seg><function>boole-clr</function></seg>
              <seg>0</seg></seglistitem>
 <seglistitem><seg><function>boole-set</function></seg>
              <seg>15</seg></seglistitem>
 <seglistitem><seg><function>boole-1</function></seg>
              <seg>10</seg></seglistitem>
 <seglistitem><seg><function>boole-2</function></seg>
              <seg>12</seg></seglistitem>
 <seglistitem><seg><function>boole-c1</function></seg>
              <seg>5</seg></seglistitem>
 <seglistitem><seg><function>boole-c2</function></seg>
              <seg>3</seg></seglistitem>
 <seglistitem><seg><function>boole-and</function></seg>
              <seg>8</seg></seglistitem>
 <seglistitem><seg><function>boole-ior</function></seg>
              <seg>14</seg></seglistitem>
 <seglistitem><seg><function>boole-xor</function></seg>
              <seg>6</seg></seglistitem>
 <seglistitem><seg><function>boole-eqv</function></seg>
              <seg>9</seg></seglistitem>
 <seglistitem><seg><function>boole-nand</function></seg>
              <seg>7</seg></seglistitem>
 <seglistitem><seg><function>boole-nor</function></seg>
              <seg>1</seg></seglistitem>
 <seglistitem><seg><function>boole-andc1</function></seg>
              <seg>4</seg></seglistitem>
 <seglistitem><seg><function>boole-andc2</function></seg>
              <seg>2</seg></seglistitem>
 <seglistitem><seg><function>boole-orc1</function></seg>
              <seg>13</seg></seglistitem>
 <seglistitem><seg><function>boole-orc2</function></seg>
              <seg>11</seg></seglistitem>
</segmentedlist>

</section>

<section><title><ulink url="&clhs;/Body/convar_most-p_ative-fixnum.html">
    fixnum limits</ulink></title>

<table frame="all"><title>Platform dependent</title>
 <tgroup cols="4" colsep="1" rowsep="1" align="center">
 <colspec colname="vars"/><colspec colname="b16"/>
 <colspec colname="b32"/><colspec colname="b64"/>
 <spanspec spanname="b16-32" namest="b16" nameend="b32" align="center"/>
 <thead><row><entry>CPU type</entry><entry>16-bit CPU</entry>
             <entry>32-bit CPU</entry><entry>64-bit CPU</entry></row></thead>
 <tbody>
 <row><entry>&most-positive-fixnum;</entry>
 <entry spanname="b16-32">2<superscript>24</superscript>-1 = 16777215</entry>
 <entry>2<superscript>32</superscript>-1 = 4294967295</entry></row>
 <row><entry>&most-negative-fixnum;</entry>
 <entry spanname="b16-32">-2<superscript>24</superscript> = -16777216</entry>
 <entry>-2<superscript>32</superscript> = -4294967296</entry></row>
</tbody></tgroup></table>

</section>

<section><title><ulink url="&clhs;/Body/convar_most-p_d-long-float.html">
    float limits</ulink></title>

<para>Together with &pi;, the other long float constants
 &least-negative-long-float; &least-negative-normalized-long-float;
 &least-positive-long-float; &least-positive-normalized-long-float;
 &long-float-epsilon; &long-float-negative-epsilon;
 &most-negative-long-float; &most-positive-long-float; are recomputed
 whenever <literal role="sexp">(&lfd;)</literal> is
 changed.  They are variables, not constants.</para>

</section>

<section><title>&floating-point-invalid-operation-type;</title>

<para>This condition is never signaled by &clisp;.</para>

</section>

<section><title>&floating-point-inexact-type;</title>

<para>This condition is never signaled by &clisp;.</para>

</section>
</section>
</chapter>

<chapter id="characters"><title><ulink url="&clhs;/Body/chap-13.html">
    Chapter 13: Characters</ulink></title>

<para>The characters are ordered according to a superset of the ASCII
encoding.</para>

<!-- #ifdef UNICODE -->
<variablelist>
<varlistentry><term>Platform dependent: only in &clisp; built
  &with; the compile-time flag &unicode;.</term>
<listitem><simpara>More precisely, &clisp; uses the 16-bit
 <ulink url="http://www.unicode.org/">Unicode</ulink> character set (ISO
 10646, also known as UCS-2).</simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

<!-- #if defined(IBMPC_CHS) && !defined(UNICODE) -->
<variablelist>
<varlistentry><term>Platform dependent: &dos;, &os2;
   platforms only, and only in &clisp; built
   &without; compile-time flag &unicode;.</term>
<listitem><para>More precisely, &clisp; uses the IBM PC character set
 (code page 437):
<table frame="all"><title>the IBM PC character set (code page 437)</title>
 <tgroup cols="17" colsep="1" rowsep="1" align="center">
 <thead><row><entry/><entry>#x0</entry><entry>#x1</entry>
      <entry>#x2</entry><entry>#x3</entry><entry>#x4</entry><entry>#x5</entry>
      <entry>#x6</entry><entry>#x7</entry><entry>#x8</entry><entry>#x9</entry>
      <entry>#xA</entry><entry>#xB</entry><entry>#xC</entry><entry>#xD</entry>
      <entry>#xE</entry><entry>#xF</entry></row></thead>
 <tbody>
  <row><entry>#x00</entry><entry>**</entry><entry/><entry/>
   <entry/><entry/><entry/><entry/>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>&para;</entry>
   <entry>&sect;</entry></row>
  <row><entry>#x10</entry><entry/><entry/><entry/>
   <entry/><entry/><entry/><entry/><entry/>
   <entry/><entry/><entry>**</entry><entry>**</entry>
   <entry/><entry/><entry/><entry/></row>
  <row><entry>#x20</entry><entry>&nbsp;</entry><entry>!</entry>
   <entry>&quot;</entry><entry>#</entry><entry>$</entry><entry>%</entry>
   <entry>&amp;</entry><entry>'</entry><entry>(</entry><entry>)</entry>
   <entry>*</entry><entry>+</entry><entry>,</entry><entry>-</entry>
   <entry>.</entry><entry>/</entry></row>
  <row><entry>#x30</entry><entry>0</entry><entry>1</entry><entry>2</entry>
   <entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry>
   <entry>7</entry><entry>8</entry><entry>9</entry><entry>:</entry>
   <entry>;</entry><entry>&lt;</entry><entry>=</entry><entry>&gt;</entry>
   <entry>?</entry></row>
  <row><entry>#x40</entry><entry>@</entry><entry>A</entry><entry>B</entry>
   <entry>C</entry><entry>D</entry><entry>E</entry><entry>F</entry>
   <entry>G</entry><entry>H</entry><entry>I</entry><entry>J</entry>
   <entry>K</entry><entry>L</entry><entry>M</entry><entry>N</entry>
   <entry>O</entry></row>
  <row><entry>#x50</entry><entry>P</entry><entry>Q</entry><entry>R</entry>
   <entry>S</entry><entry>T</entry><entry>U</entry><entry>V</entry>
   <entry>W</entry><entry>X</entry><entry>Y</entry><entry>Z</entry>
   <entry>[</entry><entry>\</entry><entry>]</entry><entry>^</entry>
   <entry>_</entry></row>
  <row><entry>#x60</entry><entry>`</entry><entry>a</entry><entry>b</entry>
   <entry>c</entry><entry>d</entry><entry>e</entry><entry>f</entry>
   <entry>g</entry><entry>h</entry><entry>i</entry><entry>j</entry>
   <entry>k</entry><entry>l</entry><entry>m</entry><entry>n</entry>
   <entry>o</entry></row>
  <row><entry>#x70</entry><entry>p</entry><entry>q</entry><entry>r</entry>
   <entry>s</entry><entry>t</entry><entry>u</entry><entry>v</entry>
   <entry>w</entry><entry>x</entry><entry>y</entry><entry>z</entry>
   <entry>{</entry><entry>|</entry><entry>}</entry><entry>~</entry>
   <entry/></row>
  <row><entry>#x80</entry><entry>&Ccedil;</entry><entry>&uuml;</entry>
   <entry>&eacute;</entry><entry>&acirc;</entry><entry>&auml;</entry>
   <entry>&agrave;</entry><entry>&aring;</entry><entry>&ccedil;</entry>
   <entry>&ecirc;</entry><entry>&euml;</entry><entry>&egrave;</entry>
   <entry>&iuml;</entry><entry>&icirc;</entry><entry>&igrave;</entry>
   <entry>&Auml;</entry><entry>&Aring;</entry></row>
  <row><entry>#x90</entry><entry>&Eacute;</entry><entry>&aelig;</entry>
   <entry>&AElig;</entry><entry>&ocirc;</entry><entry>&ouml;</entry>
   <entry>&ograve;</entry><entry>&ucirc;</entry><entry>&ugrave;</entry>
   <entry>&yuml;</entry><entry>&Ouml;</entry><entry>&Uuml;</entry>
   <entry>&cent;</entry><entry>&pound;</entry><entry>&yen;</entry>
   <entry>&#8359;</entry><entry>&#402;</entry></row>
  <row><entry>#xA0</entry><entry>&aacute;</entry><entry>&iacute;</entry>
   <entry>&oacute;</entry><entry>&uacute;</entry><entry>&ntilde;</entry>
   <entry>&Ntilde;</entry><entry>&ordf;</entry><entry>&ordm;</entry>
   <entry>&iquest;</entry><entry>&#8976;</entry><entry>&not;</entry>
   <entry>&frac12;</entry><entry>&frac14;</entry><entry>&iexcl;</entry>
   <entry>&laquo;</entry><entry>&raquo;</entry></row>
  <row><entry>#xB0</entry><entry>&#9617;</entry><entry>&#9618;</entry>
   <entry>&#9619;</entry><entry>&#9474;</entry><entry>&#9508;</entry>
   <entry>&#9569;</entry><entry>&#9570;</entry><entry>&#9558;</entry>
   <entry>&#9557;</entry><entry>&#9571;</entry><entry>&#9553;</entry>
   <entry>&#9559;</entry><entry>&#9565;</entry><entry>&#9564;</entry>
   <entry>&#9563;</entry><entry>&#9488;</entry></row>
  <row><entry>#xC0</entry><entry>&#9492;</entry><entry>&#9524;</entry>
   <entry>&#9516;</entry><entry>&#9500;</entry><entry>&#9472;</entry>
   <entry>&#9532;</entry><entry>&#9566;</entry><entry>&#9567;</entry>
   <entry>&#9562;</entry><entry>&#9556;</entry><entry>&#9577;</entry>
   <entry>&#9574;</entry><entry>&#9568;</entry><entry>&#9552;</entry>
   <entry>&#9580;</entry><entry>&#9575;</entry></row>
  <row><entry>#xD0</entry><entry>&#9576;</entry><entry>&#9572;</entry>
   <entry>&#9573;</entry><entry>&#9561;</entry><entry>&#9560;</entry>
   <entry>&#9554;</entry><entry>&#9555;</entry><entry>&#9563;</entry>
   <entry>&#9562;</entry><entry>&#9496;</entry><entry>&#9484;</entry>
   <entry>&#9608;</entry><entry>&#9604;</entry><entry>&#9612;</entry>
   <entry>&#9616;</entry><entry>&#9600;</entry></row>
  <row><entry>#xE0</entry><entry>&alpha;</entry><entry>&szlig;</entry>
   <entry>&Gamma;</entry><entry>&pi;</entry><entry>&Sigma;</entry>
   <entry>&sigma;</entry><entry>&micro;</entry><entry>&tau;</entry>
   <entry>&Phi;</entry><entry>&Theta;</entry><entry>&Omega;</entry>
   <entry>&delta;</entry><entry>&infin;</entry><entry>&phgr;</entry>
   <entry>&epsi;</entry><entry>&cap;</entry></row>
  <row><entry>#xF0</entry><entry>&equiv;</entry><entry>&plusmn;</entry>
   <entry>&ge;</entry><entry>&le;</entry><entry>&#8992;</entry>
   <entry>&#8993;</entry><entry>&divide;</entry><entry>&asymp;</entry>
   <entry>&deg;</entry><entry>&#8729;</entry><entry>&middot;</entry>
   <entry>&radic;</entry><entry>&#8319;</entry><entry>&sup2;</entry>
   <entry>&#9632;</entry><entry>&nbsp;</entry></row>
</tbody></tgroup></table>
 Here ** are control characters, not graphic characters. (The characters
 left blank here cannot be represented in this character set).
</para></listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #if defined(ISOLATIN_CHS) && !defined(UNICODE) -->
<variablelist>
<varlistentry><term>Platform dependent: &unix; (except &nextstep;),
   &win32;, &amiga;, &acorn; platforms only, and only in
   &clisp; built &without; compile-time flag &unicode;.</term>
<listitem><para>More precisely, &clisp; uses the ISO Latin-1 (ISO
 8859-1) character set:
<table frame="all"><title>the ISO Latin-1 (ISO 8859-1) character set</title>
 <tgroup cols="17" colsep="1" rowsep="1" align="center">
  <thead><row><entry/><entry>#x0</entry><entry>#x1</entry>
   <entry>#x2</entry><entry>#x3</entry><entry>#x4</entry><entry>#x5</entry>
   <entry>#x6</entry><entry>#x7</entry><entry>#x8</entry><entry>#x9</entry>
   <entry>#xA</entry><entry>#xB</entry><entry>#xC</entry><entry>#xD</entry>
   <entry>#xE</entry><entry>#xF</entry></row></thead>
 <tbody>
  <row><entry>#x00</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry></row>
  <row><entry>#x10</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry></row>
  <row><entry>#x20</entry><entry>&nbsp;</entry><entry>!</entry>
   <entry>&#34;</entry><entry>#</entry><entry>$</entry><entry>%</entry>
   <entry>&amp;</entry><entry>'</entry><entry>(</entry><entry>)</entry>
   <entry>*</entry><entry>+</entry><entry>,</entry><entry>-</entry>
   <entry>.</entry><entry>/</entry></row>
  <row><entry>#x30</entry><entry>0</entry><entry>1</entry><entry>2</entry>
   <entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry>
   <entry>7</entry><entry>8</entry><entry>9</entry><entry>:</entry>
   <entry>;</entry><entry>&lt;</entry><entry>=</entry><entry>&gt;</entry>
   <entry>?</entry></row>
  <row><entry>#x40</entry><entry>@</entry><entry>A</entry><entry>B</entry>
   <entry>C</entry><entry>D</entry><entry>E</entry><entry>F</entry>
   <entry>G</entry><entry>H</entry><entry>I</entry><entry>J</entry>
   <entry>K</entry><entry>L</entry><entry>M</entry><entry>N</entry>
   <entry>O</entry></row>
  <row><entry>#x50</entry><entry>P</entry><entry>Q</entry><entry>R</entry>
   <entry>S</entry><entry>T</entry><entry>U</entry><entry>V</entry>
   <entry>W</entry><entry>X</entry><entry>Y</entry><entry>Z</entry>
   <entry>[</entry><entry>\</entry><entry>]</entry><entry>^</entry>
   <entry>_</entry></row>
  <row><entry>#x60</entry><entry>`</entry><entry>a</entry><entry>b</entry>
   <entry>c</entry><entry>d</entry><entry>e</entry><entry>f</entry>
   <entry>g</entry><entry>h</entry><entry>i</entry><entry>j</entry>
   <entry>k</entry><entry>l</entry><entry>m</entry><entry>n</entry>
   <entry>o</entry></row>
  <row><entry>#x70</entry><entry>p</entry><entry>q</entry><entry>r</entry>
   <entry>s</entry><entry>t</entry><entry>u</entry><entry>v</entry>
   <entry>w</entry><entry>x</entry><entry>y</entry><entry>z</entry>
   <entry>{</entry><entry>|</entry><entry>}</entry><entry>~</entry>
   <entry/></row>
  <row><entry>#x80</entry><entry/><entry/><entry/>
   <entry/><entry/><entry/><entry/><entry>
   </entry><entry/><entry/><entry/><entry/>
   <entry/><entry/><entry/><entry/></row>
  <row><entry>#x90</entry><entry/><entry/><entry/>
   <entry/><entry/><entry/><entry/><entry>
   </entry><entry/><entry/><entry/><entry/>
   <entry/><entry/><entry/><entry/></row>
  <row><entry>#xA0</entry><entry>&nbsp;</entry><entry>&iexcl;</entry>
   <entry>&cent;</entry><entry>&pound;</entry><entry>&curren;</entry>
   <entry>&yen;</entry><entry>&brvbar;</entry><entry>&sect;</entry>
   <entry>&uml;</entry><entry>&copy;</entry><entry>&ordf;</entry>
   <entry>&laquo;</entry><entry>&not;</entry><entry>&shy;</entry>
   <entry>&reg;</entry><entry>&macr;</entry></row>
  <row><entry>#xB0</entry><entry>&deg;</entry><entry>&plusmn;</entry>
   <entry>&sup2;</entry><entry>&sup3;</entry><entry>&acute;</entry>
   <entry>&micro;</entry><entry>&para;</entry><entry>&middot;</entry>
   <entry>&cedil;</entry><entry>&sup1;</entry><entry>&ordm;</entry>
   <entry>&raquo;</entry><entry>&frac14;</entry><entry>&frac12;</entry>
   <entry>&frac34;</entry><entry>&iquest;</entry></row>
  <row><entry>#xC0</entry><entry>&Agrave;</entry><entry>&Aacute;</entry>
   <entry>&Acirc;</entry><entry>&Atilde;</entry><entry>&Auml;</entry>
   <entry>&Aring;</entry><entry>&AElig;</entry><entry>&Ccedil;</entry>
   <entry>&Egrave;</entry><entry>&Eacute;</entry><entry>&Ecirc;</entry>
   <entry>&Euml;</entry><entry>&Igrave;</entry><entry>&Iacute;</entry>
   <entry>&Icirc;</entry><entry>&Iuml;</entry></row>
  <row><entry>#xD0</entry><entry>&ETH;</entry><entry>&Ntilde;</entry>
   <entry>&Ograve;</entry><entry>&Oacute;</entry><entry>&Ocirc;</entry>
   <entry>&Otilde;</entry><entry>&Ouml;</entry><entry>&times;</entry>
   <entry>&Oslash;</entry><entry>&Ugrave;</entry><entry>&Uacute;</entry>
   <entry>&Ucirc;</entry><entry>&Uuml;</entry><entry>&Yacute;</entry>
   <entry>&THORN;</entry><entry>&szlig;</entry></row>
  <row><entry>#xE0</entry><entry>&agrave;</entry><entry>&aacute;</entry>
   <entry>&acirc;</entry><entry>&atilde;</entry><entry>&auml;</entry>
   <entry>&aring;</entry><entry>&aelig;</entry><entry>&ccedil;</entry>
   <entry>&egrave;</entry><entry>&eacute;</entry><entry>&ecirc;</entry>
   <entry>&euml;</entry><entry>&igrave;</entry><entry>&iacute;</entry>
   <entry>&icirc;</entry><entry>&iuml;</entry></row>
  <row><entry>#xF0</entry><entry>&eth;</entry><entry>&ntilde;</entry>
   <entry>&ograve;</entry><entry>&oacute;</entry><entry>&ocirc;</entry>
   <entry>&otilde;</entry><entry>&ouml;</entry><entry>&divide;</entry>
   <entry>&oslash;</entry><entry>&ugrave;</entry><entry>&uacute;</entry>
   <entry>&ucirc;</entry><entry>&uuml;</entry><entry>&yacute;</entry>
   <entry>&thorn;</entry><entry>&yuml;</entry></row>
</tbody></tgroup></table>
Here ** are control characters, not graphic characters. (The characters left
blank here cannot be represented in this character set).
</para></listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #if defined(NEXTSTEP_CHS) && !defined(UNICODE) -->
<variablelist>
<varlistentry><term>Platform dependent: &nextstep; platforms only, and
 only in &clisp; built &without; compile-time flag &unicode;.</term>
<listitem><para>More precisely, &clisp; uses the &nextstep; character set:
<table frame="all"><title>the &nextstep; character set</title>
 <tgroup cols="17" colsep="1" rowsep="1" align="center">
  <thead><row><entry/><entry>#x0</entry><entry>#x1</entry>
   <entry>#x2</entry><entry>#x3</entry><entry>#x4</entry><entry>#x5</entry>
   <entry>#x6</entry><entry>#x7</entry><entry>#x8</entry><entry>#x9</entry>
   <entry>#xA</entry><entry>#xB</entry><entry>#xC</entry><entry>#xD</entry>
   <entry>#xE</entry><entry>#xF</entry></row></thead>
 <tbody>
  <row><entry>#x00</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry></row>
  <row><entry>#x10</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry><entry>**</entry><entry>**</entry><entry>**</entry>
   <entry>**</entry></row>
  <row><entry>#x20</entry><entry>&nbsp;</entry><entry>!</entry>
   <entry>&#34;</entry><entry>#</entry><entry>$</entry><entry>%</entry>
   <entry>&amp;</entry><entry>'</entry><entry>(</entry><entry>)</entry>
   <entry>*</entry><entry>+</entry><entry>,</entry><entry>-</entry>
   <entry>.</entry><entry>/</entry></row>
  <row><entry>#x30</entry><entry>0</entry><entry>1</entry><entry>2</entry>
   <entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry>
   <entry>7</entry><entry>8</entry><entry>9</entry><entry>:</entry>
   <entry>;</entry><entry>&lt;</entry><entry>=</entry><entry>&gt;</entry>
   <entry>?</entry></row>
  <row><entry>#x40</entry><entry>@</entry><entry>A</entry><entry>B</entry>
   <entry>C</entry><entry>D</entry><entry>E</entry><entry>F</entry>
   <entry>G</entry><entry>H</entry><entry>I</entry><entry>J</entry>
   <entry>K</entry><entry>L</entry><entry>M</entry><entry>N</entry>
   <entry>O</entry></row>
  <row><entry>#x50</entry><entry>P</entry><entry>Q</entry><entry>R</entry>
   <entry>S</entry><entry>T</entry><entry>U</entry><entry>V</entry>
   <entry>W</entry><entry>X</entry><entry>Y</entry><entry>Z</entry>
   <entry>[</entry><entry>\</entry><entry>]</entry><entry>^</entry>
   <entry>_</entry></row>
  <row><entry>#x60</entry><entry>`</entry><entry>a</entry><entry>b</entry>
   <entry>c</entry><entry>d</entry><entry>e</entry><entry>f</entry>
   <entry>g</entry><entry>h</entry><entry>i</entry><entry>j</entry>
   <entry>k</entry><entry>l</entry><entry>m</entry><entry>n</entry>
   <entry>o</entry></row>
  <row><entry>#x70</entry><entry>p</entry><entry>q</entry><entry>r</entry>
   <entry>s</entry><entry>t</entry><entry>u</entry><entry>v</entry>
   <entry>w</entry><entry>x</entry><entry>y</entry><entry>z</entry>
   <entry>{</entry><entry>|</entry><entry>}</entry><entry>~</entry>
   <entry/></row>
  <row><entry>#x80</entry><entry>&nbsp;</entry><entry>&Agrave;</entry>
   <entry>&Aacute;</entry><entry>&Acirc;</entry><entry>&Atilde;</entry>
   <entry>&Auml;</entry><entry>&Aring;</entry><entry>&Ccedil;</entry>
   <entry>&Egrave;</entry><entry>&Eacute;</entry><entry>&Ecirc;</entry>
   <entry>&Euml;</entry><entry>&Igrave;</entry><entry>&Iacute;</entry>
   <entry>&Icirc;</entry><entry>&Iuml;</entry></row>
  <row><entry>#x90</entry><entry>&ETH;</entry><entry>&Ntilde;</entry>
   <entry>&Ograve;</entry><entry>&Oacute;</entry><entry>&Ocirc;</entry>
   <entry>&Otilde;</entry><entry>&Ouml;</entry><entry>&Ugrave;</entry>
   <entry>&Uacute;</entry><entry>&Ucirc;</entry><entry>&Uuml;</entry>
   <entry>&Yacute;</entry><entry>&THORN;</entry><entry>&micro;</entry>
   <entry>&times;</entry><entry>&divide;</entry></row>
  <row><entry>#xA0</entry><entry>&copy;</entry><entry>&iexcl;</entry>
   <entry>&cent;</entry><entry>&pound;</entry><entry>&#8260;</entry>
   <entry>&yen;</entry><entry>&fnof;</entry><entry>&sect;</entry>
   <entry>&curren;</entry><entry>&#8217;</entry><entry>&ldquo;</entry>
   <entry>&laquo;</entry><entry>&#8249;</entry><entry>&#8250;</entry>
   <entry>&#64257;</entry><entry>&#64258;</entry></row>
  <row><entry>#xB0</entry><entry>&reg;</entry><entry>&ndash;</entry>
   <entry>&dagger;</entry><entry>&Dagger;</entry><entry>&middot;</entry>
   <entry>&brvbar;</entry><entry>&para;</entry><entry>&bull;</entry>
   <entry>&#8218;</entry><entry>&#8222;</entry><entry>&rdquo;</entry>
   <entry>&raquo;</entry><entry>&hellip;</entry><entry>&permil;</entry>
   <entry>&not;</entry><entry>&iquest;</entry></row>
  <row><entry>#xC0</entry><entry>&sup1;</entry><entry>&#715;</entry>
   <entry>&acute;</entry><entry>&circ;</entry><entry>&tilde;</entry>
   <entry>&macr;</entry><entry>&#728;</entry><entry>&#729;</entry>
   <entry>&uml;</entry><entry>&sup2;</entry><entry>&#730;</entry>
   <entry>&cedil;</entry><entry>&sup3;</entry><entry>&#733;</entry>
   <entry>&#731;</entry><entry>&#711;</entry></row>
  <row><entry>#xD0</entry><entry>&mdash;</entry><entry>&plusmn;</entry>
   <entry>&frac14;</entry><entry>&frac12;</entry><entry>&frac34;</entry>
   <entry>&agrave;</entry><entry>&aacute;</entry><entry>&acirc;</entry>
   <entry>&atilde;</entry><entry>&auml;</entry><entry>&aring;</entry>
   <entry>&ccedil;</entry><entry>&egrave;</entry><entry>&eacute;</entry>
   <entry>&ecirc;</entry><entry>&euml;</entry></row>
  <row><entry>#xE0</entry><entry>&igrave;</entry><entry>&AElig;</entry>
   <entry>&iacute;</entry><entry>&ordf;</entry><entry>&icirc;</entry>
   <entry>&iuml;</entry><entry>&eth;</entry><entry>&ntilde;</entry>
   <entry>&#321;</entry><entry>&Oslash;</entry><entry>&OElig;</entry>
   <entry>&ordm;</entry><entry>&ograve;</entry><entry>&oacute;</entry>
   <entry>&ocirc;</entry><entry>&otilde;</entry></row>
  <row><entry>#xF0</entry><entry>&ouml;</entry><entry>&aelig;</entry>
   <entry>&ugrave;</entry><entry>&uacute;</entry><entry>&ucirc;</entry>
   <entry>&#305;</entry><entry>&uuml;</entry><entry>&yacute;</entry>
   <entry>&#322;</entry><entry>&oslash;</entry><entry>&oelig;</entry>
   <entry>&szlig;</entry><entry>&thorn;</entry><entry>&yuml;</entry>
   <entry/><entry/></row>
  </tbody></tgroup></table>
Here ** are control characters, not graphic characters. (The characters left
blank here cannot be represented in this character set).
</para></listitem></varlistentry></variablelist>
<!-- #endif -->

<segmentedlist><title>The following are standard characters:</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\Space</keysym></seg>
              <seg><keycode>#x20</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Newline</keysym></seg>
              <seg><keycode>#x0A</keycode></seg></seglistitem>
</segmentedlist>

<segmentedlist><title>The following are semi-standard characters:</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\Backspace</keysym></seg>
              <seg><keycode>#x08</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Tab</keysym></seg>
              <seg><keycode>#x09</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Linefeed</keysym></seg>
              <seg><keycode>#x0A</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Page</keysym></seg>
              <seg><keycode>#x0C</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Return</keysym></seg>
              <seg><keycode>#x0D</keycode></seg></seglistitem>
</segmentedlist>

<!-- #if defined(MSDOS_CHARNAMES) || defined(WIN32_CHARNAMES) -->
<segmentedlist><title>Platform dependent: &dos;, &os2;, &win32;
  platforms only.</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\Rubout</keysym></seg>
              <seg><keycode>#x08</keycode></seg></seglistitem>
</segmentedlist>
<!-- #endif -->

<!-- #if defined(UNIX_CHARNAMES) || defined(AMIGA_CHARNAMES) -->
<segmentedlist><title>Platform dependent: &unix;, &amiga;, &acorn;
   platforms only.</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\Rubout</keysym></seg>
              <seg><keycode>#x7F</keycode></seg></seglistitem>
</segmentedlist>
<!-- #endif -->

<para><keysym>#\Newline</keysym> is the <link
 linkend="newline">delimiter between lines</link>.</para>


<segmentedlist><title>Additional Named Characters</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\Null</keysym></seg>
              <seg><keycode>#x00</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Bell</keysym></seg>
              <seg><keycode>#x07</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\Escape</keysym></seg>
              <seg><keycode>#x1B</keycode></seg></seglistitem>
</segmentedlist>

<segmentedlist><title>Additional syntax for characters with code from
 <keycode>#x00</keycode> to <keycode>#x1F</keycode>:</title>
 <segtitle>character</segtitle><segtitle>code</segtitle>
 <seglistitem><seg><keysym>#\^@</keysym></seg>
              <seg><keycode>#x00</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^A</keysym> &hellip; <keysym>#\^Z</keysym></seg>
              <seg><keycode>#x01</keycode> &hellip;
                   <keycode>#x1A</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^[</keysym></seg>
              <seg><keycode>#x1B</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^\</keysym></seg>
              <seg><keycode>#x1C</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^]</keysym></seg>
              <seg><keycode>#x1D</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^^</keysym></seg>
              <seg><keycode>#x1E</keycode></seg></seglistitem>
 <seglistitem><seg><keysym>#\^_</keysym></seg>
              <seg><keycode>#x1F</keycode></seg></seglistitem>
</segmentedlist>

<para>See also the section <link linkend="chario">Character
 I/O</link>.</para>


<section><title>Attributes</title>

<para>Characters do not have the &cltl1; font and bits attributes.
 For backward compatibility, there is a class
 <classname>sys::input-character</classname> representing either a
 character with font and bits, or a keystroke.
 The following functions work with objects of types &character-class;
 and <classname>sys::input-character</classname>.
 Note that &eql; or &equal; can not be used to compare objects of type
 <classname>sys::input-character</classname>.</para>

<variablelist>
 <varlistentry><term><constant>ext:char-font-limit</constant> = 16</term>
  <listitem><simpara>The system uses only font 0.
  </simpara></listitem></varlistentry>
 <varlistentry><term><constant>ext:char-bits-limit</constant> = 16</term>
  <listitem><segmentedlist><title>The following bits are defined:</title>
   <segtitle>key</segtitle><segtitle>value</segtitle>
   <seglistitem><seg>&control-k;</seg>
             <seg><varname>ext:char-control-bit</varname></seg></seglistitem>
   <seglistitem><seg>&meta-k;</seg>
             <seg><varname>ext:char-meta-bit</varname></seg></seglistitem>
   <seglistitem><seg>&super-k;</seg>
             <seg><varname>ext:char-super-bit</varname></seg></seglistitem>
   <seglistitem><seg>&hyper-k;</seg>
             <seg><varname>ext:char-hyper-bit</varname></seg></seglistitem>
  </segmentedlist></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(<function>ext:char-font</function>
  <replaceable>object</replaceable>)</literal> </term>
 <listitem><simpara>returns the font of a character or
  <classname>sys::input-character</classname>.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(<function>ext:char-bits</function>
  <replaceable>object</replaceable>)</literal> </term>
 <listitem><simpara>returns the bits of a character or
  <classname>sys::input-character</classname>.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(<function>ext:make-char</function>
  <replaceable>char</replaceable> [<replaceable>bits</replaceable>
            [<replaceable>font</replaceable>]])</literal></term>
 <listitem><simpara>returns a new <classname>sys::input-character</classname>,
  or &nil; if such a character cannot be created.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(<function>ext:char-bit</function>
  <replaceable>object</replaceable>
  <replaceable>name</replaceable>)</literal></term>
 <listitem><simpara>returns &t; if the named bit is set in
  <replaceable>object</replaceable>, else &nil;.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal
   role="sexp">(<function>ext:set-char-bit</function>
  <replaceable>object</replaceable> <replaceable>name</replaceable>
  <replaceable>newvalue</replaceable>)</literal></term>
 <listitem><simpara>returns a new
  <classname>sys::input-character</classname> with the named bit set or
  unset, depending on the boolean <replaceable>newvalue</replaceable>.
  </simpara></listitem></varlistentry>
</variablelist>

<!-- #ifdef KEYBOARD -->
<variablelist>
<varlistentry><term>Platform dependent: &unix;, &dos;, &os2;, &win32;, &acorn;
   platforms only.</term>
<listitem><simpara>The system itself uses this
 <classname>sys::input-character</classname> type only to mention special
 keys and
 <keycap>Control</keycap>/<keycap>Alternate</keycap>/<keycap>Shift</keycap>
 key status on return from
 <literal role="sexp">(&read-char; &kbd-in;)</literal>.
 </simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-2-1.html">
    13.1.2.1 Character Scripts</ulink></title>

<para>The only defined character script is the type &character-class;
 itself.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-3.html">
    13.1.3 Character Attributes</ulink></title>

<para>Characters have no implementation-defined attributes.  All characters
are simple characters.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-4-1.html">
    13.1.4.1 Graphic Characters</ulink></title>

<para>The graphic characters are those Unicode characters which are
 defined by the Unicode standard, excluding the ranges
 <keycode>U0000</keycode> &hellip; <keycode>U001F</keycode> and
 <keycode>U007F</keycode> &hellip; <keycode>U009F</keycode>.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-4-2.html">
    13.1.4.2 Alphabetic Characters</ulink></title>

<para>The alphabetic characters are those Unicode characters which are
 defined as letters by the Unicode standard.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-4-3-4.html">
    13.1.4.3.4 Case of Implementation-Defined Characters</ulink></title>

<para>The characters with case are those Unicode characters
 <replaceable>c</replaceable>, for
 which the upper case mapping <replaceable>uc</replaceable> and the
 lower case mapping <replaceable>lc</replaceable> have the following
 properties:
<itemizedlist>
  <listitem><simpara><replaceable>uc</replaceable> and
   <replaceable>lc</replaceable> are different</simpara></listitem>
  <listitem><simpara><replaceable>c</replaceable> is one of
   <replaceable>uc</replaceable> and
   <replaceable>lc</replaceable></simpara></listitem>
  <listitem><simpara>the upper case mapping of
   <replaceable>uc</replaceable> and of <replaceable>lc</replaceable>
   is <replaceable>uc</replaceable></simpara></listitem>
  <listitem><simpara>the lower case mapping of
   <replaceable>uc</replaceable> and of <replaceable>lc</replaceable>
   is <replaceable>lc</replaceable></simpara></listitem>
</itemizedlist></para>

<para>The titlecase property of Unicode characters has no equivalent in
 &cl;.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-4-4.html">
    13.1.4.4 Numeric Characters</ulink></title>

<para>The numeric characters are those Unicode characters which are
 defined as digits by the Unicode standard.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-6.html">
    13.1.6 Ordering of Characters</ulink></title>

<para>The characters are ordered according to their Unicode code.</para>

</section>

<section id="clhs-newline"><title><ulink url="&clhs;/Body/sec_13-1-8.html">
    13.1.8 Treatment of Newline during Input and Output</ulink></title>

<para>Newlines are written according to the stream's encoding, see the
 function &stream-external-format; and the description of <link
 linkend="encoding">encodings</link>, in particular, <link
 linkend="newline">line terminators</link>.  The default behavior is as
 follows:</para>

<!-- #if defined(MSDOS) || defined(WIN32) || (defined(UNIX) && (O_BINARY != 0)) -->
<variablelist>
<varlistentry><term>Platform dependent: &dos;, &os2;, &win32;
   platforms only.</term>
<listitem><simpara>When writing to a file, <keysym>#\Newline</keysym> is
 converted to <keycode>CR</keycode>/<keycode>LF</keycode>.  (This is the
 usual convention on DOS.)  For example,
 <keysym>#\Return</keysym>+<keysym>#\Newline</keysym> is written as
 <keycode>CR</keycode>/<keycode>CR</keycode>/<keycode>LF</keycode>.
</simpara></listitem></varlistentry></variablelist>
<!-- #endif -->

<para>When reading from a file,
 <keycode>CR</keycode>/<keycode>LF</keycode> is converted to
 <keysym>#\Newline</keysym> (the usual convention on DOS), and
 <keycode>CR</keycode> not followed by <keycode>LF</keycode> is
 converted to <keysym>#\Newline</keysym> as well (the usual conversion
 on MacOS, also used by some programs on Win32).</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-9.html">
    13.1.9 Character Encodings</ulink></title>

<para>The integer returned by &char-int; is the same as the character's
 code.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_13-1-10.html">
    13.1.10 Character Encodings</ulink></title>

<para>See the description of <link
 linkend="encoding">encodings</link>.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_chara_s_dictionary.html">
    13.2. The Characters Dictionary</ulink></title>

<para>&char-code; takes values from 0 (inclusive) to
 &char-code-limit; (exclusive), i.e., the implementation
 supports exactly &char-code-limit; characters.</para>

<table frame="all"><title>Platform dependent</title>
 <tgroup cols="3" colsep="1" rowsep="1" align="center">
 <thead><row><entry>binaries built</entry>
             <entry>&without; &unicode; support</entry>
             <entry>&with; &unicode; support</entry></row></thead>
 <tbody><row><entry>&char-code-limit;</entry>
    <entry>2<superscript>8</superscript> = 256</entry>
    <entry>2<superscript>16</superscript> = 65536</entry></row>
</tbody></tgroup></table>

<para>The types <classname>ext:string-char</classname> and
 &base-char-type; are equivalent to &character-class;.</para>

<para>The graphic characters have been described above.</para>

<para>The standard characters are <keysym>#\Newline</keysym> and the
 graphic characters with a code between 32 and 126 (inclusive).</para>

<para>The alphabetic characters are these characters:
<literallayout>
             ABCDEFGHIJKLMNOPQRSTUVWXYZ
             abcdefghijklmnopqrstuvwxyz
</literallayout>
and the international alphabetic characters from the character set:
<literallayout>
             &Ccedil;&uuml;&eacute;&acirc;&auml;&agrave;&aring;&ccedil;&ecirc;&euml;&egrave;&iuml;&icirc;&igrave;&Auml;&Aring;&Eacute;&aelig;&AElig;&ocirc;&ouml;&ograve;&ucirc;&ugrave;&yuml;&Ouml;&Uuml;&szlig;&aacute;&iacute;&oacute;&uacute;&ntilde;&Ntilde;&ordf;&ordm;&atilde;&otilde;&Oslash;&oslash;&Agrave;&Atilde;&Otilde; etc.
</literallayout></para>

<para>The functions &char-equal; &char-not-equal;, &char-lessp;,
 &char-greaterp;, &char-not-greaterp;, &char-not-lessp; ignore bits and
 font attributes of their arguments.</para>

</section>

<section id="char-width"><title>Functions on characters</title>

<formalpara><title><literal
   role="sexp">(<function>ext:char-width</function>
   <replaceable>character</replaceable>)</literal></title>
<para>returns the number of screen columns occupied by
 <replaceable>character</replaceable>.  This is 0 for non-spacing characters
 (such as control characters and many combining characters), 2 for
 double-width East Asian characters, and 1 for all other characters.
 See also function <link
 linkend="string-width"><function>string-width</function></link>.
</para></formalpara>

</section>

<section><title>platform-dependent characters</title>

<para>The characters that are not graphic chars and the space character
 have names:</para>

<!-- #ifdef AMIGA_CHARNAMES -->
<segmentedlist><title>Platform dependent: &amiga; platforms only.</title>
 <segtitle>code</segtitle><segtitle>char</segtitle>
 <seglistitem><seg><literal role="sexp">(&code-char; #x00)</literal></seg>
          <seg><keysym>#\Null</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x01)</literal></seg>
          <seg><keysym>#\Code1</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x02)</literal></seg>
          <seg><keysym>#\Code2</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x03)</literal></seg>
          <seg><keysym>#\Code3</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x04)</literal></seg>
          <seg><keysym>#\Code4</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x05)</literal></seg>
          <seg><keysym>#\Code5</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x06)</literal></seg>
          <seg><keysym>#\Code6</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x07)</literal></seg>
          <seg><keysym>#\Bell</keysym></seg>
          <seg><keysym>#\Bel</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x08)</literal></seg>
          <seg><keysym>#\Backspace</keysym></seg>
          <seg><keysym>#\Bs</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x09)</literal></seg>
          <seg><keysym>#\Tab</keysym></seg>
          <seg><keysym>#\Ht</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0A)</literal></seg>
          <seg><keysym>#\Newline</keysym></seg>
          <seg><keysym>#\Linefeed</keysym></seg>
          <seg><keysym>#\Lf</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0B)</literal></seg>
          <seg><keysym>#\Vt</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0C)</literal></seg>
          <seg><keysym>#\Page</keysym></seg>
          <seg><keysym>#\Ff</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0D)</literal></seg>
          <seg><keysym>#\Return</keysym></seg>
          <seg><keysym>#\Cr</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0E)</literal></seg>
          <seg><keysym>#\So</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0F)</literal></seg>
          <seg><keysym>#\Si</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x10)</literal></seg>
          <seg><keysym>#\Code16</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x11)</literal></seg>
          <seg><keysym>#\Code17</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x12)</literal></seg>
          <seg><keysym>#\Code18</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x13)</literal></seg>
          <seg><keysym>#\Code19</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x14)</literal></seg>
          <seg><keysym>#\Code20</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x15)</literal></seg>
          <seg><keysym>#\Code21</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x16)</literal></seg>
          <seg><keysym>#\Code22</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x17)</literal></seg>
          <seg><keysym>#\Code23</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x18)</literal></seg>
          <seg><keysym>#\Code24</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x19)</literal></seg>
          <seg><keysym>#\Code25</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1A)</literal></seg>
          <seg><keysym>#\Code26</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1B)</literal></seg>
          <seg><keysym>#\Escape</keysym></seg>
          <seg><keysym>#\Esc</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1C)</literal></seg>
          <seg><keysym>#\Code28</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1D)</literal></seg>
          <seg><keysym>#\Code29</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1E)</literal></seg>
          <seg><keysym>#\Code30</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1F)</literal></seg>
          <seg><keysym>#\Code31</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x20)</literal></seg>
          <seg><keysym>#\Space</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x7F)</literal></seg>
          <seg><keysym>#\Rubout</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x9B)</literal></seg>
          <seg><keysym>#\Csi</keysym></seg></seglistitem>
</segmentedlist>
<!-- #endif -->

<!-- #if defined(MSDOS_CHARNAMES) || defined(WIN32_CHARNAMES) -->
<segmentedlist><title>Platform dependent: &dos;, &os2;, &win32;
   platforms only.</title>
 <segtitle>code</segtitle><segtitle>char</segtitle>
 <seglistitem><seg><literal role="sexp">(&code-char; #x00)</literal></seg>
          <seg><keysym>#\Null</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x07)</literal></seg>
          <seg><keysym>#\Bell</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x08)</literal></seg>
          <seg><keysym>#\Backspace</keysym></seg>
          <seg><keysym>#\Rubout</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x09)</literal></seg>
          <seg><keysym>#\Tab</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0A)</literal></seg>
          <seg><keysym>#\Newline</keysym></seg>
          <seg><keysym>#\Linefeed</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0B)</literal></seg>
          <seg><keysym>#\Code11</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0C)</literal></seg>
          <seg><keysym>#\Page</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0D)</literal></seg>
          <seg><keysym>#\Return</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1A)</literal></seg>
          <seg><keysym>#\Code26</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1B)</literal></seg>
          <seg><keysym>#\Escape</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x20)</literal></seg>
          <seg><keysym>#\Space</keysym></seg></seglistitem>
</segmentedlist>
<!-- #endif -->

<!-- #ifdef UNIX_CHARNAMES -->
<segmentedlist><title>Platform dependent: &unix;, &acorn;,
    platforms only.</title>
 <segtitle>code</segtitle><segtitle>char</segtitle>
 <seglistitem><seg><literal role="sexp">(&code-char; #x00)</literal></seg>
          <seg><keysym>#\Null</keysym></seg>
          <seg><keysym>#\Nul</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x01)</literal></seg>
          <seg><keysym>#\Soh</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x02)</literal></seg>
          <seg><keysym>#\Stx</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x03)</literal></seg>
          <seg><keysym>#\Etx</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x04)</literal></seg>
          <seg><keysym>#\Eot</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x05)</literal></seg>
          <seg><keysym>#\Enq</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x06)</literal></seg>
          <seg><keysym>#\Ack</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x07)</literal></seg>
          <seg><keysym>#\Bell</keysym></seg>
          <seg><keysym>#\Bel</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x08)</literal></seg>
          <seg><keysym>#\Backspace</keysym></seg>
          <seg><keysym>#\Bs</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x09)</literal></seg>
          <seg><keysym>#\Tab</keysym></seg>
          <seg><keysym>#\Ht</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0A)</literal></seg>
          <seg><keysym>#\Newline</keysym></seg>
          <seg><keysym>#\Nl</keysym></seg>
          <seg><keysym>#\Linefeed</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0B)</literal></seg>
          <seg><keysym>#\Vt</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0C)</literal></seg>
          <seg><keysym>#\Page</keysym></seg>
          <seg><keysym>#\Np</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0D)</literal></seg>
          <seg><keysym>#\Return</keysym></seg>
          <seg><keysym>#\Cr</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0E)</literal></seg>
          <seg><keysym>#\So</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x0F)</literal></seg>
          <seg><keysym>#\Si</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x10)</literal></seg>
          <seg><keysym>#\Dle</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x11)</literal></seg>
          <seg><keysym>#\Dc1</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x12)</literal></seg>
          <seg><keysym>#\Dc2</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x13)</literal></seg>
          <seg><keysym>#\Dc3</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x14)</literal></seg>
          <seg><keysym>#\Dc4</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x15)</literal></seg>
          <seg><keysym>#\Nak</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x16)</literal></seg>
          <seg><keysym>#\Syn</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x17)</literal></seg>
          <seg><keysym>#\Etb</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x18)</literal></seg>
          <seg><keysym>#\Can</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x19)</literal></seg>
          <seg><keysym>#\Em</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1A)</literal></seg>
          <seg><keysym>#\Sub</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1B)</literal></seg>
          <seg><keysym>#\Escape</keysym></seg>
          <seg><keysym>#\Esc</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1C)</literal></seg>
          <seg><keysym>#\Fs</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1D)</literal></seg>
          <seg><keysym>#\Gs</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1E)</literal></seg>
          <seg><keysym>#\Rs</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x1F)</literal></seg>
          <seg><keysym>#\Us</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x20)</literal></seg>
          <seg><keysym>#\Space</keysym></seg>
          <seg><keysym>#\Sp</keysym></seg></seglistitem>
 <seglistitem><seg><literal role="sexp">(&code-char; #x7F)</literal></seg>
          <seg><keysym>#\Rubout</keysym></seg>
          <seg><keysym>#\Delete</keysym></seg>
          <seg><keysym>#\Del</keysym></seg></seglistitem>
</segmentedlist>
<!-- #endif -->

</section>

<section><title>obsolete constants</title>

<segmentedlist><title>obsolete constants</title>
 <segtitle>constant</segtitle><segtitle>value</segtitle>
 <seglistitem><seg><constant>ext:char-control-bit</constant></seg>
          <seg>1</seg></seglistitem>
 <seglistitem><seg><constant>ext:char-meta-bit</constant></seg>
          <seg>2</seg></seglistitem>
 <seglistitem><seg><constant>ext:char-super-bit</constant></seg>
          <seg>4</seg></seglistitem>
 <seglistitem><seg><constant>ext:char-hyper-bit</constant></seg>
          <seg>8</seg></seglistitem>
</segmentedlist>
</section>


</chapter>


<chapter id="conses"><title><ulink url="&clhs;/Body/chap-14.html">
    Chapter 14: Conses</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_conses_dictionary.html">
    14.2 The Conses Dictionary</ulink></title>

<formalpara><title>&sublis;, &nsublis;</title>
<para>&sublis; and &nsublis; apply the &key-k; argument to the nodes of
 the cons tree and not to the keys of the alist.</para></formalpara>

<section><title>&mapcar;, &mapcan;, &maplist;, &mapcon;, ...</title>

<para>The constant <emphasis
 role="strong"><function>ext:mapcap</function></emphasis> is like
 &mapcan;, except that it concatenates the resulting lists with &append;
 instead of &nconc;:</para>

<para><literal role="sexp">(<function>ext:mapcap</function>
 <replaceable>fun</replaceable>
 <replaceable>x<subscript>1</subscript></replaceable>
 ... <replaceable>x<subscript>n</subscript></replaceable>)</literal> ==
 <literal role="sexp">(apply #'&append; (&mapcar;
 <replaceable>fun</replaceable>
 <replaceable>x<subscript>1</subscript></replaceable>
 ... <replaceable>x<subscript>n</subscript></replaceable>))</literal></para>

<para>(Actually a bit more efficient that this would be.)</para>

<para>The function <emphasis
 role="strong"><function>ext:maplap</function></emphasis> is like
 &mapcon;, except that it concatenates the resulting lists with &append;
 instead of &nconc;:</para>

<para><literal role="sexp">(<function>ext:maplap</function>
 <replaceable>fun</replaceable>
 <replaceable>x<subscript>1</subscript></replaceable>
 ... <replaceable>x<subscript>n</subscript></replaceable>)</literal> ==
 <literal role="sexp">(apply #'&append; (&maplist;
 <replaceable>fun</replaceable>
 <replaceable>x<subscript>1</subscript></replaceable>
 ... <replaceable>x<subscript>n</subscript></replaceable>))</literal></para>

<para>(Actually a bit more efficient that this would be.)</para>

</section>
</section>
</chapter>


<chapter id="arrays"><title><ulink url="&clhs;/Body/chap-15.html">
    Chapter 15: Arrays</ulink></title>

<formalpara><title>&make-array;</title>
<para>&make-array; can return specialized arrays for the element types
 <literal role="type">(&unsigned-byte-type; 2)</literal>,
 <literal role="type">(&unsigned-byte-type; 4)</literal>,
 <literal role="type">(&unsigned-byte-type; 8)</literal>,
 <literal role="type">(&unsigned-byte-type; 16)</literal>,
 <literal role="type">(&unsigned-byte-type; 32)</literal>
 and of course &bit-type; and &character-class;.</para></formalpara>

<section><title><ulink url="&clhs;/Body/sec_15-1-1.html">
    15.1.1 Array Elements</ulink></title>

<table frame="all"><title>Platform dependent</title>
 <tgroup cols="4" colsep="1" rowsep="1" align="center">
 <colspec colname="vars"/><colspec colname="b16"/>
 <colspec colname="b32"/><colspec colname="b64"/>
 <spanspec spanname="b16-32" namest="b16" nameend="b32" align="center"/>
 <thead><row><entry>CPU type</entry><entry>16-bit CPU</entry>
             <entry>32-bit CPU</entry><entry>64-bit CPU</entry></row></thead>
 <tbody>
 <row><entry>&array-rank-limit;</entry>
 <entry spanname="b16-32">2<superscript>16</superscript> = 65536</entry>
 <entry>2<superscript>32</superscript> = 4294967296</entry></row>
 <row><entry>&array-dimension-limit;</entry>
 <entry spanname="b16-32">2<superscript>24</superscript> = 16777216</entry>
 <entry>2<superscript>32</superscript> = 4294967296</entry></row>
 <row><entry>&array-total-size-limit;</entry>
 <entry spanname="b16-32">2<superscript>24</superscript> = 16777216</entry>
 <entry>2<superscript>32</superscript> = 4294967296</entry></row>
</tbody></tgroup></table>

<para>Note that these constants are not fixnums, contrary to the &ansi-cl;
 Issue <ulink url="&clhs;/Issues/iss014.html">
 ARRAY-DIMENSION-LIMIT-IMPLICATIONS:ALL-FIXNUM</ulink>.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_arrays_dictionary.html">
    15.2 The Arrays Dictionary</ulink></title>

<formalpara><title>&adjust-array; for displaced arrays</title>
<para>An array to which another array is displaced should not be shrunk
 (using &adjust-array;) in such a way that the other array points into
 void space.  This is not checked at the time &adjust-array; is
 called!</para></formalpara>

</section>
</chapter>


<chapter id="strings"><title><ulink url="&clhs;/Body/chap-16.html">
    Chapter 16: Strings</ulink></title>

<para>String comparison is based on the function &char-leq;.  Therefore
 diphthongs do not obey the usual national rules.  Example:
 <literal>o</literal> &lt; <literal>oe</literal> &lt;
 <literal>z</literal> &lt; <literal>&ouml;</literal>.</para>

<section><title><ulink url="&clhs;/Body/sec_the_strings_dictionary.html">
    16.2 The Strings Dictionary</ulink></title>

<formalpara id="string-width"><title>Functions on strings</title>

<para><literal role="sexp">(<function>ext:string-width</function>
 <replaceable>string</replaceable>)</literal> returns the number of
 screen columns occupied by <replaceable>string</replaceable>.  This is
 computed as the sum of all <link
 linkend="char-width"><function>char-width</function></link>s
 of all of the string's characters.</para></formalpara>

</section>
</chapter>


<chapter id="sequences"><title><ulink url="&clhs;/Body/chap-17.html">
    Chapter 17: Sequences</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_seque_s_dictionary.html">
    17.3. The Sequences Dictionary</ulink></title>

<section><title>&loop; &amp; &map;</title>

<para>For iteration through a sequence, a macro
 <emphasis role="strong"><function>ext:doseq</function></emphasis>,
 similar to &dolist;, may be used instead of &map;:</para>

<programlisting>
(<function>ext:doseq</function> (<replaceable>var</replaceable> <replaceable>seqform</replaceable> [<replaceable>resultform</replaceable>])
  {<replaceable>declaration</replaceable>}*
  {<replaceable>tag</replaceable>|<replaceable>statement</replaceable>}*)
</programlisting>

<para><function>ext:doseq</function> forms are &iter-forms;.</para>

</section>

<section><title>&nreverse; &amp; &nreconc;</title>

<formalpara><title>&nreverse;</title>
<para>The result of &nreverse; is always &eq; to the argument.
 &nreverse; on a &vector-class; swaps pairs of elements.
 &nreverse; on a &list-class; swaps the first and the last
 element and reverses the list chaining between them.</para></formalpara>

<formalpara><title>&nreconc;</title>
<para>The result of &nreconc; is &eq; to the first argument unless it is
 &nil;, in which case the result is &eq; to the second argument.</para>
</formalpara>
</section>

<section><title>&remove; &amp; &delete;</title>

<para>&remove;, &remove-if;, &remove-if-not;, &remove-duplicates; return
 their argument unchanged, if no element has to be removed.</para>

<para>&delete;, &delete-if;, &delete-if-not;, &delete-duplicates;
 destructively modify their argument: If the argument is a list, the
 &cdr; parts are modified. If the argument is a vector with fill
 pointer, the fill pointer is lowered and the remaining elements are
 compacted below the new fill pointer.</para>

<para id="count-ansi">Contrary to the &ansi-cl; issue 283 <ulink
 url="&clhs;/Issues/iss283.html">RANGE-OF-COUNT-KEYWORD:NIL-OR-INTEGER</ulink>,
 negative &count-k; keyword arguments are not allowed unless you set
 <emphasis
 role="strong"><varname>custom:*sequence-count-ansi*</varname></emphasis>
 to a non-&nil; value, in hich case <quote>using a negative integer
 value is functionally equivalent to using a value of zero</quote>, as
 per the &ansi-cl; issue.</para>

</section>

<section><title>&sort; &amp; &stable-sort;</title>

<para>&sort; and &stable-sort; have two additional keywords &start-k;
and &end-k;:</para>

<programlisting>
(&sort; <replaceable>sequence</replaceable> <replaceable>predicate</replaceable> &key-amp; &key-k; &start-k; &end-k;)
(&stable-sort; <replaceable>sequence</replaceable> <replaceable>predicate</replaceable> &key-amp; &key-k; &start-k; &end-k;)
</programlisting>

<para>&sort; and &stable-sort; are identical.  They implement the
 mergesort algorithm.  Worst case complexity:
 <varname>O(n*log(n))</varname> comparisons, where
 <replaceable>n</replaceable> is the &length; of the subsequence bounded
 by the &start-k; and &end-k; arguments.</para>

</section>
</section>
</chapter>


<chapter id="hash"><title><ulink url="&clhs;/Body/chap-18.html">
    Chapter 18: Hash Tables</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_hash__s_dictionary.html">
    18.2. The Hash Tables Dictionary</ulink></title>

<section><title>&make-hash-table;</title>

<para>&make-hash-table; has an additional keyword
 <constant>:initial-contents</constant>:</para>

<programlisting>
(&make-hash-table; &key-amp; :test :initial-contents :size
                 :rehash-size :rehash-threshold)
</programlisting>

<para>The <constant>:initial-contents</constant> argument is an alist
 that is used to initialize the new hash table.  The
 <constant>:rehash-threshold</constant> argument is ignored.</para>

</section>

<section><title>&loop;, &maphash;</title>

<para>For iteration through a hash table, a macro
 <emphasis role="strong"><function>ext:dohash</function></emphasis>,
 similar to &dolist;, can be used instead of &maphash;:</para>

<programlisting>
(ext:dohash (<replaceable>key-var</replaceable> <replaceable>value-var</replaceable> <replaceable>hash-table-form</replaceable> [<replaceable>resultform</replaceable>])
  {<replaceable>declaration</replaceable>}*
  {<replaceable>tag</replaceable>|<replaceable>statement</replaceable>}*)
</programlisting>

<para><function>ext:dohash</function> forms are &iter-forms;.</para>

</section>
</section>
</chapter>

<chapter id="filenames"><title><ulink url="&clhs;/Body/chap-19.html">
    Chapter 19: Filenames</ulink></title>

<para>For most operations, pathnames denoting files and pathnames
 denoting directories can not be used interchangeably.</para>

<variablelist>
<!-- #if defined(PATHNAME_UNIX) || defined(PATHNAME_AMIGAOS) -->
<varlistentry><term>Platform dependent: &unix;, &amiga; platforms only.</term>
<listitem><simpara>For example, <filename>#p"FOO/BAR"</filename> denotes
 the file <filename>BAR</filename> in the directory
 <filename>FOO</filename>, while <filename>#p"FOO/BAR/"</filename>
 denotes the subdirectory <filename>BAR</filename> of the directory
 <filename>FOO</filename>.
</simpara></listitem></varlistentry>
<!-- #endif -->

<!-- #if defined(PATHNAME_MSDOS) || defined(PATHNAME_OS2) || defined(PATHNAME_WIN32) -->
<varlistentry><term>Platform dependent: &dos;, &os2;, &win32;
   platforms only.</term>
<listitem><simpara>For example, <filename>#p"FOO\\BAR"</filename>
 denotes the file <filename>BAR</filename> in the directory
 <filename>FOO</filename>, while <filename>#p"FOO\\BAR\\"</filename>
 denotes the subdirectory <filename>BAR</filename> of the directory
 <filename>FOO</filename>.
</simpara></listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef PATHNAME_RISCOS -->
<varlistentry><term>Platform dependent: &acorn; platforms only.</term>
<listitem><simpara>For example, <filename>#p"FOO.BAR"</filename> denotes
 the file <filename>FOO</filename> in the directory
 <filename>BAR</filename>, while <filename>#p"FOO.BAR."</filename>
 denotes the subdirectory <filename>BAR</filename> of the directory
 <filename>FOO</filename>.
</simpara></listitem></varlistentry>
<!-- #endif -->

</variablelist>

<para>This is especially important for the functions <link
 linkend="dir"><function>directory</function>,
 <function>ext:dir</function>, <function>ext:cd</function>,
 <function>ext:make-dir</function>,
 <function>ext:delete-dir</function></link>.</para>

<segmentedlist><title>The minimum filename syntax that may be used
 portably</title>
 <segtitle>pathname</segtitle><segtitle>meaning</segtitle>
 <seglistitem><seg><filename>xxx</filename></seg>
   <seg>for a file with name <replaceable>xxx</replaceable></seg></seglistitem>
 <seglistitem><seg><filename>xxx.yy</filename></seg>
   <seg>for a file with name <replaceable>xxx</replaceable> and type
   <replaceable>yy</replaceable></seg></seglistitem>
 <seglistitem><seg><filename>.yy</filename></seg>
   <seg>for a pathname with type <replaceable>yy</replaceable> and no
   name specified</seg></seglistitem>
</segmentedlist>

<para>Hereby <replaceable>xxx</replaceable> denotes 1 to 8 characters,
 and <replaceable>yy</replaceable> denotes 1 to 3 characters, each of
 which being either an alphanumeric character or the underscore
 <keysym>#\_</keysym>.  Other properties of pathname syntax vary between
 operating systems.</para>

<section><title><ulink url="&clhs;/Body/sec_19-2-1.html">
    19.2.1 Pathname Components</ulink></title>

<para>When a pathname is to be fully specified (no wildcards), that
 means that no &wild-k;, &wild-inferiors-k; is allowed, no wildcard
 characters are allowed in the strings, and
 <replaceable>name</replaceable> &eq; &nil; may not be allowed
 either.</para>

<!-- #ifdef PATHNAME_AMIGAOS -->
<variablelist>
<varlistentry><term>Platform dependent: &amiga; platforms only.</term>
<listitem>
<variablelist><title>Pathname components</title>
<varlistentry><term><replaceable>host</replaceable></term>
 <listitem><simpara>always &nil;</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>device</replaceable></term>
 <listitem><simpara>&nil; or a &simple-string-type;
  </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>directory</replaceable></term>
  <listitem><segmentedlist><title><literal
   role="sexp">(<replaceable>startpoint</replaceable>
   . <replaceable>subdirs</replaceable>)</literal></title>
  <segtitle>element</segtitle><segtitle>values</segtitle>
  <segtitle>meaning</segtitle>
  <seglistitem><seg><replaceable>startpoint</replaceable></seg>
    <seg>&relative-k; | &absolute-k;</seg></seglistitem>
  <seglistitem><seg><replaceable>subdirs</replaceable></seg>
    <seg><literal role="sexp">()</literal> | <literal
     role="sexp">(<replaceable>subdir</replaceable>
    . <replaceable>subdirs</replaceable>)</literal></seg></seglistitem>
  <seglistitem><seg><replaceable>subdir</replaceable></seg>
    <seg>&wild-inferiors-k;</seg>
    <seg><filename>**</filename> or <filename>...</filename>,
    all subdirectories</seg></seglistitem>
  <seglistitem><seg><replaceable>subdir</replaceable></seg>
    <seg>&parent-k;</seg><seg><filename>/</filename> instead of
   <filename>subdir/</filename></seg></seglistitem>
  <seglistitem><seg><replaceable>subdir</replaceable></seg>
    <seg>&simple-string-type;, may contain wildcard
    characters <filename>?</filename> and
    <filename>*</filename></seg></seglistitem>
  </segmentedlist></listitem></varlistentry>
<varlistentry><term><replaceable>name</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain
  wildcard characters <filename>?</filename> and <filename>*</filename>
  (may also be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>type</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain
  wildcard characters <filename>?</filename> and <filename>*</filename>
  (may also be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>version</replaceable></term>
 <listitem><simpara>always &nil; (may also be specified as
  &wild-k; or &newest-k;)</simpara></listitem></varlistentry>
</variablelist>

<para>Constraint: <replaceable>startpoint</replaceable> = &relative-k;
 only if <replaceable>device</replaceable> is &nil;.  If the device is
 specified, the pathname must be absolute!</para>

<para>A filename from AMIGAOS is split into name and type according to
 the following rule:</para>

<itemizedlist>
 <listitem><simpara>if there is no <filename>.</filename> in the
  filename, then the <replaceable>name</replaceable> is everything,
  <replaceable>type</replaceable> is &nil;;</simpara></listitem>
 <listitem><simpara>if there is a <filename>.</filename>, then
  <replaceable>name</replaceable> is the part before and
  <replaceable>type</replaceable> the part after the last dot.
  </simpara></listitem>
</itemizedlist>

<para>Case is ignored in the strings on comparison.  No case conversions
 are performed.</para>

<segmentedlist id="pathnames-externally-amiga">
 <title>filename notations</title>
 <segtitle/><segtitle/>
 <seglistitem><seg>External notation:</seg>
  <seg><filename>dev:sub1.typ/sub2.typ/name.typ</filename></seg></seglistitem>
 <seglistitem><seg>using defaults:</seg>
  <seg><filename>    sub1.typ/sub2.typ/name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>                      name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>    sub1.typ/**/sub3.typ/x*.lisp</filename></seg></seglistitem>
 <seglistitem><seg>or similar.</seg><seg/></seglistitem>
</segmentedlist>

<variablelist><title>Formal specification of the external notation</title>
  <varlistentry><term>ch ::==</term>
   <listitem><simpara>any character except ':','/' and '*','?'
   </simpara></listitem></varlistentry>
  <varlistentry><term>name ::==</term>
   <listitem><simpara>{ch}+</simpara></listitem></varlistentry>
  <varlistentry><term>device ::==</term>
   <listitem><para>[ &lt;empty&gt; | ':' | name ':' ]
    <segmentedlist>
     <segtitle/><segtitle/>
    <seglistitem><seg>empty</seg><seg>current device, relative to
     current directory</seg></seglistitem>
    <seglistitem><seg>':'</seg><seg>current device, absolute (relative
     to root for disks)</seg></seglistitem>
    <seglistitem><seg>name ':'</seg><seg>specified device, absolute
     (relative to root for disks)</seg></seglistitem>
   </segmentedlist></para></listitem></varlistentry>
  <varlistentry><term>subdir ::==</term>
   <listitem><para>[ &lt;empty&gt; | name ]
    <segmentedlist>
     <segtitle/><segtitle/>
    <seglistitem><seg>empty</seg><seg>parent directory</seg></seglistitem>
   </segmentedlist></para></listitem></varlistentry>
  <varlistentry><term>pathname ::==</term>
   <listitem><simpara>device { subdir '/' }* name
   </simpara></listitem></varlistentry>
</variablelist>

<segmentedlist><title>Examples</title>
  <segtitle>String</segtitle><segtitle>Device</segtitle>
  <segtitle>Directory</segtitle><segtitle>our pathname</segtitle>
 <seglistitem><seg><filename>'c:foo'</filename></seg><seg>'C'</seg>
   <seg><filename>device-&gt;foo</filename></seg>
   <seg><filename>"c"</filename>
        (&absolute-k; <filename>"foo"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>'c:foo/'</filename></seg><seg>'C'</seg>
   <seg><filename>device-&gt;foo</filename></seg>
   <seg><filename>"c"</filename>
        (&absolute-k; <filename>"foo"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>'c:foo/bar'</filename></seg><seg>'C'</seg>
   <seg><filename>device-&gt;foo-&gt;bar</filename></seg>
   <seg><filename>"c"</filename>
        (&absolute-k; <filename>"foo" "bar"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>'c:/foo'</filename></seg><seg>'C'</seg>
   <seg><filename>device-&gt;up-&gt;foo</filename></seg>
   <seg><filename>"c"</filename>
        (&absolute-k; &parent-k; <filename>"foo"</filename>)
        </seg></seglistitem>
 <seglistitem><seg><filename>'c:'</filename></seg><seg>'C'</seg>
   <seg><filename>device</filename></seg>
   <seg><filename>"c"</filename> (&absolute-k;)</seg></seglistitem>
 <seglistitem><seg><filename>:foo</filename></seg><seg>current</seg>
   <seg><filename>device-&gt;root-&gt;foo</filename></seg>
   <seg>&nil; (&absolute-k; <filename>"foo"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>foo</filename></seg><seg>current</seg>
   <seg><filename>device-&gt;foo</filename></seg>
   <seg>&nil; (&relative-k; <filename>"foo"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>'/foo'</filename></seg><seg>current</seg>
   <seg><filename>device-&gt;up-&gt;foo</filename></seg>
   <seg>&nil; (&relative-k; &parent-k; <filename>"foo"</filename>)
   </seg></seglistitem>
 <seglistitem><seg><filename>'//foo/bar'</filename></seg><seg>current</seg>
   <seg><filename>device-&gt;up-&gt;up-&gt;foo-&gt;bar</filename></seg>
   <seg>&nil; (&relative-k; &parent-k; &parent-k; <filename>"foo"
               "bar"</filename>)</seg></seglistitem>
 <seglistitem><seg><filename>''</filename></seg><seg>current</seg>
   <seg><filename>device</filename></seg>
   <seg>&nil; (&relative-k;)</seg></seglistitem>
</segmentedlist>

<para>Appending a <filename>'/'</filename> to a path string that is
 non-empty and does not end with <filename>':'</filename> or
 <filename>'/'</filename> does not change its meaning. This
 <filename>'/'</filename> must be appended before another non-empty
 component can be appended.  But appending a <filename>'/'</filename> to
 a path string that is empty or ends with <filename>':'</filename> or
 <filename>'/'</filename> means going up to the parent directory!</para>

<para>We interpret any path string that is empty or ends with
 <filename>':'</filename> or <filename>'/'</filename> as pathname of a
 directory (with both <replaceable>name</replaceable> and
 <replaceable>type</replaceable> being &nil;).</para>
</listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #ifdef PATHNAME_UNIX -->
<variablelist>
<varlistentry><term>Platform dependent: &unix; platforms only.</term>
<listitem><variablelist><title>Pathname components</title>
<varlistentry><term><replaceable>host</replaceable></term>
 <listitem><simpara>always &nil;</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>device</replaceable></term>
 <listitem><simpara>always &nil;</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>directory</replaceable></term>
 <listitem><segmentedlist><title><literal
   role="sexp">(<replaceable>startpoint</replaceable>
   . <replaceable>subdirs</replaceable>)</literal></title>
   <segtitle>element</segtitle><segtitle>values</segtitle>
   <segtitle>meaning</segtitle>
 <seglistitem><seg><replaceable>startpoint</replaceable></seg>
   <seg>&relative-k; | &absolute-k;</seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdirs</replaceable></seg>
   <seg><literal role="sexp">()</literal> | <literal
   role="sexp">(<replaceable>subdir</replaceable> .
   <replaceable>subdirs</replaceable>)</literal></seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
  <seg>&wild-inferiors-k;</seg><seg><filename>**</filename> or
   <filename>...</filename>, all subdirectories</seg></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
  <seg>&simple-string-type;, may contain wildcard characters
  <filename>?</filename> and <filename>*</filename></seg>
  <seg/></seglistitem>
  </segmentedlist></listitem></varlistentry>
<varlistentry><term><replaceable>name</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>type</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>version</replaceable></term>
 <listitem><simpara>always &nil; (may also be specified as
  &wild-k; or &newest-k;)</simpara></listitem></varlistentry>
</variablelist>

<para>A UNIX filename is split into name and type according to the
 following rule:</para>

<itemizedlist>
 <listitem><simpara>if there is no <filename>'.'</filename> in the
  filename, then the <replaceable>name</replaceable> is everything,
  <replaceable>type</replaceable> is &nil;;</simpara></listitem>
 <listitem><simpara>if there is a <filename>'.'</filename>, then
  <replaceable>name</replaceable> is the part before and
  <replaceable>type</replaceable> the part after the last
  dot.</simpara></listitem>
</itemizedlist>

<segmentedlist><title>filename notations</title>
 <segtitle/><segtitle/>
 <seglistitem><seg>External notation:</seg><seg>
  <filename>server:sub1.typ/sub2.typ/name.typ</filename></seg></seglistitem>
 <seglistitem><seg>using defaults:</seg><seg>
  <filename>       sub1.typ/sub2.typ/name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg><seg>
  <filename>                         name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg><seg>
  <filename>       sub1.typ/**/sub3.typ/x*.lisp</filename></seg></seglistitem>
 <seglistitem><seg>or similar.</seg><seg/></seglistitem>
</segmentedlist>
</listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #if defined(PATHNAME_OS2) -->
<variablelist>
<varlistentry><term>Platform dependent: &os2; platforms only.</term>
<listitem><variablelist><title>Pathname components</title>
<varlistentry><term><replaceable>host</replaceable></term>
 <listitem><simpara>always &nil;</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>device</replaceable></term>
 <listitem><simpara>&nil; or &wild-k; or
 <filename>A</filename>|...|<filename>Z</filename>
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>directory</replaceable></term>
 <listitem><segmentedlist><title><literal
   role="sexp">(<replaceable>startpoint</replaceable>
   . <replaceable>subdirs</replaceable>)</literal></title>
   <segtitle>element</segtitle><segtitle>values</segtitle>
   <segtitle>meaning</segtitle>
 <seglistitem><seg><replaceable>startpoint</replaceable></seg>
  <seg>&relative-k; | &absolute-k;</seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdirs</replaceable></seg><seg><literal
    role="sexp">()</literal> | <literal
    role="sexp">(<replaceable>subdir</replaceable> .
   <replaceable>subdirs</replaceable>)</literal></seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
  <seg>&wild-inferiors-k;</seg><seg><filename>**</filename> or
  <filename>...</filename>, all subdirectories </seg></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
   <seg>&simple-string-type;, may contain wildcard characters
   <filename>?</filename> and <filename>*</filename></seg>
   <seg/></seglistitem>
 </segmentedlist></listitem></varlistentry>
<varlistentry><term><replaceable>name</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>type</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>version</replaceable></term>
 <listitem><simpara>always &nil; (may also be specified as &wild-k; or
  &newest-k;)</simpara></listitem></varlistentry>
</variablelist>

<para>An OS/2 filename is split into name and type according to the
 following rule:
<itemizedlist>
 <listitem><simpara>if there is no <filename>'.'</filename> in the
  filename, then the <replaceable>name</replaceable> is everything,
  <replaceable>type</replaceable> is &nil;;</simpara></listitem>
 <listitem><simpara>if there is a <filename>'.'</filename>, then
  <replaceable>name</replaceable> is the part before and
  <replaceable>type</replaceable> the part after the last dot.
  </simpara></listitem>
</itemizedlist></para>

<segmentedlist><title>filename notations</title>
 <segtitle/><segtitle/>
 <seglistitem><seg>External notation:</seg>
  <seg><filename>A:\sub1.typ\sub2.typ\name.typ</filename></seg></seglistitem>
 <seglistitem><seg>using defaults:</seg>
  <seg><filename>  \sub1.typ\sub2.typ\name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>                     name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>*:\sub1.typ\**\sub3.typ\x*.lisp</filename></seg></seglistitem>
 <seglistitem><seg>or similar.</seg><seg/></seglistitem>
</segmentedlist>

<para>Instead of <filename>'\'</filename> one may use
 <filename>'/'</filename>, as usual for DOS calls.</para>
</listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #if defined(PATHNAME_WIN32) -->
<variablelist>
<varlistentry><term>Platform dependent: &win32; platforms only.</term>
<listitem><variablelist><title>Pathname components</title>
<varlistentry><term><replaceable>host</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, wildcard characters may
   occur but don't act as wildcards</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>device</replaceable></term>
 <listitem><simpara>&nil; or &wild-k; or
 <filename>A</filename>|...|<filename>Z</filename>
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>directory</replaceable></term>
 <listitem><segmentedlist><title><literal
   role="sexp">(<replaceable>startpoint</replaceable>
   . <replaceable>subdirs</replaceable>)</literal></title>
   <segtitle>element</segtitle><segtitle>values</segtitle>
   <segtitle>meaning</segtitle>
 <seglistitem><seg><replaceable>startpoint</replaceable></seg>
  <seg>&relative-k; | &absolute-k;</seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdirs</replaceable></seg><seg><literal
    role="sexp">()</literal> | <literal
    role="sexp">(<replaceable>subdir</replaceable> .
   <replaceable>subdirs</replaceable>)</literal></seg><seg/></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
  <seg>&wild-inferiors-k;</seg><seg><filename>**</filename> or
  <filename>...</filename>, all subdirectories </seg></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
   <seg>&simple-string-type;, may contain wildcard characters
   <filename>?</filename> and <filename>*</filename></seg>
   <seg/></seglistitem>
 </segmentedlist></listitem></varlistentry>
<varlistentry><term><replaceable>name</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>type</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
  characters <filename>?</filename> and <filename>*</filename> (may also
  be specified as &wild-k;)</simpara></listitem></varlistentry>
<varlistentry><term><replaceable>version</replaceable></term>
 <listitem><simpara>always &nil; (may also be specified as &wild-k; or
  &newest-k;)</simpara></listitem></varlistentry>
</variablelist>

<para>If <replaceable>host</replaceable> is non-&nil;,
 <replaceable>device</replaceable> must be &nil;.</para>

<para>A &win32; filename is split into name and type according to the
 following rule:
<itemizedlist>
 <listitem><simpara>if there is no <filename>'.'</filename> in the
  filename, then the <replaceable>name</replaceable> is everything,
  <replaceable>type</replaceable> is &nil;;</simpara></listitem>
 <listitem><simpara>if there is a <filename>'.'</filename>, then
  <replaceable>name</replaceable> is the part before and
  <replaceable>type</replaceable> the part after the last dot.
  </simpara></listitem>
</itemizedlist></para>

<segmentedlist><title>filename notations</title>
 <segtitle/><segtitle/>
 <seglistitem><seg>External notation:</seg>
  <seg><filename>A:\sub1.typ\sub2.typ\name.typ</filename></seg></seglistitem>
 <seglistitem><seg>using defaults:</seg>
  <seg><filename>  \sub1.typ\sub2.typ\name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>                     name.typ</filename></seg></seglistitem>
 <seglistitem><seg>or</seg>
  <seg><filename>*:\sub1.typ\**\sub3.typ\x*.lisp</filename></seg></seglistitem>
 <seglistitem><seg>or similar.</seg><seg/></seglistitem>
</segmentedlist>

<para>Instead of <filename>'\'</filename> one may use
 <filename>'/'</filename>, as usual for DOS calls.</para>

<para>If <replaceable>host</replaceable> is non-&nil; and the
 <replaceable>directory</replaceable>'s <replaceable>startpoint</replaceable>
 is not &absolute-k;, <literal role="sexp">(parse-namestring (namestring
 <replaceable>pathname</replaceable>))</literal> will not be the same as
 <replaceable>pathname</replaceable>.</para>

</listitem></varlistentry></variablelist>
<!-- #endif -->

<!-- #ifdef PATHNAME_NOEXT -->
<variablelist>
<varlistentry><term>Platform dependent: &unix;, &amiga;, &os2;, &win32;
    platforms only.</term>
<listitem><simpara>The wildcard characters: <filename>*</filename>
 matches any sequence of characters, <filename>?</filename> matches
 any one character.</simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

<!-- #ifdef PATHNAME_NOEXT -->
<variablelist>
<varlistentry><term>Platform dependent:  &unix;, &amiga;, &os2;, &win32;
   platforms only.</term>
<listitem><simpara>Due to the name/type splitting rule, there are
 pathnames that cannot result from &parse-namestring;.  To get a pathname
 whose type contains a dot or whose name contains a dot and whose type
 is &nil;, &make-pathname; must be used.  Example: <literal
 role="sexp">(&make-pathname; :name ".profile")</literal>.
 </simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

<!-- #ifdef PATHNAME_RISCOS -->
<variablelist>
<varlistentry><term>Platform dependent: &acorn; platforms only.</term>
<listitem><simpara>RISC OS provides several file systems as standard
  (ADFS, IDEFS, NetFS, RamFS, NetPrint) and support for extra file
  systems (DOSFS, ResourceFS and DeviceFS).</simpara>

<simpara>A module called FileSwitch is at the center of all file system
 operation in RISC OS.  FileSwitch provides a common core of functions
 used by all file systems.  It only provides the parts of these services
 that are device independent.  The device dependent services that
 control the hardware are provided by separate modules, which are the
 actual file systems.  FileSwitch keeps track of active file systems and
 switches between them as necessary.</simpara>

<simpara>One of the file system modules that RISC OS provides is
 FileCore.  It takes the normal calls that FileSwitch sends to a file
 system module, and converts them to a simpler set of calls to modules
 that control the hardware.  Unlike FileSwitch it creates a fresh
 instantiation of itself for each module that it supports.  Using
 FileCore to build file system modules imposes a more rigid structure on
 it, as more of the file system is predefined.</simpara>

<simpara>As well as standard file systems, FileSwitch supports image
 file systems.  These provide facilities for RISC OS to handle media in
 foreign formats, and to support `image files' (or partitions) in those
 formats.  Rather than accessing the hardware directly they rely on
 standard RISC OS file systems to do so.  DOSFS is an example of an
 image file system used to handle DOS format discs.</simpara>

<variablelist>
<varlistentry><term>Terminology</term>
 <listitem><simpara>A pathname may include a file system name, a special
  field, a media name (e.g., a disc name), directory name(s), and the
  name of the object itself; each of these parts of a pathname is known
  as an `element' of the pathname.</simpara></listitem></varlistentry>
<varlistentry><term>Filenames</term>
 <listitem><simpara>Filename `elements' may be up to ten characters in
  length on FileCore-based file systems and on NetFS.  These characters
  may be digits or letters.  FileSwitch makes no distinction between
  upper and lower case, although file systems can do so.  As a general
  rule, you should not use top-bit-set characters in filenames, although
  some file systems (such as FileCore-based ones) support them.  Other
  characters may be used provided they do not have a special
  significance.  Those that do are listed below:</simpara>

 <variablelist>
  <varlistentry><term><filename>.</filename></term>
   <listitem><simpara>Separates directory specifications, e.g.,
   <filename>$.fred</filename></simpara></listitem></varlistentry>
  <varlistentry><term><filename>:</filename></term>
   <listitem><simpara>Introduces a drive or disc specification, e.g.,
   <filename>:0</filename>, <filename>:bigdisc</filename>.  It also
   marks the end of a file system name, e.g.,
   <filename>adfs:</filename></simpara></listitem></varlistentry>
  <varlistentry><term><filename>*</filename></term>
   <listitem><simpara>Acts as a `wildcard' to match zero or more
   characters.</simpara></listitem></varlistentry>
  <varlistentry><term><filename>#</filename></term>
   <listitem><simpara>Acts as a `wildcard' to match any single
   character.</simpara></listitem></varlistentry>
  <varlistentry><term><filename>$</filename></term>
   <listitem><simpara>is the name of the root directory of the disc.
   </simpara></listitem></varlistentry>
  <varlistentry><term><filename>&amp;</filename></term>
   <listitem><simpara>is the user root directory (URD)
   </simpara></listitem></varlistentry>
  <varlistentry><term><filename>@</filename></term>
   <listitem><simpara>is the currently selected directory (CSD)
   </simpara></listitem></varlistentry>
  <varlistentry><term><filename>^</filename></term>
   <listitem><simpara>is the `parent' directory
   </simpara></listitem></varlistentry>
  <varlistentry><term><filename>%</filename></term>
   <listitem><simpara>is the currently selected library (CSL)
   </simpara></listitem></varlistentry>
  <varlistentry><term><filename>\</filename></term>
   <listitem><simpara>is the previously selected directory (PSD)
   </simpara></listitem></varlistentry>
  </variablelist></listitem></varlistentry>

<varlistentry><term>Directories</term>
 <listitem><simpara>The root directory, <filename>$</filename>, forms
  the top of the directory hierarchy of the media which contains the
  CSD.  <filename>$</filename> does not have a parent directory, trying
  to access its parent will just access <filename>$</filename>.  Each
  directory name is separated by a <filename>.</filename> character.
  For example:</simpara>
 <itemizedlist>
  <listitem><simpara><filename>$.Documents.Memos</filename>
   </simpara></listitem>
  <listitem><simpara><filename>%.cc</filename></simpara></listitem>
 </itemizedlist></listitem></varlistentry>

<varlistentry><term>File Systems</term>

 <listitem><simpara>Files may also be accessed on file systems other
  than the current one by prefixing the filename with a file system
  specification.  A file system name may appear between
  <filename>-</filename> characters, or suffixed by a
  <filename>:</filename>, though the latter is advised since
  <filename>-</filename> can also be used to introduce a parameter on a
  command line, or as part of a file name.  For example:</simpara>

 <itemizedlist>
  <listitem><simpara><filename>-net-$.SystemMesg</filename>
   </simpara></listitem>
  <listitem><simpara><filename>adfs:%.aasm</filename></simpara></listitem>
 </itemizedlist></listitem></varlistentry>

<varlistentry><term>Special Fields</term>

 <listitem><simpara>Special fields are used to supply more information
  to the file system than you can using standard path names; for example
  NetFS and NetPrint use them to specify server addresses or names. They
  are introduced by a <filename>#</filename> character; a variety of
  syntaxes are possible:</simpara>

<itemizedlist>
  <listitem><simpara><filename>  net#MJHardy::disc1.mike</filename>
   </simpara></listitem>
  <listitem><simpara><filename>     #MJHardy::disc1.mike</filename>
   </simpara></listitem>
  <listitem><simpara><filename> -net#MJHardy-:disc1.mike</filename>
   </simpara></listitem>
  <listitem><simpara><filename>    -#MJHardy-:disc1.mike</filename>
   </simpara></listitem>
</itemizedlist>

 <simpara>The special fields here are all MJHardy, and give the name of
  the fileserver to use.  Special fields may use any character except for
  control characters, double quote '&quot;', solidus '|' and space.  If
  a special field contains a hyphen you may only use the first two
  syntaxes given above.</simpara></listitem></varlistentry>

<varlistentry><term><filename>File$Path</filename> and
  <filename>Run$Path</filename></term>

 <listitem><simpara>These two special variables control exactly where a
  file will be looked for, according to the operation being performed on
  it.</simpara>

<segmentedlist>
 <segtitle>name</segtitle><segtitle>purpose</segtitle>
 <seglistitem><seg>File$Path</seg>
    <seg>for read operations</seg></seglistitem>
 <seglistitem><seg>Run$Path</seg>
    <seg>for execute operations</seg></seglistitem>
</segmentedlist>

 <simpara>The contents of each variable should expand to a list or
  prefixes, separated by commas.  When a read operation is performed
  then the prefixes in <filename>File$Path</filename> are used in the
  order in which they are listed. The first object that matches is used,
  whether it be a file or directory.  Similarly any execute operation
  uses the prefixes in Run$Path.  These search paths are only used when
  the pathname does not contain an explicit file system reference, e.g.,
  executing <filename>adfs:file</filename> will not use
  <filename>Run$Path</filename>.</simpara></listitem></varlistentry>

<varlistentry><term>Other path variables</term>
 <listitem><para>You can set up other path variables and use them as
  pseudo file systems.  For example if you typed:
  <literallayout><userinput>*Set Source$Path adfs:$.src.,adfs:$.public.src.</userinput></literallayout>,
  you could then refer to the pseudo file system as
  <filename>Source:</filename> or (less preferable) as
  <filename>-Source-</filename>.  These path variables work in the same
  was as <filename>File$Path</filename> and
  <filename>Run$Path</filename>.</para>

 <simpara>NOTE: Path variables are not implemented in this version of
 &clisp;.  A workaround for this is to use "&lt;Foo$Path&gt;"
 instead of "Foo:" until they are made available.</simpara>
 </listitem></varlistentry>

<varlistentry id="pathnames-externally-acorn"><term>from Lisp-string
  notation to internal representation</term>

 <listitem><simpara><emphasis>No</emphasis> swapping.
   <filename>foo.lisp</filename> means file type
   <filename>lisp</filename> and file name <filename>foo</filename>.
   This is pseudo-BNF:</simpara>
 <variablelist>
  <varlistentry><term>legal character ::==</term>
   <listitem><simpara>any ISO latin-1 graphic character &ge; ' ' except
    '.' ':' '*' '#' '$' '&amp;' '@' '^' '%' '\' '?'
    </simpara></listitem></varlistentry>
  <varlistentry><term>extended legal character ::==</term>
   <listitem><simpara>any ISO latin-1 graphic character &ge; ' ' except
    ':' '&quot;' '|'
    </simpara></listitem></varlistentry>
  <varlistentry><term>legal-wild char ::==</term>
   <listitem><simpara>legal char | '*' | '#' | '?'
    </simpara></listitem></varlistentry>
  <varlistentry><term>host ::==</term>
   <listitem><simpara> '-' { extended legal char except '-' }+ '-'
    | { extended legal char except '-' } { extended legal char }* ':' | empty
    </simpara></listitem></varlistentry>
  <varlistentry><term>device ::==</term>
   <listitem><simpara> ':' { legal char }+ '.' | empty
    </simpara></listitem></varlistentry>
  <varlistentry><term>directory ::==</term>
    <listitem><para> { '$' | '&amp;' | '@' | '%' | '\' } '.'
    { subdirectory }* | { subdirectory }+ | empty
    <segmentedlist>
     <segtitle/><segtitle/>
     <seglistitem><seg>'$' -&gt;</seg>
         <seg>&absolute-k; &root-k;</seg></seglistitem>
     <seglistitem><seg>'&amp;' -&gt;</seg>
         <seg>&absolute-k; &home-k;</seg></seglistitem>
     <seglistitem><seg>'@' -&gt;</seg>
         <seg>&absolute-k; &current-k;</seg></seglistitem>
     <seglistitem><seg>'%' -&gt;</seg>
         <seg>&absolute-k; &library-k;</seg></seglistitem>
     <seglistitem><seg>'\' -&gt;</seg>
         <seg>&absolute-k; &previous-k;</seg></seglistitem>
     <seglistitem><seg>else</seg><seg>&relative-k;</seg></seglistitem>
    </segmentedlist></para></listitem></varlistentry>
  <varlistentry><term>subdirectory ::==</term>
   <listitem><para>{ '^' | { legal-wild char }+ } '.'
   <segmentedlist>
    <segtitle/><segtitle/>
    <seglistitem><seg>'^' -&gt;</seg><seg>&parent-k;</seg></seglistitem>
   </segmentedlist></para></listitem></varlistentry>
  <varlistentry><term>filename ::==</term>
   <listitem><simpara>{ { legal-wild char }+ | empty }
   </simpara></listitem></varlistentry>
  <varlistentry><term>filetype ::==</term>
   <listitem><simpara>{ '.' { legal-wild char }+ | empty }
   </simpara></listitem></varlistentry>
  <varlistentry><term>pathname ::==</term>
   <listitem><simpara>host device directory filename filetype
   </simpara></listitem></varlistentry>
 </variablelist>

<segmentedlist><title>Examples</title>
   <segtitle>String</segtitle><segtitle>Hostname</segtitle>
   <segtitle>Device</segtitle><segtitle>Directory</segtitle>
   <segtitle>Name</segtitle><segtitle>Type</segtitle>
 <seglistitem><seg><filename>-net-$.SystemMesg</filename></seg>
   <seg><filename>net</filename></seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>SystemMesg</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>net#MJHardy::disc1.mike</filename></seg>
   <seg><filename>net#MJHardy</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>mike</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>#MJHardy::disc1.mike</filename></seg>
   <seg><filename>#MJHardy</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>mike</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>-net#MJHardy-:disc1.mike</filename></seg>
   <seg><filename>net#MJHardy</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>mike</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>-#MJHardy-:disc1.mike</filename></seg>
   <seg><filename>#MJHardy</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>mike</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>@.foo</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &current-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>foo</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>^.</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; &parent-k;)</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>@.^.</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &current-k;
        &parent-k;)</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>foo.bar</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg><filename>bar</filename></seg></seglistitem>
 <seglistitem><seg><filename>foo.bar.baz</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg><filename>baz</filename></seg></seglistitem>
 <seglistitem><seg><filename>foo.bar.</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; "foo" "bar")</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg></seglistitem>
 <seglistitem><seg><filename>foo.@.</filename></seg>
   <seg>illegal</seg>
   <seg/>
   <seg/>
   <seg/>
   <seg/></seglistitem>
</segmentedlist></listitem></varlistentry>

<varlistentry><term>From internal representation to RISCOS string</term>

 <listitem><simpara>with swapping <emphasis>only</emphasis> of name/type
  components.</simpara>

<segmentedlist>
  <segtitle>Hostname</segtitle><segtitle>Device</segtitle>
  <segtitle>Directory</segtitle><segtitle>Name</segtitle>
  <segtitle>Type</segtitle><segtitle>RISCOS String</segtitle>
 <seglistitem><seg><filename>net</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>net::disc1.$.foo</filename></seg></seglistitem>
 <seglistitem><seg><filename>net#MJ</filename></seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg><filename>baz</filename></seg>
   <seg><filename>net#MJ::disc1.$.foo.baz.bar</filename></seg></seglistitem>
 <seglistitem><seg><filename>adfs</filename></seg>
   <seg><filename>4</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k; "foo"
        "bar")</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><filename>adfs::4.$.foo.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &root-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>:disc1.$.foo.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&absolute-k; &current-k;)</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg>illegal here</seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg><filename>disc1</filename></seg>
   <seg><literal role="sexp">(&relative-k;)</literal></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><filename>:disc1.</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg><filename>disc1</filename></seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><filename>:disc1.</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &root-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>$.foo</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &current-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>@.foo</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg><filename>bar</filename></seg>
   <seg><filename>bar.foo</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg><filename>baz</filename></seg>
   <seg><filename>foo.baz.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &library-k;)</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>%.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&absolute-k; &library-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>%.foo.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k;)</literal></seg>
   <seg><filename>foo</filename></seg>
   <seg><filename>bar</filename></seg>
   <seg><filename>bar.foo</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; "foo")</literal></seg>
   <seg><filename>bar</filename></seg>
   <seg>&nil;</seg>
   <seg><filename>foo.bar</filename></seg></seglistitem>
 <seglistitem><seg>&nil;</seg>
   <seg>&nil;</seg>
   <seg><literal role="sexp">(&relative-k; "foo")</literal></seg>
   <seg>&nil;</seg>
   <seg><filename>bar</filename></seg>
   <seg>illegal here</seg></seglistitem>
</segmentedlist>

<simpara>That is, the RISCOS string is the flattening-concatenation
 of</simpara>

<programlisting>
  (append
    (if (null hostname) "" (append hostname ":"))
    (if (null device) "" (append ":" device "."))
    (case (pop directory)
      (:absolute (case (pop directory)
                         (:root "$.")
                         (:home "&amp;.")
                         (:current "@.")
                         (:library "%.")
                         (:previous "\\.")))
      (:relative ""))
    (mapcar (lambda (subdir) (append subdir ".")) directory)
    (if (null name)
        (if (null type) "" (error "type with name illegal here"))
        (if (null type)
            name
            (append type "." name))))
</programlisting>
</listitem></varlistentry>

<varlistentry><term>internal representation</term>
<listitem><variablelist><title>Pathname components</title>
<varlistentry><term><replaceable>host</replaceable></term>
 <listitem><simpara>&simple-string-type; or &nil;
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>device</replaceable></term>
 <listitem><simpara>&simple-string-type; or &nil;
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>directory</replaceable></term>
 <listitem><segmentedlist><title><literal
    role="sexp">(<replaceable>Startpoint</replaceable>
    . <replaceable>Subdirs</replaceable>)</literal></title>
   <segtitle>element</segtitle><segtitle>values</segtitle>
 <seglistitem><seg><replaceable>startpoint</replaceable></seg>
   <seg>&relative-k; | &absolute-k;
   <replaceable>anchor</replaceable></seg></seglistitem>
 <seglistitem><seg><replaceable>anchor</replaceable></seg>
   <seg>&root-k; | &home-k; | &current-k; | &library-k; |
   &previous-k;</seg></seglistitem>
 <seglistitem><seg><replaceable>Subdirs</replaceable></seg>
   <seg><literal role="sexp">()</literal> | <literal
   role="sexp">(<replaceable>subdir</replaceable>
   . <replaceable>Subdirs</replaceable>)</literal></seg></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
   <seg>&parent-k;</seg></seglistitem>
 <seglistitem><seg><replaceable>subdir</replaceable></seg>
   <seg>&simple-string-type;, may contain wildcard characters
   <filename>?</filename>,<filename>#</filename> and
   <filename>*</filename></seg></seglistitem>
 </segmentedlist></listitem></varlistentry>
<varlistentry><term><replaceable>name</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
 characters <filename>?</filename>,<filename>#</filename> and
 <filename>*</filename> (may also be specified as &wild-k;)
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>type</replaceable></term>
 <listitem><simpara>&nil; or &simple-string-type;, may contain wildcard
 characters <filename>?</filename>,<filename>#</filename> and
 <filename>*</filename> (may also be specified as &wild-k;)
 </simpara></listitem></varlistentry>
<varlistentry><term><replaceable>version</replaceable></term>
 <listitem><simpara>always &nil; (may also be specified as &wild-k; or
 &newest-k;)</simpara></listitem></varlistentry>
</variablelist>

<para>Constraint: startpoint is not &absolute-k; &root-k; only if device
 is &nil;. If the device is specified, the pathname must be &absolute-k;
 &root-k;.</para>

<para>The wildcard characters: <filename>'*'</filename> matches any
 sequence of characters, <filename>'#'</filename> or
 <filename>'?'</filename> matches any one character.</para>

<para>Due to the name/type swapping rule, there are pathnames that
 cannot result from &parse-namestring;.  To get a pathname whose type is
 &nil;, &make-pathname; must be used.  Example: <literal
 role="sexp">(&make-pathname; :directory "!Clisp." :name
 "README")</literal>.</para>

</listitem></varlistentry></variablelist>
</listitem></varlistentry></variablelist>
<!-- #endif -->

</section>

<section><title>External notation.</title>

<para>External notation of pathnames (cf.  &parse-namestring; and
 &namestring;), of course without spaces, [,],{,}:</para>

<variablelist>
<!-- #ifdef PATHNAME_MSDOS -->
<varlistentry><term>Platform dependent: &dos; platforms only.</term>
<listitem><segmentedlist>
   <segtitle/><segtitle/>
  <seglistitem><seg>[ [drivespec] : ]</seg>
   <seg>a letter <filename>*</filename> |
    <filename>A</filename>|...|<filename>Z</filename>|
    <filename>a</filename>|...|<filename>z</filename></seg></seglistitem>
  <seglistitem><seg>{ name [. type] \ }</seg>
   <seg>each one a subdirectory, <filename>\</filename> may be
    replaced by <filename>/</filename></seg></seglistitem>
  <seglistitem><seg>[ name [. type] ]</seg>
   <seg>filename with type (extension)</seg></seglistitem>
</segmentedlist>

<para>Name and type may be character sequences of any &length;
 (consisting of alphanumeric characters and <filename>-</filename>,
 <filename>_</filename>).  They are shortened to 8 (respectively 3)
 characters and converted to upper case.  A single
 <filename>*</filename> is allowed for &wild-k;.</para>
</listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef PATHNAME_AMIGAOS -->
<varlistentry><term>Platform dependent: &amiga; platforms only.</term>
<listitem><simpara>see <link linkend="pathnames-externally-amiga">above</link>.
</simpara></listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef PATHNAME_UNIX -->
<varlistentry><term>Platform dependent: &unix; platforms only.</term>
<listitem><segmentedlist>
   <segtitle/><segtitle/>
  <seglistitem><seg>[ <filename>/</filename> ]</seg>
   <seg><filename>/</filename> denotes absolute
     pathnames</seg></seglistitem>
  <seglistitem><seg>{ <replaceable>name</replaceable>
      <filename>/</filename> }</seg>
   <seg>each one a subdirectory</seg></seglistitem>
  <seglistitem><seg>[ <replaceable>name</replaceable>
      [<filename>.</filename> <replaceable>type</replaceable>] ]</seg>
   <seg>filename with type (extension)</seg></seglistitem>
</segmentedlist>

<para>Name and type may be character sequences of any &length;
 (consisting of printing ASCII characters, except
 <filename>/</filename>).</para>
</listitem></varlistentry>
<!-- #endif -->

<!-- #if defined(PATHNAME_OS2) || defined(PATHNAME_WIN32) -->
<varlistentry><term>Platform dependent: &os2;, &win32; platforms only.</term>
<listitem><segmentedlist>
   <segtitle/><segtitle/>
  <seglistitem><seg>[ [<replaceable>drivespec</replaceable>] : ]</seg>
   <seg>a letter <filename>*</filename>|
     <filename>a</filename>|...|<filename>z</filename>|
     <filename>A</filename>|...|<filename>Z</filename></seg></seglistitem>
  <seglistitem><seg>{ <replaceable>name</replaceable>
      [. <replaceable>type</replaceable>] \ }</seg>
   <seg>each one a subdirectory, <filename>\</filename> may be
     replaced by <filename>/</filename></seg></seglistitem>
  <seglistitem><seg>[ <replaceable>name</replaceable>
      [. <replaceable>type</replaceable>] ]</seg>
   <seg>filename with type (extension)</seg></seglistitem>
</segmentedlist>

<para>Name and type may be character sequences of any &length;
 (consisting of printing ASCII characters, except
 <filename>/</filename>, <filename>\</filename>,
 <filename>:</filename>).</para>
</listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef PATHNAME_RISCOS -->
<varlistentry><term>Platform dependent: &acorn; platforms only.</term>
<listitem><simpara>see <link linkend="pathnames-externally-acorn">above</link>.
</simpara></listitem></varlistentry>
<!-- #endif -->

</variablelist>

<para>&namestring; has an optional flag argument: <literal
 role="sexp">(&namestring; <replaceable>pathname</replaceable>
 &t;)</literal> returns an external notation suitable for passing to the
 operating system or other programs.</para>

<!-- #if !defined(USER_HOMEDIR) -->
<variablelist>
<varlistentry><term>Platform dependent:  &dos;, &os2;, &amiga;
   platforms only.</term>
<listitem><simpara>The function &user-homedir-pathname; is not implemented.
</simpara></listitem></varlistentry>
<!-- #if defined(MSDOS) -->

<varlistentry><term>Platform dependent: &dos;, &os2; platforms only.</term>
<listitem><para>If you really need that function, you might define it
    like this:
<programlisting>
(defun user-homedir-pathname (&amp;optional host)
  (declare (ignore host))
  (or (system::getenv "HOME") "\\"))
</programlisting></para></listitem></varlistentry>
<!-- #endif -->

</variablelist>
<!-- #endif -->

</section>

<section><title><ulink url="&clhs;/Body/sec_19-3.html">
    19.3 Logical Pathnames.</ulink></title>

<!-- #ifdef LOGICAL_PATHNAMES -->
<para>When the argument of the function &translate-logical-pathname; is
 a string, it is interpreted as a logical pathname string.
<!-- #endif --></para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_filen_s_dictionary.html">
    19.4 The Filenames Dictionary.</ulink></title>

<para>&pathname; always returns a physical pathname.</para>

<para>&pathname-match-p; does not interpret missing components as
 wild.</para>

<para>&translate-pathname; has two additional keywords: <literal
 role="sexp">(&translate-pathname; <replaceable>source</replaceable>
 <replaceable>from-wildname</replaceable>
 <replaceable>to-wildname</replaceable> &key-amp; &all-k;
 &merge-k;)</literal></para>

<para>If &all-k; is specified and non-&nil;, a list of all resulting
 pathnames, corresponding to all matches of <literal
 role="sexp">(&pathname-match-p; <replaceable>source</replaceable>
 <replaceable>from-wildname</replaceable>)</literal>, is returned.  If
 &merge-k; is specified and &nil;, unspecified pieces of
 <replaceable>to-pathname</replaceable> are not replaced by
 corresponding pieces of <replaceable>source</replaceable>.</para>

<para>This function seems to be buggy at this time.  Sorry.</para>

<section id="parsename"><title>&parse-namestring;</title>

<para><literal role="sexp">(&parse-namestring;
   <replaceable>string</replaceable> &optional-amp;
   <replaceable>host</replaceable> <replaceable>defaults</replaceable>
   &key-amp; <replaceable>start</replaceable> <replaceable>end</replaceable>
   <replaceable>junk-allowed</replaceable>)</literal>
 returns a logical pathname only if <replaceable>host</replaceable> is a
 <ulink url="&clhs;/Body/glo_l.html#logical_host">logical host</ulink>
 or <replaceable>host</replaceable> is &nil; and
 <replaceable>defaults</replaceable> is a &logical-pathname-class;.
 To construct a logical pathname from a string, the function
 &logical-pathname; can be used.</para>

<para>The ANSI-mandated behavior of recognizing logical pathnames when
the <replaceable>string</replaceable> begins with some alphanumeric
characters followed by a colon (<keysym>#\:</keysym>) is very confusing
(cf. <literal>"c:/autoexec.bat"</literal>,
<literal>"home:.clisprc"</literal> and
<literal>"prep:/pub/gnu"</literal>) and therefore disabled by default.
To enable the ANSI standard behavior, you should set &parsename; to
non-&nil;.</para>

</section>

<section id="pathmerge"><title>&merge-pathnames;</title>

<para><literal role="sexp">(&merge-pathnames;
   <replaceable>pathname</replaceable>
   [<replaceable>default-pathname</replaceable>])</literal>
 returns a logical pathname only if
 <replaceable>default-pathname</replaceable> is a logical pathname.  To
 construct a logical pathname from a string, the function
 &logical-pathname; can be used.</para>

<para>When both <replaceable>pathname</replaceable> and
 <replaceable>default-pathname</replaceable> are relative pathnames, the
 behavior depends on &pathmerge;: when it is &nil;, then &clisp; retains
 its traditional behavior:
 <literal role="sexp">(&merge-pathnames; #p"x/" #p"y/")</literal>
 evaluates to <filename>#p"x/"</filename></para>

<para><emphasis>Rationale</emphasis>: &merge-pathnames; is used to
 specify default components for pathnames, so there is some analogy
 between <literal role="sexp">(&merge-pathnames; a b)</literal> and
 <literal role="sexp">(or a b)</literal>.  Obviously putting in the same
 default a second time should do the same as putting it in once:
 <literal role="sexp">(or a b b)</literal> is the same as <literal
 role="sexp">(or a b)</literal>, so <literal
 role="sexp">(&merge-pathnames; (&merge-pathnames; a b) b)</literal>
 should be the same as <literal role="sexp">(&merge-pathnames; a
 b)</literal>.</para>

<para>(This question actually matters because in &cl; there is no
 distinction between <quote>pathnames with defaults merged-in</quote> and
 <quote>pathnames with defaults not yet applied</quote>.)</para>

<para>Now, <literal role="sexp">(&merge-pathnames; (&merge-pathnames;
 '#p"x/" '#p"y/") '#p"y/")</literal> and <literal
 role="sexp">(&merge-pathnames; '#p"x/" '#p"y/")</literal> are &equal;
 in &clisp; (when &pathmerge; is &nil;), but not in implementations that
 strictly follow the &ansi-cl; spec.  In fact, the above twice-default =
 once-default rule holds for all pathnames in &clisp;.</para>

<para>When &pathmerge; is non-&nil;, the normal
 &ansi-cl; behavior is exhibited:
 <literal role="sexp">(&merge-pathnames; #p"x/" #p"y/")</literal>
  evaluates to <filename>#p"y/x/"</filename></para>

<para>The rationale is that <quote>merge</quote> is
 <emphasis>merge</emphasis> and not <emphasis>or</emphasis>.</para>

</section>
</section>
</chapter>


<chapter id="files"><title><ulink url="&clhs;/Body/chap-20.html">
    Chapter 20: Files</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_files_dictionary.html">
    20.2 The Files Dictionary.</ulink></title>

<formalpara><title>&rename-file;</title>
<para>&rename-file; always returns a non-logical pathname as
 its first value.</para></formalpara>

<formalpara><title>&probe-file;</title>
<para>&probe-file; can not be used to check whether a directory
 exists. Use the function <link
 linkend="probe-dir"><function>ext:probe-directory</function></link> or
 the function &directory; for this purpose.</para></formalpara>

<formalpara><title>&file-author;</title>
<para>&file-author; always returns &nil;, because the operating systems
 &clisp; is ported to do not store a file's author in the file system.
 Some operating systems, such as Unix, have the notion of a file's
 owner, and some other &cl; implementations return the user name of the
 file owner.  &clisp; does not do this, because
 <emphasis>owner</emphasis> and <emphasis>author</emphasis> are not the
 same; in particular, authorship is preserved by copying, while
 ownership is not.</para></formalpara>

<formalpara id="probe-dir"><title><function>probe-directory</function></title>
<para><literal role="sexp">(<function>ext:probe-directory</function>
 <replaceable>pathname</replaceable>)</literal> tests whether
 <replaceable>pathname</replaceable> exists and is a directory.  It
 will, unlike &probe-file; or &truename;, not signal an error if the
 parent directory of <replaceable>pathname</replaceable> does not
 exist.</para></formalpara>

<section id="dir"><title>&directory;</title>

<para><literal role="sexp">(&directory; &optional-amp;
 <replaceable>pathname</replaceable> &key-amp; :full :circle)</literal>
 can run in two modes:
<itemizedlist>
 <listitem><simpara>If <replaceable>pathname</replaceable> contains no
  name or type component, a list of all matching directories is
  produced.</simpara></listitem>
 <listitem><simpara>Otherwise a list of all matching files is
  returned. If the <constant>:full</constant> argument is non-&nil;,
  this contains additional information: for each matching file you get a
  list of at least four elements <literal
  role="sexp">(<replaceable>file-pathname</replaceable>
  <replaceable>file-truename</replaceable>
  <replaceable>file-write-date-as-decoded-time</replaceable>
  <replaceable>file-length</replaceable>)</literal>.</simpara></listitem>
</itemizedlist>

<!-- #ifdef UNIX -->
<variablelist>
<varlistentry><term>Platform dependent: &unix; platforms only.</term>
<listitem><simpara>If the <constant>:circle</constant> argument is
 non-&nil;, the function avoids endless loops that may result from
 symbolic links.</simpara></listitem></varlistentry>
</variablelist>
<!-- #endif --></para>

<formalpara><title><function>ext:dir</function></title>
<para><literal role="sexp">(<function>ext:dir</function>
 &optional-amp; <replaceable>pathname</replaceable>)</literal> is like
 &directory;, but displays the pathnames instead of returning them.
 <literal role="sexp">(ext:dir)</literal> shows the contents of the
 current directory.</para></formalpara>

<variablelist><title><function>ext:cd</function></title>
<!-- #if defined(PATHNAME_UNIX) || defined(PATHNAME_AMIGAOS) -->
<varlistentry><term>Platform dependent: &unix;, &amiga; platforms only.</term>
 <listitem><simpara><literal role="sexp">(<function>ext:cd</function>
   [<replaceable>pathname</replaceable>])</literal>
   manages the current directory.</simpara></listitem></varlistentry>
<!-- #elif defined(PATHNAME_RISCOS) -->
<varlistentry><term>Platform dependent: &acorn; platforms only.</term>
 <listitem><simpara><literal role="sexp">(<function>ext:cd</function>
   [<replaceable>pathname</replaceable>])</literal>
   manages the current host, current device and the current directory.
   </simpara></listitem></varlistentry>
<!-- #else -->
<varlistentry><term>Platform dependent: &dos;, &os2;, &win32;
   platforms only.</term>
 <listitem><simpara><literal role="sexp">(<function>ext:cd</function>
   [<replaceable>pathname</replaceable>])</literal>
   manages the current device and the current directory.
   </simpara></listitem></varlistentry>
<!-- #endif -->
</variablelist>

<formalpara><title><function>ext:cd</function></title>
<para><literal role="sexp">(<function>ext:cd</function>
 <replaceable>pathname</replaceable>)</literal> sets it, <literal
 role="sexp">(ext:cd)</literal> returns it.</para></formalpara>

<formalpara><title><function>ext:default-directory</function></title>
<para><literal
 role="sexp">(<function>ext:default-directory</function>)</literal> is
 equivalent to <literal
 role="sexp">(<function>ext:cd</function>)</literal>.  <literal
 role="sexp">(&setf; (<function>ext:default-directory</function>)
 <replaceable>pathname</replaceable>)</literal> is equivalent to
 <literal role="sexp">(<function>ext:cd</function>
 <replaceable>pathname</replaceable>)</literal>, except for the return
 value.</para></formalpara>

<formalpara><title><function>ext:make-dir</function></title>
<para><literal role="sexp">(<function>ext:make-dir</function>
 <replaceable>directory-pathname</replaceable>)</literal> creates a new
 subdirectory.</para></formalpara>

<formalpara><title><function>ext:delete-dir</function></title>
<para><literal role="sexp">(<function>ext:delete-dir</function>
 <replaceable>directory-pathname</replaceable>)</literal> removes an
 (empty) subdirectory.</para></formalpara>

</section>
</section>
</chapter>


<chapter id="streams"><title><ulink url="&clhs;/Body/chap-21.html">
    Chapter 21: Streams</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_21-1-1-1-3.html">
    21.1.1.1.3 Interactive Streams</ulink></title>

<para>Interactive streams are those whose next input might depend on a
 prompt one might output.</para>

</section>

<section id="terminal"><title>terminal interaction.</title>

<!-- #ifdef GNU_READLINE -->
<variablelist><title>&readline;</title>
 <varlistentry><term>Platform dependent: &unix;, &dos;, &os2;
    platforms only, and only in &clisp; built &without; compile-time
    flag &noreadline;.</term>
 <listitem><simpara>Input through &terminal-io-var; uses the &readline;
  library.  Arrow keys can be used to move within the input history. The
  Tab key completes the symbol's name that is being typed.  See
  <ulink url="clreadline.html">clreadline.html</ulink> or
  <ulink url="clreadline.dvi">clreadline.dvi</ulink> for a complete
  description of the key bindings.  The &readline; library is not used
  if standard input and standard output do not both refer to the same
  terminal.</simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

<!-- #if defined(KEYBOARD) || defined(AMIGAOS) -->
<variablelist><title>&with-kbd;</title>
<varlistentry><term>Platform dependent: &unix;, &amiga;, &acorn;, &dos;,
  &os2;, &win32; platforms only.</term>
<listitem><para>&terminal-io-var; is not the only stream that
 communicates directly with the user: During execution of the body of a
 <literal role="sexp">(&with-kbd;
 . <replaceable>body</replaceable>)</literal> form, <emphasis
 role="strong">&kbd-in;</emphasis> is the stream that reads the
 keystrokes from the keyboard.
 It returns every keystroke in detail, as character or
 <classname>sys::input-character</classname> with the following bits:
<variablelist>
<!-- #if defined(MSDOS) || defined(WIN32) || defined(AMIGAOS) -->
 <varlistentry><term><constant>:hyper</constant></term>
  <listitem><simpara><emphasis>(Platform dependent: &dos;, &os2;,
   &win32;, &amiga; platforms only.)</emphasis>
   if a non-standard key.  These keys are:
<!-- #if defined(MSDOS) || defined(WIN32) -->
   Function keys, cursor keypads, numeric keypad <emphasis>(Platform
   dependent: &dos;, &os2;, &win32; platforms only)</emphasis>.
<!-- #endif -->
<!-- #ifdef AMIGAOS -->
     Function keys, cursor keypad <emphasis>(Platform dependent:
     &amiga; platforms only)</emphasis>.
<!-- #endif -->
   </simpara></listitem></varlistentry>
<!-- #endif -->
  <varlistentry><term>slot <replaceable>key</replaceable></term>
    <listitem><para>the key name, for non-standard keys:
      <variablelist>
<!-- #ifdef MSDOS -->
       <varlistentry><term>Platform dependent: &dos;, &os2;
          platforms only.</term>
      <listitem><segmentedlist>
       <segtitle>key</segtitle><segtitle>value</segtitle>
       <seglistitem><seg><keycode>F1</keycode>..<keycode>F12</keycode></seg>
         <seg><constant>:F1</constant>..<constant>:F12</constant>
         </seg></seglistitem>
       <seglistitem><seg><keycode>Insert</keycode></seg>
         <seg><constant>:Insert</constant></seg></seglistitem>
       <seglistitem><seg><keycode>Delete</keycode></seg>
         <seg><constant>:Delete</constant></seg></seglistitem>
       <seglistitem><seg><keycode>Home</keycode></seg>
         <seg><constant>:Home</constant></seg></seglistitem>
       <seglistitem><seg><keycode>End</keycode></seg>
         <seg><constant>:End</constant></seg></seglistitem>
       <seglistitem><seg><keycode>PgUp</keycode></seg>
         <seg><constant>:PgUp</constant></seg></seglistitem>
       <seglistitem><seg><keycode>PgDn</keycode></seg>
         <seg><constant>:PgDn</constant></seg></seglistitem>
       <seglistitem><seg>Arrow keys</seg>
         <seg><constant>:Left</constant><constant>:Right</constant>
         <constant>:Up</constant><constant>:Down</constant></seg></seglistitem>
      </segmentedlist></listitem></varlistentry>
<!-- #endif -->

<!-- #if defined(UNIX) || defined(WIN32) -->
      <varlistentry><term>Platform dependent: &unix;, &win32;
         platforms only.</term>
      <listitem><segmentedlist>
       <segtitle>key</segtitle><segtitle>value</segtitle>
       <seglistitem><seg><keycode>F1</keycode>..<keycode>F12</keycode></seg>
         <seg><constant>:F1</constant>..<constant>:F12</constant>
         </seg></seglistitem>
       <seglistitem><seg><keycode>Insert</keycode></seg>
         <seg><constant>:Insert</constant></seg></seglistitem>
       <seglistitem><seg><keycode>Delete</keycode></seg>
         <seg><constant>:Delete</constant></seg></seglistitem>
       <seglistitem><seg><keycode>Home</keycode></seg>
         <seg><constant>:Home</constant></seg></seglistitem>
       <seglistitem><seg><keycode>End</keycode></seg>
         <seg><constant>:End</constant></seg></seglistitem>
       <seglistitem><seg><keycode>Center</keycode></seg>
         <seg><constant>:Center</constant></seg></seglistitem>
       <seglistitem><seg><keycode>PgUp</keycode></seg>
         <seg><constant>:PgUp</constant></seg></seglistitem>
       <seglistitem><seg><keycode>PgDn</keycode></seg>
         <seg><constant>:PgDn</constant></seg></seglistitem>
       <seglistitem><seg>Arrow keys</seg>
         <seg><constant>:Left</constant><constant>:Right</constant>
         <constant>:Up</constant><constant>:Down</constant></seg></seglistitem>
      </segmentedlist></listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef AMIGAOS -->
    <varlistentry><term>Platform dependent: &amiga; platforms only.</term>
    <listitem><segmentedlist>
       <segtitle>key</segtitle><segtitle>value</segtitle>
       <seglistitem><seg><keycode>F1</keycode>..<keycode>F10</keycode></seg>
         <seg><constant>:F1</constant>..<constant>:F10</constant>
         </seg></seglistitem>
       <seglistitem><seg><keycode>Help</keycode></seg>
         <seg><constant>:Help</constant></seg></seglistitem>
       <seglistitem><seg>Arrow keys</seg>
         <seg><constant>:Left</constant><constant>:Right</constant>
         <constant>:Up</constant><constant>:Down</constant></seg></seglistitem>
      </segmentedlist></listitem></varlistentry>
<!-- #endif -->
      </variablelist></para></listitem></varlistentry>

  <varlistentry><term>slot <replaceable>char</replaceable></term>
    <listitem><simpara>the ASCII code for standard keys
    </simpara></listitem></varlistentry>

<!-- #if defined(MSDOS) || defined(WIN32) || defined(AMIGAOS) -->
  <varlistentry><term><constant>:super</constant></term>
   <listitem><simpara><emphasis>(Platform dependent: &dos;, &os2;,
     &win32;, &amiga; platforms only.)</emphasis>
  if pressed together with <keycap>Shift</keycap> key(s) and if the
  keystroke would have been an other without <keycap>Shift</keycap>.
  </simpara></listitem></varlistentry>
<!-- #endif -->
  <varlistentry><term><constant>:control</constant></term>
   <listitem><simpara>if pressed together with the
    <keycap>Control</keycap> key.
   </simpara></listitem></varlistentry>
<!-- #if defined(MSDOS) || defined(WIN32) -->
  <varlistentry><term><constant>:meta</constant></term>
  <listitem><simpara><emphasis>(Platform dependent: &dos;, &os2;, &win32;
    platforms only.)</emphasis>
  if pressed together with the <keycap>Alternate</keycap> key.
  </simpara></listitem></varlistentry>
<!-- #endif -->
</variablelist>

 This keyboard input is not echoed on the screen.  During execution of a
 <literal role="sexp">(&with-kbd;
 . <replaceable>body</replaceable>)</literal> form, no input from
 &terminal-io-var; or any synonymous stream should be requested.</para>
</listitem></varlistentry>
</variablelist>
<!-- #endif -->

</section>

<section><title><ulink url="&clhs;/Body/sec_the_streams_dictionary.html">
    21.2. The Streams Dictionary</ulink></title>

<section><title>&stream-element-type;</title>

<para>&stream-element-type; is &setf;able. The element type of streams
  created by the functions &open;,
<link linkend="pipe"><function>ext:make-pipe-input-stream</function></link>,
<link linkend="pipe"><function>ext:make-pipe-output-stream</function></link>,
<link linkend="pipe"><function>ext:make-pipe-io-stream</function></link>,
<link linkend="socket"><function>socket:socket-accept</function></link>,
<link linkend="socket"><function>socket:socket-connect</function></link>
  can be modified, if the old and the new element type are either
<itemizedlist>
  <listitem><simpara>both equivalent to &character-class; or
      <literal role="sexp">(&unsigned-byte-type; 8)</literal> or
      <literal role="sexp">(&signed-byte-type; 8)</literal>, or
    </simpara></listitem>
  <listitem><simpara>both equivalent to
      <literal role="sexp">(&unsigned-byte-type;
        <replaceable>n</replaceable>)</literal> or
      <literal role="sexp">(&signed-byte-type;
        <replaceable>n</replaceable>)</literal>,
      with the same <replaceable>n</replaceable>.</simpara></listitem>
</itemizedlist></para>

</section>

<section><title>Binary input, &read-byte;,
  <function>ext:read-integer</function> &amp;
  <function>ext:read-float</function></title>

<para>The function <literal
    role="sexp">(<function>ext:read-integer</function>
    <replaceable>stream</replaceable>
    <replaceable>element-type</replaceable> &optional-amp;
    &endianness; <replaceable>eof-error-p</replaceable>
    <replaceable>eof-value</replaceable>)</literal>
 reads a multi-byte integer from <replaceable>stream</replaceable>.
 <replaceable>stream</replaceable> should be a stream with element-type
 <literal role="sexp">(&unsigned-byte-type; 8)</literal>.
 <replaceable>element-type</replaceable> should be a type equivalent to
 <literal role="sexp">(&unsigned-byte-type;
 <replaceable>n</replaceable>)</literal>, where
 <replaceable>n</replaceable> is a multiple of 8.</para>

<para><literal role="sexp">(<function>ext:read-integer</function>
 <replaceable>stream</replaceable>
 <replaceable>element-type</replaceable>)</literal> is like <literal
 role="sexp">(&read-byte; <replaceable>stream</replaceable>)</literal>
 if <replaceable>stream</replaceable>'s element type were set to
 <replaceable>element-type</replaceable>, except that
 <replaceable>stream</replaceable>'s &file-position; will increase by
 <superscript><replaceable>n</replaceable></superscript>/<subscript>8</subscript>
 instead of 1.</para>

<para id="endianness">&endianness; can be <constant>:little</constant>
 or <constant>:big</constant>.  The default is
 <constant>:little</constant>, which corresponds to the &read-byte;
 behavior in &clisp;.</para>

<para>Together with <literal role="sexp">(&setf;
 &stream-element-type;)</literal>, this function permits mixed
 character/binary input from a stream.</para>

<para>The function <literal role="sexp">(<function>ext:read-float</function>
    <replaceable>stream</replaceable>
    <replaceable>element-type</replaceable> &optional-amp;
    &endianness; <replaceable>eof-error-p</replaceable>
    <replaceable>eof-value</replaceable>)</literal>
 reads a floating-point number in IEEE binary representation from
 <replaceable>stream</replaceable>.  <replaceable>stream</replaceable>
 should be a stream with element-type <literal
 role="sexp">(&unsigned-byte-type; 8)</literal>.
 <replaceable>element-type</replaceable> should be a type equivalent to
 &single-float-type; or &double-float-type;.</para>

</section>

<section><title>Binary output, &write-byte;,
  <function>ext:write-integer</function> &amp;
  <function>ext:write-float</function></title>

<para>The function <literal
    role="sexp">(<function>ext:write-integer</function>
    <replaceable>integer</replaceable> <replaceable>stream</replaceable>
    <replaceable>element-type</replaceable> &optional-amp;
    &endianness;)</literal>
 writes a multi-byte integer to <replaceable>stream</replaceable>.
 <replaceable>stream</replaceable> should be a stream with element-type
 <literal role="sexp">(&unsigned-byte-type; 8)</literal>.
 <replaceable>element-type</replaceable> should be a type equivalent to
 <literal role="sexp">(&unsigned-byte-type;
 <replaceable>n</replaceable>)</literal>, where
 <replaceable>n</replaceable> is a multiple of 8.</para>

<para><literal role="sexp">(<function>ext:write-integer</function>
    <replaceable>integer</replaceable> <replaceable>stream</replaceable>
    <replaceable>element-type</replaceable>)</literal>
 is like <literal role="sexp">(&write-byte;
 <replaceable>integer</replaceable>
 <replaceable>stream</replaceable>)</literal> if
 <replaceable>stream</replaceable>'s element type were set to
 <replaceable>element-type</replaceable>, except that
 <replaceable>stream</replaceable>'s &file-position; will increase by
 <superscript><replaceable>n</replaceable></superscript>/<subscript>8</subscript>
 instead of 1.</para>

<para>Together with <literal role="sexp">(&setf;
  &stream-element-type;)</literal>, this function permits mixed
  character/binary output to a stream.</para>

<para>The function <literal
    role="sexp">(<function>ext:write-float</function>
    <replaceable>float</replaceable> <replaceable>stream</replaceable>
    <replaceable>element-type</replaceable> &optional-amp;
    &endianness;)</literal>
 writes a floating-point number in IEEE binary representation to
 <replaceable>stream</replaceable>.  <replaceable>stream</replaceable>
 should be a stream with element-type <literal
 role="sexp">(&unsigned-byte-type; 8)</literal>.
 <replaceable>element-type</replaceable> should be a type equivalent to
 &single-float-type; or &double-float-type;.</para>

</section>

<section><title>&read-sequence;</title>

<para>In addition to &read-sequence;, the following two
 functions are provided:</para>

<variablelist>
 <varlistentry><term><emphasis
   role="strong"><function>ext:read-byte-sequence</function></emphasis>
   performs multiple &read-byte; operations:</term>

 <listitem><simpara><literal
   role="sexp">(<function>ext:read-byte-sequence</function>
   <replaceable>sequence</replaceable> <replaceable>stream</replaceable>
   &key-amp; &start-k; &end-k;)</literal> fills the subsequence of
   <replaceable>sequence</replaceable> specified by &start-k; and
   &end-k; with integers consecutively read from
   <replaceable>stream</replaceable>.  It returns the index of the first
   element of <replaceable>sequence</replaceable> that was not updated
   (= <replaceable>end</replaceable> or &lt;
   <replaceable>end</replaceable> if the stream reached its end).</simpara>

 <simpara>This function is especially efficient if
  <replaceable>sequence</replaceable> is a <literal
  role="sexp">(&vector-class; (&unsigned-byte-type; 8))</literal> and
  <replaceable>stream</replaceable> is a &file-pipe-socket; stream with
  element type <literal role="sexp">(&unsigned-byte-type;
  8)</literal>.</simpara></listitem></varlistentry>

 <varlistentry><term><emphasis
   role="strong"><function>ext:read-char-sequence</function></emphasis>
   performs multiple &read-char; operations:</term>

 <listitem><simpara><literal
  role="sexp">(<function>read-char-sequence</function>
  <replaceable>sequence</replaceable> <replaceable>stream</replaceable>
  &key-amp; &start-k; &end-k;)</literal> fills the subsequence of
  <replaceable>sequence</replaceable> specified by &start-k; and &end-k;
  with characters consecutively read from
  <replaceable>stream</replaceable>.  It returns the index of the first
  element of <replaceable>sequence</replaceable> that was not updated (=
  <replaceable>end</replaceable> or &lt; <replaceable>end</replaceable>
  if the stream reached its end).</simpara>

 <simpara>This function is especially efficient if
  <replaceable>sequence</replaceable> is a &string-class; and
  <replaceable>stream</replaceable> is a &file-pipe-socket; stream with
  element type &character-class; or an <ulink
  url="&clhs;/Body/glo_i.html#input">input</ulink> <ulink
  url="&clhs;/Body/glo_s.html#string_stream">string stream</ulink>.
  </simpara></listitem></varlistentry>
</variablelist>

</section>

<section><title>&write-sequence;</title>

<para>In addition to &write-sequence;, the following two
functions are provided:</para>

<variablelist>
 <varlistentry><term><emphasis
   role="strong"><function>ext:write-byte-sequence</function></emphasis>
   performs multiple &write-byte; operations:</term>

 <listitem><simpara><literal
  role="sexp">(<function>ext:write-byte-sequence</function>
  <replaceable>sequence</replaceable> <replaceable>stream</replaceable>
  &key-amp; &start-k; &end-k;)</literal> outputs the integers of the
  subsequence of <replaceable>sequence</replaceable> specified by
  &start-k; and &end-k; to <replaceable>stream</replaceable>. It returns
  <replaceable>sequence</replaceable>.</simpara>

 <simpara>This function is especially efficient if
 <replaceable>sequence</replaceable> is a <literal
 role="sexp">(&vector-class; (&unsigned-byte-type; 8))</literal> and
 <replaceable>stream</replaceable> is a &file-pipe-socket; stream with
 element type <literal role="sexp">(&unsigned-byte-type;
 8)</literal>.</simpara></listitem></varlistentry>

<varlistentry><term><emphasis
  role="strong"><function>ext:write-char-sequence</function></emphasis>
  performs multiple &write-char; operations:</term>

 <listitem><simpara><literal
   role="sexp">(<function>ext:write-char-sequence</function>
   <replaceable>sequence</replaceable> <replaceable>stream</replaceable>
   &key-amp; &start-k; &end-k;)</literal> outputs the characters of the
   subsequence of <replaceable>sequence</replaceable> specified by
   &start-k; and &end-k; to <replaceable>stream</replaceable>.  It
   returns <replaceable>sequence</replaceable>.</simpara>

 <simpara>This function is especially efficient if
  <replaceable>sequence</replaceable> is a &string-class; and
  <replaceable>stream</replaceable> is a &file-pipe-socket; stream with
  element type &character-class;.</simpara></listitem></varlistentry>
</variablelist>
</section>

<!-- #if defined(MSDOS) || defined(WIN32) || (defined(UNIX) && (O_BINARY != 0)) -->
<section><title>&file-position;</title>

<variablelist>
 <varlistentry><term>Platform dependent: &dos;, &os2;, &win32;
    platforms only.</term>
<listitem><simpara>&file-position; works on any buffered file stream.
  When a <keysym>#\Newline</keysym> is output to (respectively input
  from) a file stream, its file position is increased by 2 since
  <keysym>#\Newline</keysym> is encoded as
  <keycode>CR</keycode>/<keycode>LF</keycode> in the file.
</simpara></listitem></varlistentry></variablelist>
</section>
<!-- #endif -->

<section id="open"><title>&open;</title>

<para>&open; cannot handle files of size &ge; 4 GB.</para>

<para>&open; accepts three additional keywords: &eltype;, &extfmt;,
   &buffered;.</para>

<variablelist><title>The acceptable values for the
   &file-pipe-socket; functions</title>
 <varlistentry id="eltype"><term><constant>:element-type</constant></term>
  <listitem><simpara>types equivalent to &character-class; or
   <literal role="sexp">(&unsigned-byte-type;
   <replaceable>n</replaceable>)</literal>,
   <literal role="sexp">(&signed-byte-type;
   <replaceable>n</replaceable>)</literal>; if the stream is to be
   unbuffered, <replaceable>n</replaceable> must be a multiple of 8.
   </simpara></listitem></varlistentry>
 <varlistentry id="extfmt"><term><constant>:external-format</constant></term>
  <listitem><simpara>encodings, (constant) symbols in the <link
   linkend="encoding"><function>CHARSET</function></link> package,
   strings (denoting <link linkend="iconv">iconv()</link> based
   encodings), the symbol <constant>:default</constant>, and the <link
   linkend="newline">line terminator</link> keywords
   <constant>:unix</constant>, <constant>:mac</constant>,
   <constant>:dos</constant>.  The default encoding is
   <link linkend="def-file-enc"
     ><varname>custom:*default-file-encoding*</varname></link>.
  </simpara></listitem></varlistentry>
 <varlistentry id="buffered"><term><constant>:buffered</constant></term>
  <listitem><para>&nil;, &t;, or <constant>:default</constant>.
  <itemizedlist>
   <listitem><simpara>for functions that create &socket-stream;s and
    <link linkend="pipe">pipes</link>, <constant>:default</constant> is
    equivalent to &nil;;</simpara></listitem>
   <listitem><simpara>for functions that <link
    linkend="open">open</link> files, <constant>:default</constant>
    means that buffered file streams will be returned for regular files
    and (on Unix) block-devices, and unbuffered file streams for special
    files.</simpara></listitem>
  </itemizedlist>
</para></listitem></varlistentry>
</variablelist>

</section>

<section><title>&close;</title>

<para>&close; ignores its &abort-k; argument.</para>

</section>

<section><title>&broadcast-stream-class;</title>

<para>&input-stream-p; and &interactive-stream-p; return false for
 <ulink url="&clhs;/Body/glo_b.html#broadcast_stream">broadcast
 streams</ulink>.</para>

</section>
</section>
</chapter>


<chapter id="printer"><title><ulink url="&clhs;/Body/chap-22.html">
    Chapter 22: Printer</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_22-1-1-1.html">
    22.1.1.1 Multiple Possible Textual Representations</ulink></title>

<para id="pr-closure">An additional variable <emphasis
 role="strong"><varname>custom:*print-closure*</varname></emphasis>
 controls whether compiled and interpreted functions (closures) are
 output in detailed form.  If <varname>custom:*print-closure*</varname> is
 non-&nil;, compiled closures are output in <keysym>#Y</keysym> syntax
 which the reader understands.  <varname>custom:*print-closure*</varname>
 is initially set to &nil;.</para>

<para id="pr-rpars">An additional variable <emphasis
 role="strong"><varname>custom:*print-rpars*</varname></emphasis> controls
 the output of the right (closing) parentheses. If
 <varname>custom:*print-rpars*</varname> is non-&nil;, closing parentheses
 which do not fit onto the same line as the the corresponding opening
 parenthesis are output just below their corresponding opening
 parenthesis, in the same column.  <varname>custom:*print-rpars*</varname>
 is initially set to &nil;.</para>

<para id="pr-indent">An additional variable <emphasis
 role="strong"><varname>custom:*print-indent-lists*</varname></emphasis>
 controls the indentation of lists that span more than one line. It
 specifies by how many characters items within the list will be indented
 relative to the beginning of the list.
 <varname>custom:*print-indent-lists*</varname> is initially set to
 <literal>1</literal>.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_22-1-3-7.html">
    22.1.3.7 Printing Other Vectors</ulink></title>

<para>When &print-readably-var; is true, other vectors are written as
 follows: if the element-type is &t-class;, the syntax <literal
 role="sexp">#(<replaceable>x<subscript>0</subscript></replaceable>
 ... <replaceable>x<subscript>n-1</subscript></replaceable>)</literal>
 is used.  Otherwise, the syntax <literal
 role="sexp">#A(<replaceable>element-type</replaceable>
 <replaceable>dimensions</replaceable>
 <replaceable>contents</replaceable>)</literal> is used.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_22-1-3-8.html">
    22.1.3.8 Printing Other Arrays</ulink></title>

<para>When &print-readably-var; is true, other arrays are written as
 follows: if the element-type is &t-class;, the syntax <literal
 role="sexp">#<replaceable>rank</replaceable>A
 <replaceable>contents</replaceable></literal> is used.  Otherwise, the
 syntax <literal role="sexp">#A(<replaceable>element-type</replaceable>
 <replaceable>dimensions</replaceable>
 <replaceable>contents</replaceable>)</literal> is used.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_printer_dictionary.html">
    22.4 The Printer Dictionary</ulink></title>

<formalpara><title> &write; &amp; &write-to-string;</title>
<para>The functions &write; and &write-to-string; have an additional
 keyword <constant>:closure</constant> that can be used to bind
 &pr-closure;.</para></formalpara>

<section><title>&format;</title>

<para>The &format; instruction &format-w; is similar to &format-a; and
 &format-s;, but avoids binding of &print-escape-var;.
 <literal role="sexp">(&format; <replaceable>stream</replaceable>
 "~W" <replaceable>object</replaceable>)</literal> is equivalent to
 <literal role="sexp">(&write;
 <replaceable>object</replaceable> :stream
 <replaceable>stream</replaceable>)</literal>.</para>

<para>The &format; instruction <emphasis
 role="strong"><literal>~!</literal></emphasis> is similar to
 &format-slash;, but avoids putting a function name into a string.
 Thus, even if the function is not interned in the &clu-pac; package,
 you might not need to specify the package.</para>

<para><literal role="sexp">(&format; <replaceable>stream</replaceable>
 "~args!" <replaceable>function</replaceable>
 <replaceable>object</replaceable>)</literal> is equivalent to <literal
 role="sexp">(&funcall; <replaceable>function</replaceable>
 <replaceable>stream</replaceable> <replaceable>object</replaceable>
 <replaceable>colon-modifier-p</replaceable>
 <replaceable>atsign-modifier-p</replaceable>
 <replaceable>args</replaceable>)</literal>.</para>

<para>&format; &format-r; and &format; &format-rs; can output only
 integers in the range <varname>|n| &lt;
 <replaceable>10<superscript>66</superscript></replaceable></varname>.
 The output is in English, according to the American conventions, and
 these conventions are identical to the British conventions only in the
 range <varname>|n| &lt;
 <replaceable>10<superscript>9</superscript></replaceable></varname>.</para>

<para>&format; &format-c; does not output the character itself, only the
 instruction how to type the character.</para>

<para>For &format; &format-e; and &format; &format-g;, the value of
 &read-default-float-format-var; does not matter if &print-readably-var;
 is true.</para>

<para>&format; &format-t; can determine the current column of any
 built-in stream.</para>

</section>

<section id="pathprint"><title>pathnames</title>

<para>Pathnames are printed as follows: If &print-escape-var; is &nil;,
 only the namestring is printed; otherwise it is printed with
 <filename>#P""</filename> syntax, as per &ansi-cl; Issue <ulink
 url="&clhs;/Issues/iss276.html">
 PRINT-READABLY-BEHAVIOR:CLARIFY</ulink>.  But, if &print-readably-var;
 is true, we are in trouble as <filename>#P""</filename> is ambiguous
 (which is verboten when &print-readably-var; is true), while being
 mandated by the &ansi-cl;.  Therefore, in this case, we print it like
 this:
<computeroutput>#-CLISP #P"" #+CLISP #S(PATHNAME ...)</computeroutput></para>

<para>When the variable &pathprint; is &nil;, otherwise the
 <function>#P""</function> notation is used as per <ulink
 url="&clhs;/Body/sec_1-5-1-4.html">1.5.1.4.1 Resolution of Apparent
 Conflicts in Exceptional Situations</ulink>.</para>

</section>

<section><title>misc</title>

<para>&print-case-var; controls the output not only of symbols, but also
 of characters and some <computeroutput>#&lt;...&gt;</computeroutput>
 objects.</para>

<para>In the absence of <emphasis
 role="strong"><function>sys::write-float-decimal</function></emphasis>,
 floating point numbers are output in radix 2.  This function is defined
 in <filename>floatpri.lisp</filename> and is not available if you run
 &clisp; without a memory image (which you should never do anyway!)</para>

<para>If &print-readably-var; is true,
 &read-default-float-format-var; has no influence on the way
 floating point numbers are printed.</para>

<variablelist>
<!-- #ifndef AMIGAOS -->
<varlistentry><term>Platform dependent: &unix;, &dos;, &os2;, &win32;,
   &acorn; platforms only.</term>
<listitem><simpara>&print-pretty-var; is initially &nil; but set to &t;
 in &config-file;.  This makes screen output prettier.
 </simpara></listitem></varlistentry>
<!-- #else -->
<varlistentry><term>Platform dependent: &amiga; platforms only.</term>
<listitem><simpara>&print-pretty-var; is initially &nil; but set to &t;
 in &config-file;.  This makes unbuffered screen output both much faster
 and prettier.
 </simpara></listitem></varlistentry>
<!-- #endif -->
</variablelist>

<para>&print-array-var; is initially set to &t;.</para>

</section>
</section>
</chapter>

<chapter id="reader"><title><ulink url="&clhs;/Body/chap-23.html">
    Chapter 23: Reader</ulink></title>

<para>This is the list of objects whose external representation can not
  be meaningfully read in:
<segmentedlist><title>unreadable objects</title>
  <segtitle>format</segtitle><segtitle>meaning</segtitle>
 <seglistitem><seg><literal>#&lt;<replaceable>type</replaceable>
     ...&gt;</literal></seg>
    <seg>all structures lacking a keyword constructor</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;ARRAY <replaceable>type</replaceable>
       <replaceable>dimensions</replaceable>&gt;</literal></seg>
    <seg>all arrays except strings, if &print-array-var; is
       &nil;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;SYSTEM-FUNCTION
       <replaceable>name</replaceable>&gt;</literal></seg>
    <seg>built-in function written in &c-lang;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;ADD-ON-SYSTEM-FUNCTION
       <replaceable>name</replaceable>&gt;</literal></seg>
    <seg>other function written in &c-lang;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;SPECIAL-OPERATOR
       <replaceable>name</replaceable>&gt;</literal></seg>
    <seg>special operator handler</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;COMPILED-CLOSURE
       <replaceable>name</replaceable>&gt;</literal></seg>
    <seg>compiled function, if &pr-closure; is &nil;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;CLOSURE <replaceable>name</replaceable>
       ...&gt;</literal></seg>
    <seg>interpreted function</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;FRAME-POINTER #x...&gt;</literal></seg>
    <seg>pointer to a stack frame</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;DISABLED POINTER&gt;</literal></seg>
    <seg>frame pointer which has become invalid on exit from the
       corresponding &block; or &tagbody;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;...-STREAM ...&gt;</literal></seg>
    <seg>stream</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;PACKAGE
       <replaceable>name</replaceable>&gt;</literal></seg>
    <seg>package</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;HASH-TABLE #x...&gt;</literal></seg>
    <seg>hash table, if &print-array-var; is &nil;</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;READTABLE #x...&gt;</literal></seg>
    <seg>readtable</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;SYMBOL-MACRO
       <replaceable>form</replaceable>&gt;</literal></seg>
    <seg>&symbol-macro; handler</seg></seglistitem>
<!-- #ifdef FOREIGN -->
 <seglistitem><seg><literal>#&lt;FOREIGN-POINTER #x...&gt;</literal></seg>
    <seg>foreign pointer
      <emphasis>(Platform dependent: &unix;, &win32;, &amiga;
         platforms only.)</emphasis>
     </seg></seglistitem>
<!-- #endif -->
<!-- #ifdef DYNAMIC_FFI -->
 <seglistitem><seg><literal>#&lt;FOREIGN-ADDRESS #x...&gt;</literal></seg>
    <seg>foreign address
     <emphasis>(Platform dependent: &unix;, &win32; platforms only.)</emphasis>
    </seg></seglistitem>
 <seglistitem><seg><literal>#&lt;FOREIGN-VARIABLE
       <replaceable>name</replaceable> #x...&gt;</literal></seg>
    <seg>foreign variable
     <emphasis>(Platform dependent: &unix;, &win32; platforms only.)</emphasis>
    </seg></seglistitem>
 <seglistitem><seg><literal>#&lt;FOREIGN-FUNCTION
       <replaceable>name</replaceable> #x...&gt;</literal></seg>
    <seg>foreign function
     <emphasis>(Platform dependent: &unix;, &win32; platforms only.)</emphasis>
    </seg></seglistitem>
<!-- #endif -->
 <seglistitem><seg><literal>#&lt;UNBOUND&gt;</literal></seg>
    <seg>"value" of a symbol without value, "value" of an unsupplied
      optional or keyword argument</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;SPECIAL REFERENCE&gt;</literal></seg>
    <seg>environment marker for variables declared &special-dec;
      </seg></seglistitem>
 <seglistitem><seg><literal>#&lt;DOT&gt;</literal></seg>
    <seg>internal &read; result for "."</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;END OF FILE&gt;</literal></seg>
    <seg>internal &read; result, when the end of file is reached
      </seg></seglistitem>
 <seglistitem><seg><literal>#&lt;READ-LABEL ...&gt;</literal></seg>
    <seg>intermediate &read; result for <literal>#n#</literal>
      </seg></seglistitem>
 <seglistitem><seg><literal>#&lt;ADDRESS #x...&gt;</literal></seg>
    <seg>machine address, should not occur</seg></seglistitem>
 <seglistitem><seg><literal>#&lt;SYSTEM-POINTER #x...&gt;</literal></seg>
    <seg>should not occur</seg></seglistitem>
</segmentedlist></para>

<section id="chario"><title>characters</title>

<para><keysym>#\Code</keysym> allows input of characters of arbitrary code:
 e.g., <keysym>#\Code231</keysym> reads as the character
 <literal role="sexp">(&code-char; 231.)</literal>.</para>

</section>

<section><title>Additional read dispatch macros</title>

<itemizedlist>
<listitem><simpara><keysym>#Y</keysym> is used to read compiled
  functions and to set the current input stream's encoding.
  </simpara></listitem>
<listitem><simpara><filename>#""</filename> is used to read pathnames:
  <filename>#"test.lisp"</filename> is the value of <literal
  role="sexp">(&pathname; "test.lisp")</literal></simpara>
<variablelist>
<!-- #if defined(MSDOS) -->
<varlistentry><term>Platform dependent: &dos;, &os2;, &win32;
   platforms only.</term>
<listitem><simpara>As in all strings, backslashes must be written twice
  here: <filename>#"A:\\programs\\test.lisp"</filename>
  </simpara></listitem></varlistentry>
<!-- #endif -->

<!-- #ifdef RISCOS -->
<varlistentry><term>Platform dependent: &acorn; platforms only.</term>
<listitem><simpara> As in all strings, backslashes must be written twice
  here: <filename>#"\\.test.lisp"</filename>
  </simpara></listitem></varlistentry>
<!-- #endif -->
</variablelist></listitem>
</itemizedlist>

</section>

<section><title>&readtable-case;</title>

<para>When the value of <literal role="sexp">(&readtable-case;
 <replaceable>readtable</replaceable>)</literal> is
 <constant>:invert</constant>, it applies to the package name and the
 symbol name of a symbol separately (not to the entire token at once).
 An alternative to the use of &readtable-case; is the use of the
 &case-sensitive-k; option to &make-package;,
 &in-package; and &defpackage;.</para>

</section>

<section><title>&listen;, &read-char-no-hang;</title>

<variablelist>
 <varlistentry><term><literal
  role="sexp">(<function>ext:read-char-will-hang-p</function>
              <replaceable>stream</replaceable>)</literal></term>
  <listitem><simpara><function>ext:read-char-will-hang-p</function>
  queries the stream's input status. It returns &nil; if &read-char; and
  &peek-char; with a <replaceable>peek-type</replaceable> of &nil; will return
  immediately. Otherwise it returns true. (In the latter case the standard
  &listen; function would return &nil;.)</simpara>
  <simpara>Note the difference with <literal role="sexp">(not (listen
  <replaceable>stream</replaceable>))</literal>: When the &eos; is reached,
  &listen; returns &nil;, whereas
  <function>ext:read-char-will-hang-p</function> returns &nil;.</simpara>
  <simpara>Note also that
  <function>ext:read-char-will-hang-p</function> is not a good mean to
  test for &eos;: If <function>ext:read-char-will-hang-p</function>
  returns &t;, this does not mean that the stream will deliver more
  characters. It only means that it is not known at this moment whether
  the stream is already at &eos;, or will deliver more characters.
  </simpara></listitem></varlistentry>
</variablelist>

</section>

<section><title>&read-byte;</title>

<variablelist>
 <varlistentry><term><literal
    role="sexp">(<function>ext:read-byte-lookahead</function>
                 <replaceable>stream</replaceable>)</literal></term>
  <listitem><simpara>To be called only if
   <replaceable>stream</replaceable>'s element-type is
   <literal role="sexp">(unsigned-byte 8)</literal> or
   <literal role="sexp">(signed-byte 8)</literal>. Returns &t; if
   &read-byte; would return immediately with an integer result.
   Returns &eof-k; if the &eos; is already known to be reached.
   If &read-byte;'s value is not available immediately, returns &nil;
   instead of waiting.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal
  role="sexp">(<function>ext:read-byte-will-hang-p</function>
              <replaceable>stream</replaceable>)</literal></term>
  <listitem><simpara>To be called only if
   <replaceable>stream</replaceable>'s element-type is
   <literal role="sexp">(unsigned-byte 8)</literal> or
   <literal role="sexp">(signed-byte 8)</literal>. Returns &nil; if
   &read-byte; will return immediately. Otherwise it returns true.
  </simpara></listitem></varlistentry>
 <varlistentry><term><literal
    role="sexp">(<function>ext:read-byte-no-hang</function>
                 <replaceable>stream</replaceable> &optional-amp;
                 <replaceable>eof-error-p</replaceable>
                 <replaceable>eof-value</replaceable>)</literal></term>
  <listitem><simpara>To be called only if
   <replaceable>stream</replaceable>'s element-type is
   <literal role="sexp">(unsigned-byte 8)</literal> or
   <literal role="sexp">(signed-byte 8)</literal>. Returns an integer or
   does &eos; handling, like &read-byte;, if that would return immediately.
   If &read-byte;'s value is not available immediately, returns &nil;
   instead of waiting.
   </simpara></listitem></varlistentry>
</variablelist>

</section>
</chapter>


<chapter id="system"><title><ulink url="&clhs;/Body/chap-24.html">
    Chapter 24: System Construction</ulink></title>

<section><title><ulink url="&clhs;/Body/sec_the_syste_n_dictionary.html">
    24.2: The System Construction Dictionary</ulink></title>

<para>The compiler can be called not only by the functions &compile;,
 &compile-file; and &disassemble;, but also by the declaration <link
 linkend="compile-decl"><literal
 role="sexp">(compile)</literal></link>.</para>

<section id="compilefile"><title>&compile-file;</title>

<para><literal role="sexp">(&compile-file;
          <replaceable>input-file</replaceable> &key-amp; :output-file
          :listing &warnings-k; &verbose-k; &print-k;)</literal>
compiles a file to platform-independent bytecode.</para>

<variablelist>
<varlistentry><term><replaceable>input-file</replaceable></term>
 <listitem><simpara>should be a pathname/string/symbol.
 </simpara></listitem></varlistentry>
<varlistentry><term><constant>:output-file</constant></term>
 <listitem><simpara>should be &nil; or &t; or a pathname/string/symbol
 or an output-stream.  The default is &t;.
 </simpara></listitem></varlistentry>
<varlistentry><term><constant>:listing</constant></term>
 <listitem><simpara>should be &nil; or &t; or a pathname/string/symbol
 or an output-stream.  The default is &nil;.
 </simpara></listitem></varlistentry>
<varlistentry><term>&warnings-k;</term>
 <listitem><simpara>specifies whether warnings should also appear on the
 screen.</simpara></listitem></varlistentry>
<varlistentry><term>&verbose-k;</term>
 <listitem><simpara>specifies whether error messages should also appear
 on the screen.</simpara></listitem></varlistentry>
<varlistentry><term>&print-k;</term>
 <listitem><simpara>specifies whether an indication which forms are
 being compiled should appear on the screen.
 </simpara></listitem></varlistentry>
</variablelist>

<para>The variables <emphasis
 role="strong"><varname>custom:*compile-warnings*</varname></emphasis>,
 &compile-verbose-var;, &compile-print-var; provide defaults for the
 &warnings-k;, &verbose-k;, &print-k; keyword arguments, respectively.
 For each input file (default file type: <filename>#p".lisp"</filename>)
 the following files are generated:</para>

<segmentedlist>
  <segtitle>File</segtitle><segtitle>When</segtitle>
  <segtitle>Default file type</segtitle><segtitle>Contents</segtitle>
 <seglistitem><seg>output file</seg>
   <seg>only if <constant>:output-file</constant> is not &nil;</seg>
   <seg><function>#p".fas"</function></seg>
   <seg>can be loaded using the &load; function</seg></seglistitem>
 <seglistitem><seg>auxiliary output file</seg>
   <seg>only if <constant>:output-file</constant> is not &nil;</seg>
   <seg><function>#p".lib"</function></seg>
   <seg>used by &compile-file; when compiling a &require; form referring
    to the input file</seg></seglistitem>
 <seglistitem><seg>listing file</seg>
   <seg>only if <constant>:listing</constant> is not &nil;</seg>
   <seg><function>#p".lis"</function></seg>
   <seg>disassembly of the output file</seg></seglistitem>
 <seglistitem><seg>&c-lang; output file</seg>
   <seg>only if <constant>:output-file</constant> is not &nil;</seg>
   <seg><function>#p".c"</function></seg>
   <seg>foreign function interface; this file is deleted if it is
    empty</seg></seglistitem>
</segmentedlist>

</section>

<section><title>&compile-file-pathname;</title>
<para>The default for the <constant>:output-file</constant> argument is
 &t;, which means <function>#p".fas"</function>.</para></section>

<section><title>&require;</title>
<para>The function &require; receives as optional argument either a
 pathname or a list of pathnames: files to be loaded if the required
 module is not already in memory.</para></section>

<section id="loadfile"><title>&load;</title>

<para>&load; has two additional keywords &echo-k; and
 &compiling-k;.</para>

<para><literal role="sexp">(&load; <replaceable>filename</replaceable>
 &key-amp; &verbose-k; &print-k; &echo-k;
 &if-does-not-exist; &compiling-k;)</literal></para>

<variablelist>
 <varlistentry><term>&verbose-k; &t;</term>
  <listitem><simpara>causes &load; to emit a short message that a file is
   being loaded.  The default is &load-verbose-var;, which is initially &t;.
  </simpara></listitem></varlistentry>
 <varlistentry><term>&print-k; &t;</term>
  <listitem><simpara>causes &load; to print the value of each form.  The
  default is &load-print-var;, which is initially &nil;.
  </simpara></listitem></varlistentry>
 <varlistentry><term>&echo-k; &t;</term>
  <listitem><simpara>causes the input from the file to be echoed to
  &standard-output-var; (normally to the screen).  Should
  there be an error in the file, you can see at one glance where it is.
  The default is <emphasis
  role="strong"><varname>custom:*load-echo*</varname></emphasis>, which is
  initially &nil;.</simpara></listitem></varlistentry>
 <varlistentry><term>&compiling-k; &t;</term>
  <listitem><simpara>causes each form read to be compiled on the fly.
  The compiled code is executed at once and - in contrast to <link
  linkend="compilefile"><function>compile-file</function></link> - not
  written to a file.  The default is <emphasis
  role="strong"><varname>custom:*load-compiling*</varname></emphasis>,
  which is initially &nil;.
</simpara></listitem></varlistentry></variablelist>

<para>The variable <emphasis
 role="strong"><varname>custom:*load-paths*</varname></emphasis> contains
 a list of directories where program files are searched - additionally
 to the specified or current directory - by &load;, &require;,
 &compile-file;.</para>

</section>

<section id="features"><title><ulink
  url="&clhs;/Body/var_stfeaturesst.html"><varname>*features*</varname></ulink>
  </title>

<para>The variable &features-var; initially contains the symbols
<segmentedlist>
 <segtitle>keyword</segtitle><segtitle>meaning</segtitle>
<seglistitem><seg><constant>:CLISP</constant></seg>
   <seg>the name of this implementation</seg></seglistitem>
<seglistitem><seg><constant>:ANSI-CL</constant></seg>
   <seg>if invoked with the <ulink url="clisp.html#Option
   -a"><option>-a</option></ulink> <ulink url="clisp.html">command line
   option.</ulink></seg></seglistitem>
<seglistitem><seg><constant>:COMMON-LISP</constant></seg>
  <seg/></seglistitem>
<seglistitem><seg><constant>:CLTL2</constant></seg>
  <seg/></seglistitem>
<seglistitem><seg><constant>:INTERPRETER</constant></seg>
  <seg/></seglistitem>
<seglistitem><seg><constant>:COMPILER</constant></seg>
  <seg/></seglistitem>
<!-- #ifdef LOGICAL_PATHNAMES -->
<seglistitem><seg><constant>:LOGICAL-PATHNAMES</constant></seg>
  <seg/></seglistitem>
<!-- #endif -->
<!-- #ifdef DYNAMIC_FFI -->
<seglistitem><seg><constant>:FFI</constant></seg>
   <seg>if a foreign function interface is supported <emphasis>(Platform
     dependent: many &unix;, &win32; platforms only)</emphasis>
    </seg></seglistitem>
<!-- #endif -->
<!-- #ifdef GNU_GETTEXT -->
<seglistitem><seg><constant>:GETTEXT</constant></seg>
   <seg>if internationalization using the &gnu; gettext package is
     supported <emphasis>(Platform dependent: most &unix; platforms
     only)</emphasis></seg></seglistitem>
<!-- #endif -->
<!-- #ifdef UNICODE -->
<seglistitem><seg><constant>:UNICODE</constant></seg>
   <seg>if Unicode (ISO 10646) characters are supported</seg></seglistitem>
<!-- #endif -->
<seglistitem><seg><constant>:LOOP</constant></seg><seg/></seglistitem>
<seglistitem><seg><constant>:CLOS</constant></seg><seg/></seglistitem>
<seglistitem><seg><constant>:AMIGA</constant></seg>
   <seg>if <replaceable>hardware</replaceable> = Amiga and
     <replaceable>operating system</replaceable> =
     Exec/AmigaDOS</seg></seglistitem>
<seglistitem><seg><constant>:DOS</constant></seg>
   <seg>if <replaceable>hardware</replaceable> = PC (clone) and
     <replaceable>operating system</replaceable> =
     DOS</seg></seglistitem>
<seglistitem><seg><constant>:OS/2</constant></seg>
   <seg>if <replaceable>hardware</replaceable> = PC (clone) and
     <replaceable>operating system</replaceable> =
     OS/2</seg></seglistitem>
<seglistitem><seg><constant>:WIN32</constant></seg>
   <seg>if <replaceable>hardware</replaceable> = PC (clone) and
     <replaceable>operating system</replaceable> = Win32 (Windows
     95/98/NT)</seg></seglistitem>
<seglistitem><seg><constant>:PC386</constant></seg>
   <seg>if <replaceable>hardware</replaceable> = PC (clone) with a
   386/486/586/686 CPU</seg></seglistitem>
<seglistitem><seg><constant>:UNIX</constant></seg>
   <seg>if <replaceable>operating system</replaceable> = Unix
     (yes, in this case the hardware is irrelevant!)</seg></seglistitem>
</segmentedlist></para>

</section>
</section>
</chapter>


<chapter id="environment"><title><ulink url="&clhs;/Body/chap-25.html">
    Chapter 25: Environment</ulink></title>

<section id="debugger"><title><ulink url="&clhs;/Body/sec_25-1-2.html">
    25.1.2 Debugging Utilities</ulink></title>

<para>The debugger may be invoked through the functions
 &invoke-debugger;, &break;, &signal;, &error;, &cerror;, &warn;. The
 stepper is invoked through the macro &step; .  Debugger and stepper
 execute subordinate &repl; (called "break loops") which are similar to
 the main &repl; except for the prompt and the set of available
 commands.  Commands must be typed literally, without surrounding quotes
 or white space.  Each command has a keyword abbreviation, indicated in
 the second column.</para>

<segmentedlist><title>Commands common to the main loop, the debugger and
 the stepper</title>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
 <seglistitem><seg><command>Help</command></seg>
   <seg><command>:h</command></seg>
   <seg>prints a list of available commands</seg></seglistitem>
</segmentedlist>

<segmentedlist><title>Commands common to the debugger and the
 stepper</title>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
 <seglistitem><seg><command>Abort</command></seg>
   <seg><command>:a</command></seg>
   <seg>abort to the next most recent &repl;</seg></seglistitem>
 <seglistitem><seg><command>Unwind</command></seg>
   <seg><command>:uw</command></seg>
   <seg>abort to the next most recent &repl;</seg></seglistitem>
</segmentedlist>

<para>The stack is organized into frames and other stack elements.
 Usually every invocation of an interpreted function and every
 evaluation of an interpreted form corresponds to one stack frame.
 Special forms such as &let;, &let-star;, &unwind-protect; and &catch;
 produce special kinds of stack frames.</para>

<para>In a break loop there is a current stack frame, which is initially
 the most recent stack frame but can be moved using the debugger commands
 <command>Up</command> and <command>Down</command>.</para>

<para>Evaluation of forms in a break loop occurs in the lexical environment
 of the current stack frame but in the dynamic environment of the
 debugger's caller.  This means that to inspect or modify a lexical
 variable all you have to do is to move to the current stack frame just
 below the frame that corresponds to the form or the function call that
 binds that variable.</para>

<para>There is a current "stack mode" which defines in how much
 detail the stack is shown by the stack related debugger commands.</para>

<segmentedlist><title>Commands common to the debugger and the
 stepper</title>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
 <seglistitem><seg><command>Error</command></seg>
   <seg><command>:e</command></seg>
   <seg>print the last error message.</seg></seglistitem>
 <seglistitem><seg><command>Mode-1</command></seg>
   <seg><command>:m1</command></seg>
   <seg>sets the current mode to 1: all the stack elements are
         considered.  This mode is fine for debugging compiled
         functions.</seg></seglistitem>
 <seglistitem><seg><command>Mode-2</command></seg>
   <seg><command>:m2</command></seg>
   <seg>sets the current mode to 2: all the frames are considered.
     </seg></seglistitem>
 <seglistitem><seg><command>Mode-3</command></seg>
   <seg><command>:m3</command></seg>
   <seg>sets the current mode to 3: only lexical frames (frames that
         correspond to special forms that modify the lexical environment)
         are considered.</seg></seglistitem>
 <seglistitem><seg><command>Mode-4</command></seg>
   <seg><command>:m4</command></seg>
   <seg>sets the current mode to 4 (the default): only &eval;
         and &apply; frames are considered. Every evaluation
         of a form in the interpreter corresponds to an EVAL frame.
     </seg></seglistitem>
 <seglistitem><seg><command>Mode-5</command></seg>
   <seg><command>:m5</command></seg>
   <seg>sets the current mode to 5: only &apply; frames are
         considered. Every invocation of an interpreted function
         corresponds to one &apply; frame.</seg></seglistitem>
 <seglistitem><seg><command>Where</command></seg>
   <seg><command>:w</command></seg>
   <seg>shows the current stack frame.</seg></seglistitem>
 <seglistitem><seg><command>Up</command></seg>
   <seg><command>:u</command></seg>
   <seg>goes up one frame, i.e., to the caller if in mode-5
    </seg></seglistitem>
 <seglistitem><seg><command>Down</command></seg>
   <seg><command>:d</command></seg>
   <seg>does down one frame, i.e., to the callee if in mode-5
    </seg></seglistitem>
 <seglistitem><seg><command>Top</command></seg>
   <seg><command>:t</command></seg>
   <seg>goes to top frame, i.e., to the top-level form if in mode-4
    </seg></seglistitem>
 <seglistitem><seg><command>Bottom</command></seg>
   <seg><command>:b</command></seg>
   <seg>goes to bottom (most recent) frame, i.e., most probably to the
         form or function that caused the debugger to be entered.
    </seg></seglistitem>
 <seglistitem><seg><command>Backtrace</command></seg>
   <seg><command>:bt</command></seg>
   <seg>lists the stack in current mode, bottom frame first, top frame
     last.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-1</command></seg>
   <seg><command>:bt1</command></seg>
   <seg>lists the stack in mode 1.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-2</command></seg>
   <seg><command>:bt2</command></seg>
   <seg>lists the stack in mode 2.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-3</command></seg>
   <seg><command>:bt3</command></seg>
   <seg>lists the stack in mode 3.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-4</command></seg>
   <seg><command>:bt4</command></seg>
   <seg>lists the stack in mode 4.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-5</command></seg>
   <seg><command>:bt5</command></seg>
   <seg>lists the stack in mode 5.</seg></seglistitem>
 <seglistitem><seg><command>Frame-limit</command></seg>
   <seg><command>:fl</command></seg>
   <seg>set the frame-limit: this many frames will be printed in a
     backtrace at most.</seg></seglistitem>
 <seglistitem><seg><command>Backtrace-l</command></seg>
   <seg><command>:bl</command></seg>
   <seg>limit of frames to print will be prompted for.</seg></seglistitem>
</segmentedlist>

<para>If the current stack frame is an &eval; or &apply; frame, the
  following commands are available as well:</para>

<segmentedlist>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
<seglistitem><seg><command>Break+</command></seg>
   <seg><command>:br+</command></seg>
   <seg>sets a breakpoint in the current frame.  When the corresponding
     form or function will be left, the debugger will be entered again,
     with the variable <link
     linkend="trace-val"><varname>*trace-values*</varname></link>
     containing a list of its values.</seg></seglistitem>
<seglistitem><seg><command>Break-</command></seg>
   <seg><command>:br-</command></seg>
   <seg>removes a breakpoint from the current frame.</seg></seglistitem>
<seglistitem><seg><command>Redo</command></seg>
   <seg><command>:rd</command></seg>
   <seg>re-evaluates the corresponding form or function call. This
     command can be used to restart parts of a computation without
     aborting it entirely.</seg></seglistitem>
<seglistitem><seg><command>Return</command></seg>
   <seg><command>:rt</command></seg>
   <seg>leaves the current frame.  You will be prompted for the return
     values.</seg></seglistitem>
</segmentedlist>

<segmentedlist><title>Commands specific to the debugger</title>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
<seglistitem><seg><command>Continue</command></seg>
   <seg><command>:c</command></seg>
   <seg>continues evaluation of the program.</seg></seglistitem>
</segmentedlist>

<segmentedlist><title>Commands specific to the stepper</title>
  <segtitle>command</segtitle><segtitle>abbreviation</segtitle>
  <segtitle>operation</segtitle>
<seglistitem><seg><command>Step</command></seg>
   <seg><command>:s</command></seg>
   <seg>step into a form: evaluate this form in single step mode
   </seg></seglistitem>
<seglistitem><seg><command>Next</command></seg>
   <seg><command>:n</command></seg>
   <seg>step over a form: evaluate this form at once
   </seg></seglistitem>
<seglistitem><seg><command>Over</command></seg>
   <seg><command>:o</command></seg>
   <seg>step over this level: evaluate at once up to the next return
   </seg></seglistitem>
<seglistitem><seg><command>Continue</command></seg>
   <seg><command>:c</command></seg>
   <seg>switch off single step mode, continue evaluation
   </seg></seglistitem>
</segmentedlist>

<para>The stepper is usually used like this: If some form returns a
 strange value or results in an error, call <literal role="sexp">(&step;
 <replaceable>form</replaceable>)</literal> and navigate using the
 commands <command>Step</command> and <command>Next</command> until you
 reach the form you regard as responsible.  If you are too fast (execute
 <command>Next</command> once and get the error), there is no way back;
 you have to restart the entire stepper session.  If you are too slow
 (stepped into a function or a form which certainly is OK), a couple of
 <command>Next</command> commands or one <command>Over</command> command
 will help.</para>

</section>

<section><title><ulink url="&clhs;/Body/sec_the_envir_t_dictionary.html">
    25.2 The Environment Dictionary</ulink></title>

<!-- #ifdef HAVE_DISASSEMBLER -->

<section><title>&disassemble;</title>

<variablelist>
<varlistentry><term>Platform dependent: &unix; platforms only.</term>
<listitem><simpara>&disassemble; can disassemble to machine code,
 provided that &gnu; gdb is present.  In that case the argument may be a
 <classname>system-function</classname>, a
 <classname>foreign-function</classname>, a special operator indicator,
 a symbol denoting one of these, a number, or a string.
 </simpara></listitem></varlistentry>
</variablelist>
</section>

<!-- #endif -->

<section><title>ext:uncompile</title>

<para>The function <emphasis
 role="strong"><function>ext:uncompile</function></emphasis> does the
 converse of &compile;: <literal
 role="sexp">(<function>ext:uncompile</function>
 <replaceable>function-name</replaceable>)</literal> reverts an
 interpreted function that has been entered or loaded in the same
 session and then compiled back to its interpreted form.</para>

</section>

<section><title>&documentation;</title>

<para>No on-line documentation is available for the system functions
 (yet).  &documentation; still has the CLtL1 implementation.</para>

<formalpara id="browser"><title><function>ext:clhs</function></title>
<para>&hyperspec; access is provided via <literal
  role="sexp">(<function>ext:clhs</function>
  <replaceable>symbol</replaceable> &key-amp;
  <replaceable>browser</replaceable>)</literal> function which uses
  your web browser.  <replaceable>browser</replaceable> should be a
  valid keyword in the <varname>custom:*browsers*</varname> alist.
</para></formalpara>

</section>

<section><title>&trace;</title>

<para><literal role="sexp">(&trace; <replaceable>fun</replaceable>
 ...)</literal> makes the functions <replaceable>fun</replaceable>,
 ... traced.  <replaceable>fun</replaceable> should be either a symbol
 or a list <literal role="sexp">(<replaceable>symbol</replaceable>
 &key-amp; <constant>:suppress-if</constant> <constant>:step-if</constant>
 <constant>:pre</constant> <constant>:post</constant>
 <constant>:pre-break-if</constant> <constant>:post-break-if</constant>
 <constant>:pre-print</constant> <constant>:post-print</constant>
 &print-k;)</literal>, where</para>

<variablelist>
 <varlistentry><term><constant>:suppress-if</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>no trace output as long as
   <replaceable>form</replaceable> is true</simpara></listitem></varlistentry>
 <varlistentry><term><constant>:step-if</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>invokes the stepper as soon as
   <replaceable>form</replaceable> is true</simpara></listitem></varlistentry>
 <varlistentry><term><constant>:pre</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>evaluates <replaceable>form</replaceable> before
   calling the function </simpara></listitem></varlistentry>
 <varlistentry><term><constant>:post</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>evaluates <replaceable>form</replaceable> after
   return from the function </simpara></listitem></varlistentry>
 <varlistentry><term><constant>:pre-break-if</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>goes into the break loop before calling the
   function if <replaceable>form</replaceable> is true
   </simpara></listitem></varlistentry>
 <varlistentry><term><constant>:post-break-if</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>goes into the break loop after return from the
   function if <replaceable>form</replaceable> is true
   </simpara></listitem></varlistentry>
 <varlistentry><term><constant>:pre-print</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>prints the values of
   <replaceable>form</replaceable> before calling the function
   </simpara></listitem></varlistentry>
 <varlistentry><term><constant>:post-print</constant>
   <replaceable>form</replaceable></term>
  <listitem><simpara>prints the values of
   <replaceable>form</replaceable> after return from the function
   </simpara></listitem></varlistentry>
 <varlistentry><term>&print-k; <replaceable>form</replaceable></term>
  <listitem><simpara>prints the values of
   <replaceable>form</replaceable> both before calling and after return
   from the function</simpara></listitem></varlistentry>
</variablelist>

<para>In all these forms you can access the following variables:
<variablelist>
 <varlistentry><term><varname>ext:*trace-function*</varname></term>
  <listitem><simpara>the function itself
  </simpara></listitem></varlistentry>
 <varlistentry><term><varname>ext:*trace-args*</varname></term>
  <listitem><simpara>the arguments to the function
  </simpara></listitem></varlistentry>
 <varlistentry><term><varname>ext:*trace-form*</varname></term>
  <listitem><simpara>the function/macro call as form
  </simpara></listitem></varlistentry>
 <varlistentry id="trace-val">
    <term><varname>ext:*trace-values*</varname></term>
  <listitem><simpara>after return from the function: the list of return
  values from the function call
  </simpara></listitem></varlistentry>
</variablelist>
and you can leave the function call with specified values by using
&return;.</para>

<para>&trace; and &untrace; are also applicable to functions <literal
 role="sexp">(&setf; <replaceable>symbol</replaceable>)</literal> and to
 macros, but not to locally defined functions and macros.</para>

</section>

<section><title>&inspect;</title>

<para>The function &inspect; takes a keyword argument
 <constant>:frontend</constant>, which specifies the way &clisp; will
 interact with the user.</para>

<variablelist><title>Available <constant>:frontend</constant>s for
   &inspect; in &clisp;</title>
 <varlistentry><term><constant>:tty</constant></term>
  <listitem><simpara>The interaction is conducted via the &terminal-io-var;
   stream.  Please use the <userinput>:h</userinput> command to get the
   list of all available commands.</simpara></listitem></varlistentry>
 <varlistentry><term><constant>:http</constant></term>
  <listitem><simpara>A window in your Web browser (specified by the
   &browser; keyword argument) is opened and it is controlled by
   &clisp; via a &socket-stream;, using the HTTP protocol.  You should be
   able to use all the standard browser features.</simpara>
   <simpara>Since &clisp; is not multitasking at this time, you will not
   be able to do anything else during an &inspect; session.  Please click on
   the <userinput>quit</userinput> link to terminate the session.</simpara>
   <simpara>Please be aware though, that once you terminate an &inspect;
   session, all links in all &inspect; windows in your browser will become
   obsolete and using them in a new &inspect; session will result in
   unpredictable behavior.</simpara></listitem></varlistentry>
</variablelist>
</section>

<section id="space"><title>ext:space</title>

<para>The macro <emphasis
 role="strong"><function>ext:space</function></emphasis> is like the
 macro &time;: <literal role="sexp">(<function>ext:space</function>
 <replaceable>form</replaceable>)</literal> evaluates the
 <replaceable>form</replaceable>, and, as a side effect, outputs
 information about the memory allocations caused by this evaluation.  It
 also prints everything printed by <link
 linkend="time"><function>time</function></link>.</para>

</section>

<section id="gc"><title>&room;</title>

<para>The function &room; returns two values: the number of bytes
 currently occupied by Lisp objects, and the number of bytes that can be
 allocated before the next regular &gc;ion occurs.</para>

<para>The function <emphasis
 role="strong"><function>ext:gc</function></emphasis> starts a
 global &gc;ion and its return value has the same meaning as the
 second value of &room;.</para>

</section>

<section id="time"><title>&time;</title>

<para>The timing data printed by the macro &time; includes: The real
 time (elapsed time), the run time (processor time for this process),
 the number of bytes allocated (use the <link
 linkend="space"><function>ext:space</function></link> macro for more
 detailed analysis), and the number of GCs performed, if any.</para>

</section>

<section><title>&ed;</title>

<para>The function &ed; calls the external editor specified by the
 variable <emphasis
 role="strong"><varname>custom:*editor*</varname></emphasis> (see
 &config-file;).  If the argument is a function name which was defined
 in the current session (not loaded from a file), the program text to be
 edited is a pretty-printed version (without comments) of the text which
 was used to define the function.</para>

</section>

<section><title>clock time</title>

<!-- #if !(defined(UNIX) || defined(WIN32)) -->
<variablelist>
<varlistentry><term>Platform dependent: &amiga;, &acorn;, &dos;, &os2;
   platforms only.</term>
 <listitem><simpara>The variable <emphasis
   role="strong"><varname>custom:*default-time-zone*</varname></emphasis>
   contains the default time zone used by &encode-universal-time; and
   &decode-universal-time;.  It is initially set to -1 (which
   means 1 hour east of Greenwich, i.e., Mid European Time).
   </simpara></listitem></varlistentry>
</variablelist>
<!-- #endif -->

<para>The timezone in a decoded time must not necessarily be an integer,
 but (as float or rational number) it should be a multiple of
 <literal>1/3600</literal>.</para>

<segmentedlist><title>Platform dependent</title>
 <segtitle>platform</segtitle><segtitle>&acorn;, &dos;, &os2;</segtitle>
 <segtitle>&amiga;</segtitle><segtitle>&unix;</segtitle>
 <segtitle>&win32;</segtitle>
 <seglistitem><seg>&internal-time-units-per-second;</seg><seg>100</seg>
  <seg>50</seg><seg>1,000,000</seg><seg>10,000,000</seg></seglistitem>
</segmentedlist>

<para>&get-internal-run-time; returns the amount of run time
 consumed by the current &clisp; process since its startup.</para>

</section>

<section><title>machine</title>
<variablelist>
<!-- #ifdef MACHINE_KNOWN -->
<varlistentry><term>Platform dependent: &unix;, &win32; platforms only.</term>
 <listitem><simpara>The functions &short-site-name;, &long-site-name;
  should be defined in a site-specific &config-file; file.
  </simpara></listitem></varlistentry>
<!-- #else -->
 <varlistentry><term>Platform dependent: &amiga;, &acorn;, &dos;, &os2;
    platforms only.</term>
 <listitem><simpara>The functions &machine-type;, &machine-version;,
  &machine-instance; and &short-site-name;, &long-site-name; should be
  defined by every user in his site-specific &config-file; file.
  </simpara></listitem></varlistentry>
<!-- #endif -->
</variablelist>

</section>

<section><title>&apropos;, &apropos-list;</title>

<para>The search performed by &apropos; and &apropos-list; is
 case-insensitive.</para>

</section>

<section><title>&dribble;</title>

<para>If &dribble; is called with an argument, and dribbling is already
 enabled, a warning is printed, and the new dribbling request is
 ignored.</para>

</section>

<section><title>&lisp-implementation-version;</title>

<para>&lisp-implementation-version; returns
 the numeric version (like <literal>3.14</literal>), and
 the release date (like <literal>"1999-07-21"</literal>).
 When running on the same machine on which &clisp; was built, it appends
  the binary build and memory image dump date in universal time
  (like <literal>3141592654</literal>).
 When running on a different machine, it appends the &machine-instance;
  of the machine on which it was built.</para>
</section>

</section>
</chapter>


<chapter id="glossary"><title><ulink url="&clhs;/Body/chap-26.html">
    Chapter 26: Glossary</ulink></title>

<para>No notes.</para>

</chapter>

<chapter id="appendix"><title><ulink url="&clhs;/Body/chap-a.html">
    Appendix</ulink></title>

<para>No notes.</para>

</chapter>
