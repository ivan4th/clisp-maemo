This file presents
* a list of platforms CLISP is known to run on,
* special hints for the following platforms:
    386BSD 0.1
    NetBSD 1.0
    NetBSD 1.1
    FreeBSD 2.1
    BSDI 1.0
    PC 386 under GNU 0.2
    Sun4 (Sparc) under Linux
    Sun4 (Sparc) under SunOS 4
    Sun3 (68020) under SunOS 4
    Sun4 (Sparc) under SunOS 5.2 or SunOS 5.3
    PC 386 under SunOS 5.4
    HP9000/8xx under HP-UX version 8, 9, 10
    HP9000/3xx under HP-UX version 8
    Consensys System V 4.0
    Consensys System V 4.2
    386 UHC UNIX System V release 4
    Onsite System V 4.2
    UnixWare
    SINIX-N 5.42
    SINIX-N 5.43
    IRIX 3.2.1
    IRIX 4
    IRIX 5
    IRIX 6.2
    IRIX 6.3
    DECstation 5000, Ultrix
    Apple Macintosh, A/UX
    Amiga running AMIX 2.1 SVR4.0
    Amiga running NetBSD 1.2
    NeXT running NeXTstep 3.3
    AIX
    Sequent PTX 2, PTX 4
    SCO
    Convex C2 running ConvexOS 10.1
    Atari ST/TT running MiNT
    DEC Alpha AXP running OSF/1 1.3 or OSF/1 2.0 or OSF/1 3.0
    DEC Alpha AXP running OSF/1 3.2
    DEC Alpha AXP running OSF/1 4.0b
* hints for porting to new platforms.


List of platforms
-----------------

The Unix version of CLISP is known to run on a variety of machines
and operating systems. The following is a list of successful compiles,
in the format


hardware              OS             compiled by
date                  test-time      email address

(Test-time is the time needed for "make test". Measure user time.)


PC 486/33, 8 MB RAM   Linux 0.98     Bruno Haible
17.11.1992                  415 s    <haible@ma2s2.mathematik.uni-karlsruhe.de>
14.12.1992                  418 s
31.12.1992 (gcc233)         384 s
31.12.1992 (gcc233)         377 s
2.1.1993  (gcc233,shm)      359 s
2.1.1993  (gcc233,shm)      363 s
5.1.1993  (gcc233,486)      367 s
15.1.1993 (gcc233,486,shm)  356 s
15.1.1993 (gcc233,486,shm)  362 s
19.1.1993 (gcc233,486,shm)  360 s
29.1.1993 (gcc233,486)      366 s
10.2.1993 (gcc233,486,shm)  359 s
4.3.1993  (gcc233,486,shm)  351 s

PC 486/33, 8 MB RAM   Linux 0.99.7   Bruno Haible
18.3.1993 (gcc233,486,mmap) 337 s    <haible@ma2s2.mathematik.uni-karlsruhe.de>
5.5.1993  (gcc233,486,mmap) 346 s
5.6.1993  (gcc240,486,mmap) 366 s
17.7.1993 (gcc245,486,mmap) 368 s

PC 486/33, 8 MB RAM   Linux 0.99.12  Bruno Haible
22.9.1993 (gcc245,486,mmap) 464 s    <haible@ma2s2.mathematik.uni-karlsruhe.de>
4.11.1993 (gcc252,486,mmap) 453 s
1.1.1994 (gcc257,486,shm)   483 s

PC 486/33, 8 MB RAM   Linux 1.1.19   Bruno Haible
20.6.1994 (gcc257,mmap)     569 s    <haible@ma2s2.mathematik.uni-karlsruhe.de>
27.6.1994 (gcc257,mmap)     515 s
28.6.1994 (gcc257,mmap)     526 s
20.7.1994 (gcc260,mmap)     565 s
27.8.1994 (gcc260,mmap)     582 s

PC 486/33, 8 MB RAM   Linux 1.1.51   Bruno Haible
27.9.1994 (gcc260,gengc)    569 s
12.1.1995 (gcc263,shm,immutable,gengc) on Linux 1.1.80
                            628 s user + 1914 s system
14.1.1995 (gcc263,shm,immutable,gengc) on Linux 1.1.83
                            618 s user + 135 s system
17.1.1995 (gcc263,shm,immutable,gengc,minimal) on Linux 1.1.83
                            625 s user + 38 s system

PC 486/33, 8 MB RAM   Linux 1.2.2    Bruno Haible
4.4.1995 (gcc263,gengc)     578 s user + 42 s system
4.4.1995 (gcc263,gengc,imm) 613 s user + 34 s system
23.6.1995 (gcc263,gengc)    633 s user + 38 s system
23.6.1995 (gcc270,gengc)    615 s user + 37 s system

PC 486/33, 8 MB RAM   Linux 2.0.6    Bruno Haible
21.7.1996 (gcc270,gengc)    727 s user + 26 s system
8.8.1996 (g++270,gengc)     735 s user + 25 s system

PC 486/33, 16 MB RAM  Linux 2.0.29   Bruno Haible
29.6.1997 (gcc272,gengc)    797 s user + 32 s system
29.6.1997 (dito,STACK=ebx)  691 s user + 28 s system
14.7.1997 (SELFMADE_MMAP)   711 s user + 32 s system
14.7.1997 (HAVE_MMAP)       692 s user + 29 s system
6.8.1997                    652 s user + 29 s system
7.9.1997 (aout)             623 s user + 24 s system
7.9.1997 (aout)             614 s user + 25 s system
7.9.1997 (elf)              657 s user + 25 s system

PC 486/33, 16 MB RAM  Linux 2.0.33   Bruno Haible
17.6.1998 (egcs103)               603 s user + 25 s system
17.6.1998 (egcs103,NO_TYPECODES)  606 s user + 29 s system

PC 486/50, 32 MB RAM  Linux 0.99.14  Marcus Daniels
25.1.1994 (gcc258,shm)      331 s    <marcus@ee.pdx.edu>
25.1.1994 (gcc258,486,shm)  319 s   

PC 586/100, 16 MB RAM Linux 1.3.79   Marcus Daniels
23.5.1996 (gcc272l3 a.out)  130 s
23.5.1996 (gcc272l3 ELF)    132 s

PC 586/100, 16 MB RAM Linux 2.0 (Debian 1.1)  Marcus Daniels
17.6.1996 (gcc272 ELF)      144 s
27.7.1996 (gcc272 ELF)      143 s

PC 586/166, 128 MB RAM Linux 2.0     Marcus Daniels
20.6.1996 (gcc272l3)        125 s    <marcus@sysc.pdx.edu>

PC 686/150, 128 MB RAM Linux 2.1.29  Marcus Daniels
13.4.1997                    86 s    <marcus@sysc.pdx.edu>

Sun 3                 SunOS 4.1.1    Bruno Haible
17.4.1993               2296 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

Sun386i               SunOS 4.0.2    Bruno Haible
13.1.1993                            <haible@ma2s2.mathematik.uni-karlsruhe.de>

Sun 4/70 (Sparc 2)    SunOS 4.1.1    Bruno Haible
19.11.1992 (gcc23)       291 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
22.12.1992 (gcc23)       298 s
28.12.1992 (gcc23)       291 s
1.1.1993   (cc)          424 s
1.2.1993   (gcc23)       268 s
4.2.1993   (gcc23)       276 s
28.3.1993  (gcc23)       276 s
11.5.1993  (gcc23)       274 s
2.11.1993  (cc -O0)      600 s
2.11.1993  (cc -O1)      493 s
3.11.1993  (cc -O2)      649 s
3.11.1993  (cc -O3)      614 s
3.11.1993  (cc)          582 s
14.1.1994  (cc)          632 s
21.7.1994  (gcc260,wide) 754 s

Sun 4/75 (Sparc 2)    SunOS 4.1.3    Marcus Daniels
25.1.1994 (gcc233)       492 s       <marcus@ee.pdx.edu>
1.3.1996 (gcc258)        553 s
22.3.1996 (gcc272)       561 s
23.5.1996 (gcc272)       562 s
17.6.1996 (gcc272)       572 s
20.6.1996 (gcc272)       573 s
28.7.1996 (gcc272)       585 s

Sun 4c (Sparc 1)      SunOS 4.1.2    Martin Sjölin
16.12.1992               679 s       <marsj@ida.liu.se>

Sun 4m (Sparc 10)     SunOS 4.1.3    Bruno Haible
16.1.1993 (gcc233)       208 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
17.1.1993 (gcc233,shm)   203 s
20.1.1993 (gcc233,shm)   186 s
26.6.1994 (gcc)          307 s

Sun 4/75 (Sparc 2)    SunOS 4.1.3_U1 Bruno Haible
8.12.1995 (gcc270)       503 s       <haible@ilog.fr>

Sun 4m (Sun 4/600)    SunOS 4.1.3    Marcus Daniels
25.1.1994 (gcc233,shm)   453 s       <marcus@ee.pdx.edu>

Sun 4m (Sparc 10)     SunOS 5.1 (Solaris 2)
21.3.1993                387 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
7.9.1993                 500 s

Sun 4m (Sparc 10)     SunOS 5.3      Bruno Haible
4.7.1994 (gcc245)        587 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

Sun 4m (Sparc 20)     SunOS 5.4 (Solaris 2.4)   Bruno Haible
CPU TI,TMS390Z55, 64 MB RAM                     <haible@ilog.fr>
5.8.1995 (SUNWspro 3.0.1)  225 s
8.12.1995 (gcc270)         148 s

Sun 4m                SunOS 5.4 (Solaris 2.4)   Marcus Daniels
12.8.1995 (gcc263)         259 s     <marcus@sysc.pdx.edu>

Sun 4m (Sparc 20)     SunOS 5.4 (Solaris 2.4)   Marcus Daniels
1.3.1996 (gcc272)          177 s
12.3.1996 (gcc263)         181 s
20.3.1996 (gcc263)         173 s
21.3.1996 (gcc272l3)       167 s
22.3.1996 (gcc272l3)       177 s
30.3.1996 (gcc272l3)       169 s
2.5.1996 (gcc272l3)        172 s
23.5.1996 (gcc272l3)       170 s
17.6.1996 (gcc272l3)       171 s
20.6.1996 (gcc272l3)       169 s

Sun 4m (Sparc 10)     SunOS 5.5.1    Marcus Daniels
27.7.1996 (gcc272l3)     278 s       <marcus@sysc.pdx.edu>
28.7.1996 (gcc272l3)     291 s

Sun 4u (UltraSparc1)  SunOS 5.5.1    Marcus Daniels
13.4.1997                 86 s       <marcus@sysc.pdx.edu>

Sun 4d                SunOS 5.[23]   Adam M. Costello
2.12.1993 (gcc245)       313 s       <amc@ecl.wustl.edu>

Sun 4m (2 cpus)       SunOS 5.3      Alva L. Couch
23.2.1994 (gcc258)       203 s       <couch@cs.tufts.edu>

PC 486/33, 32 MB RAM  SunOS 5.4      Marty Shannon
1.5.1995 (gcc263,noasm)  669 s       <mshannon@i-2000.com>

PC 586/200            SunOS 5.5.1    Marty Shannon
15.4.1997                137 s       <mshannon@i-2000.com>

i386                  Consensys 4.0  Bruno Haible
18.12.1992             --- (*)       <haible@ma2s2.mathematik.uni-karlsruhe.de>
7.9.1993               --- (*)

PC 486/33, 32 MB RAM  Consensys 4.2  Jean-Claude Beaudoin
21.9.1993                            <jbeaudoi@sobeco.com>

HP 9000/825           HP-UX 8        Bruno Haible
27.6.1994               2498 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

HP 9000/835           HP-UX 8        Bruno Haible
27.6.1994               1203 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

HP 9000/720           HP-UX 8.05     Bruno Haible
1.1.1993                 309 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
27.6.1994                335 s
4.7.1994                 360 s

PC 486/33, 8 MB RAM   Coherent 4.0.1 Bruno Haible
16.5.1993 (cc)           470 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
16.5.1993 (gcc140)       413 s

PC 386/33, 16MB RAM   UHC UNIX SysV.4   Blake McBride
20.3.1993 (UHC_1)       1125 s          <blake@netcom.com>
20.3.1993 (UHC_2)       1182 s

PC 486/33, 16 MB RAM  SINIX-Z V5.41  Manfred Weichel
29.7.1993 (gcc245)       383 s       <manfred.weichel@mch.sni.de>
11.7.1994 (gcc258)

PC                    386BSD 0.1     Charles Hannum
26.3.1993                            <mycroft@gnu.ai.mit.edu>

PC 486/33, 8 MB RAM   NetBSD 1.0 Beta   Douglas Crosher
30.8.1994 (gcc245)          582 s       <dtc@stan.xx.swin.oz.au>
30.8.1994 (gcc245,mmap)     522 s       <dtc@scrooge.ee.swin.oz.au>
30.8.1994 (gcc245,shm)      488 s
2.9.1994  (gcc245,gengc)    502 s

DECstation 5000       Ultrix V4.2A   Benlu Jiang
5.5.1993                             <manager@csdeca.cs.missouri.edu>

DECstation 5000       Ultrix V4.4    Bruno Haible
20.12.1995               759 s       <haible@ilog.fr>

SGI Mips              IRIX 4         Michael Stoll
11.6.1993                315 s       <michael@rhein.iam.uni-bonn.de>

SGI Mips              IRIX 5         Christian Moen
31.12.1993 (gcc)                     <christim@ifi.uio.no>

SGI Mips              IRIX 5         Martin Cracauer
28.9.1994 (cc)                       <cracauer@wavehh.hanse.de>

SGI Mips, 64 MB RAM   IRIX 5.2       Dorin Ungureanu
134 MHz, CPU R4600, FPU R4610        <Dorin.Ungureanu@esat.kuleuven.ac.be>
8.4.1995 (gcc)

SGI Mips (Indy)       IRIX 5.2       Marcus Daniels
134 MHZ IP22 Processor               <marcus@sysc.pdx.edu>
12.8.1995 (gcc270)       250 s

SGI Mips              IRIX 5.3       Bruno Haible
8.12.1995 (cc)           232 s       <haible@ilog.fr>

SGI Mips (Indy)       IRIX 5.3       Marcus Daniels
100 MHZ IP22 Processor               <marcus@sysc.pdx.edu>
12.8.1995 (gcc270)       435 s
1.4.1996 (gcc272)        427 s

SGI Mips (Indy)       IRIX 5.3       Marcus Daniels
134 MHZ IP22 Processor               <marcus@sysc.pdx.edu>
19.2.1996 (gcc272)       241 s
1.3.1996 (gcc272)        253 s
12.3.1996 (gcc272)       250 s
20.3.1996 (gcc272)       248 s
30.3.1996 (gcc272)       249 s
1.4.1996 (gcc272f1)      248 s
23.5.1996 (gcc272f1)     253 s
17.6.1996 (gcc272f1)     260 s
20.6.1996 (gcc272f1)     257 s
27.7.1996 (gcc272f1)     266 s
28.7.1996 (gcc272f1)     259 s

SGI Mips              IRIX 6.2       Bruno Haible
5.6.1997 (cc 7.0)                    <haible@ilog.fr>

SGI Mips              IRIX64 6.2     Bruno Haible
9.8.1996 (CC -O)         289 s       <haible@ilog.fr>

SGI Mips              IRIX64         Boris
10.5.1997 (gcc2722)                  <boris@cs.caltech.edu>

RM400 Mips            SINIX-N V5.42  Michael Becker
8.12.1994 (c89)                      <mb12@coconet.de>

RM Mips               SINIX-N V5.43  Bruno Haible
2.5.1997 (cc)                        <haible@ilog.fr>

IBM Risc System 6000  AIX 3.2        Gabor Herr
22.9.1993                            <herr@iti.informatik.th-darmstadt.de>

DEC Alpha AXP         OSF/1 1.3      Bruno Haible
3.12.1993                141 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>
8.1.1994 (gcc257)        145 s

DEC Alpha AXP         OSF/1 2.0      Bruno Haible
2.8.1994 (gcc258)        159 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

DEC Alpha EV5         Linux 2.0.33   Bruno Haible
7.5.1998 (gcc2723)        48 s       <haible@ilog.fr>

PC 486/50, 16 MB RAM  Onsite SysV R 4.2   Sebastian Feldmann
30.10.1993 (cc)          429 s            <snfeldma@teebox.franken.de>
7.11.1993 (gcc233)       348 s
7.11.1993 (gcc245)       345 s

Amiga 3000            AMIX 2.1 SysVR4.0   Michel Loi
22.12.1993 (gcc255)                       <Michel.Loi@lip.ens-lyon.fr>

NeXT                  NeXTstep 3.1   Marcus Daniels
30.10.1993 (cc)                      <marcus@ee.pdx.edu>

NeXT (68040/25)       NeXTstep 3.2   Marcus Daniels
18.1.1994                751 s       <marcus@ee.pdx.edu>
(cc=gcc222)
18.1.1994                627 s
(cc=gcc-222+Mach-VM-singlemap)

PC 486DX2-66, 24 MB RAM  NeXTstep 3.2     Michael Stoll
5.7.1994 (cc)            359 s            <michael@rhein.iam.uni-bonn.de>
20.4.1995 (cc)           355 s
24.4.1995 (gcc258)       330 s

Sequent PTX (386/16)  DYNIX/ptx V2.1.0    Marcus Daniels
(gcc233, mmap)          2232 s            <marcus@ee.pdx.edu>

Sequent PTX (586/100) DYNIX/ptx V4.1.3    Marcus Daniels
(gcc272)                 169 s            <marcus@sysc.pdx.edu>

PC                    UnixWare       Alexander Adam
24.1.1994                            <adam@is.informatik.uni-stuttgart.de>

PC (486)              SCO 3.2 v4.2   Bruno Haible
19.4.1995 (gcc263)       547 s       <haible@ma2s2.mathematik.uni-karlsruhe.de>

Data General M88000   DG/UX          Pat McClanahan
3.2.1994                 539 s       <mcclanah@dlgeo.cr.usgs.gov>

PC                    BSDI/386 1.1        Atsuo Ohki
16.5.1994                                 <ohki@gssm.otsuka.tsukuba.ac.jp>


When you install CLISP on a machine not mentioned here, please send us a short
note containing the information mentioned above. If you didn't succeed in
building CLISP, please tell us the problems: we will try to make CLISP as
portable as possible.


Special hints for some platforms:
---------------------------------


On 386BSD 0.1:

386BSD can't identify itself. Before executing makemake, you need to create a
program called "arch" that outputs "386BSD". For example:
  $ cat > /usr/bin/arch <<EOF
  #!/bin/sh
  echo 386BSD
  EOF
  $ chmod a+x /usr/bin/arch

Add -DNO_MULTIMAP_SHM -DNO_MULTIMAP_FILE to the CFLAGS in the makefile. 386BSD
declares the shared memory and memory mapping facilities (shm*, mmap too?)
in the header files, but does not implement them in the kernel.

In unixconf.h change
  #define IOCTL_REQUEST_T int  to   #define IOCTL_REQUEST_T unsigned long
  #undef IOCTL_DOTS            to   #define IOCTL_DOTS


On NetBSD 1.0:

Add -DNO_MULTIMAP_SHM -DNO_MULTIMAP_FILE to the CFLAGS in the makefile. NetBSD
has shared memory and memory mapping facilities but they don't work reliably.

In unixconf.h change
  #define IOCTL_REQUEST_T int  to   #define IOCTL_REQUEST_T unsigned long
  #undef IOCTL_DOTS            to   #define IOCTL_DOTS


On NetBSD 1.1 and FreeBSD 2.1:

Generational GC requires a kernel with an adequate amount of shared memory.
Adding the line:

options               "SHMSEG=200"

to the kernel config file will do this.  NetBSD 1.1, requires
a similar change to param.c.  Douglas Crosher <dtc@stan.xx.swin.oz.au>
provided a patch for NetBSD 1.1 and FreeBSD 2.1 so that the
address of protection faults is available to CLISP.  See:
   unix/NetBSD-1.1.diffs


On BSDI 1.0:

Add -DNO_ASM to the CFLAGS in the makefile. Otherwise the assembly code in
eval.d cannot be fed through the assembler.


On a 386 PC under GNU 0.2 (the Hurd):

Before starting the configuration, disable the "crash" server:
  $ settrans -g /servers/crash
Otherwise some of the configuration tests, which result in a SIGSEGV, cause
the entire configuration to hang (waiting for a debugger to be manually
attached).

Choose "gcc -D__USE_GNU" as compiler.

After configuring, change unixconf.h to contain the line
  #undef HAVE_GETRUSAGE

For executing "makemake", the default shell (bash-2.0) cannot be used (buggy).
Install bash-2.01 or newer.


On a Sun4 (Sparc) under Linux:

After configuring, change unixconf.h to contain the lines
  #undef HAVE_MMAP_DEVZERO
  #undef HAVE_MMAP_DEVZERO_SUN4_29
Otherwise, the poor Sparc1 will freeze up about half way through the compile
of compiler.lsp. Looks like a kernel problem.


On a Sun4 (Sparc) under SunOS 4:

The Sun cc is usable only without the optimization flag "-O". (At least spvw.d
is compiled incorrectly when -O is used.)
It is best to get and install GNU gcc. (Gcc version 2.2 or later required.)


On a Sun3 (68020) under SunOS 4:

In the makefile, I had to add -DNO_MULTIMAP_FILE -DNO_MULTIMAP_SHM to the
CFLAGS, and change
     PACK = tar
to   PACK = /usr/local/gnu/bin/gtar


On a Sun4 (Sparc) under SunOS 5.2 or SunOS 5.3:

For the readline library, you *may* have to add -D_POSIX_VERSION to the CFLAGS
in the readline/Makefile, and modify the line containing SIGNALBLOCK_POSIX
in readline/config.h. I cannot tell anything definitely correct about this.

Make sure your PATH contains the X11/bin directory. Especially xmkmf must be
found. Make sure your LD_RUN_PATH contains the X11/lib directory. Otherwise
the shared X11 libraries won't be found.
For example, you may append ":/usr/openwin/lib" to your LD_LIBRARY_PATH and
replace "-Y P,/usr/ccs/lib:/usr/lib" in the makefile by
"-Y P,/usr/ccs/lib:/usr/lib:/usr/openwin/lib". To make sure these settings are
in effect every time clisp is run, it may then be useful to add the lines
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/openwin/lib"
    export LD_LIBRARY_PATH
to the /usr/local/bin/clisp script.

Normally, clisp doesn't use shared memory on SunOS 5 because it tries to
attach more segments that the default limit (6). If you want clisp to use
shared memory, you have to increase this limit: put the line
set shminfo_shmseg=200
into /etc/system, reboot, and continue installing clisp.


On a 386 PC under SunOS 5.4 (Solaris 2.4):

Use CC="gcc". You can't use "gcc -ansi" because (at least) the <sys/signal.h>
(#included by <signal.h>) thinks "gcc -ansi" means *strict* ANSI, which
prevents the `sigaction' stuff from being made available.

If you want to use shared memory for generational garbage collection, you
may need to add the following to your /etc/system file:

forceload: sys/shmsys
set shmsys:shminfo_shmseg = 256
set shmsys:shminfo_shmmni = 256

Avoid the shared libraries in /usr/ucblib. If this directory is in your
LD_LIBRARY_PATH when you configure CLISP, not only will the build fail and
require intervention, but once it is linked, shared libraries will appear
in VM that CLISP expects to be free.


On a HP9000/8xx under HP-UX version 8, 9, 10:

If cc had no bugs:
  Choose "cc -Aa -z -D_HPUX_SOURCE" or "c89 -z -D_HPUX_SOURCE" as compiler,
  as described in paragraph 2 of the INSTALL file.
  You need the -Aa flag resp. the c89 compiler because the normal "cc" does not
  expand macros with arguments within constant expressions in preprocessor
  commands like #if.
  Without the -D_HPUX_SOURCE flag many include files are incomplete. When using
  -D_POSIX_SOURCE instead, <errno.h> fails to define ELOOP.
  The -z flag is harmless.
Alas, cc and c89 initialize string arrays declared like
    static char* table[] = { 0?"a":1?"b":"", ..., 0?"x":1?"y":"", };
with NULL pointers!
On HP-UX 10, the compilation also fails with error messages like
    "Catenated input line too long" and "Macro param too large".
So get and install GNU gcc. This works for sure.

If you get an error message "initialisation file was not created by this
version of LISP", remove the "-O2" from CFLAGS in the makefile, remove spvw.o
and continue.

The testsuite causes a failure because of ISQRT. A workaround is not known.


On a HP9000/3xx under HP-UX version 8:

If you are using GNU gcc 2.4.5 with the HP-UX assembler, in the makefile add
-DHPUX_ASSEMBLER -DNO_ASM to the CFLAGS and remove -fomit-frame-pointer from
the CFLAGS. This way the best optimizations are disabled, but otherwise you
are risking core dumps.


On Consensys System V 4.0:

Choose "cc -I/usr/include" as compiler, as described in paragraph 2 of the
INSTALL file.
Otherwise /usr/ucbinclude/sys/sysmacros.h will be included instead of
/usr/include/sys/sysmacros.h, and this lacks the definition of ctob().

Add -DNO_MULTIMAP_SHM to the CFLAGS in the makefile. The shared memory
facilities of Consensys do not work as expected. This flag prevents CLISP
from using them.

(*) The lisp.run you get is a program that reliably crashes your machine.


On Consensys System V 4.2:

Add -DNO_MULTIMAP_SHM -DSVR4 -DUSL to the CFLAGS in the makefile.
Use "-O", not "-g", as compiler optimization settings in the CFLAGS,
otherwise the ISQRT function may not work.


On 386 UHC UNIX System V release 4:

Add -DNO_MULTIMAP_SHM -DSVR4 -DUSL to the CFLAGS in the makefile.


On Onsite System V 4.2:

Add -DUSL to the CFLAGS in the makefile.
You may need to add -lnsl to the LIBS in the makefile.


On UnixWare:

Add -DNO_MULTIMAP_SHM -DUNIX_SYSV_UHC_1 to the CFLAGS in the makefile.
This is because shared memory does not work, and malloc() returns
addresses in the range 0x080xyzzy.


On SINIX-N 5.42:

If using c89:
  Add -Dunix -DSYSTYPE_SYSV to the CFLAGS in the makefile.
  In /usr/include/sys/signal.h replace the line
    #if (__STDC__ - 0 == 0) || defined(_POSIX_SOURCE) || defined(_XOPEN_SOURCE) || defined(_KERNEL)
  by
    #if defined(__STDC__) || defined(_POSIX_SOURCE) || defined(_XOPEN_SOURCE) || defined(_KERNEL)
  - otherwise no program can include <signal.h> without error.
  Set CPP = C89 -P in the makefile.


On SINIX-N 5.43:

Choose CC="cc -D_XPG_IV" instead of CC=cc. This avoids a problem with a wrong
declaration of gettimeofday().


On IRIX 3.2.1:

cc is too buggy: it dumps core when compiling spvw.i. You'll see a message
"Fatal error in: /usr/lib/ccom - core dumped".

Get and install GNU gcc.


On IRIX 4:

If you are using cc, choose "cc -ansi" as compiler. cc in non-ANSI mode
fails to expand macros with arguments within preprocessor directives like #if.
Since the compiler rejects 8-bit characters in strings, you will have to
convert the sources to plain ASCII first.
Add  -Olimit 3000  to the CFLAGS in the makefile. This ensures that the
bytecode interpreter will get optimized, which is crucial for performance.
If the compiler signals an internal error in unix.d, pointing to the line
"extern signal_handler signal (int sig, signal_handler handler);",
then comment out that line.


On IRIX 5:

Add -DNO_MULTIMAP_SHM to the CFLAGS in the makefile.
With IRIX 5.1(.0.1), it is necessary to add -D_POSIX_4SOURCE to the CFLAGS
in the makefile.


On IRIX 6.2 in 64-bit mode:

The C compiler 6.2 is unable to compile CLISP. If you don't have the C
compiler 7.0 or newer, you have to use the C++ compiler 7.0 instead.
Drawback: You can't compile with readline or FFI or module support. You
may add "-DSAFETY=2" to the CFLAGS in the makefile (optimize but don't
introduce assembly language parts). Do *not* add "-OPT:Olimit=6000" to the
CFLAGS, as the compiler suggests when compiling eval.d, because then
eval.d is apparently miscompiled. Remove the "-L/usr/lib -lX11" from the
CFLAGS in the makefile, if your X11 libraries are 32-bit.


On IRIX 6.3:

The configuration of ffcall hangs during "checking for working mprotect".
The running `conftest' process is unkillable. No workaround is known.


On DECstation 5000, Ultrix:

/bin/sh apparently doesn't support function definitions. So:
Set the environment variable CONFIG_SHELL to /usr/bin/ksh.
After executing "configure ...", change the first line in makemake from
"#! /bin/sh" to "#! /usr/bin/ksh". After executing "./makemake ...",
change "./clisp-link" in the makefile to "ksh ./clisp-link".


On Apple Macintosh, A/UX:

Add -DNO_MULTIMAP_SHM to the CFLAGS in the makefile. Shared memory
facilities do not work: even SHMLBA is not defined correctly in <sys/shm.h>.


On an Amiga running AMIX 2.1 SVR4.0:

Add -DUSL -DSVR4 -DNO_MULTIMAP_SHM -DNO_MULTIMAP_FILE to the CFLAGS in the
makefile. If you don't have the GNU assembler gas, then add -DNO_ASM to
the CFLAGS in the makefile. You may need to add -lnsl to the LIBS in the
makefile.


On an Amiga running NetBSD 1.2:

You can't use gcc-2.7.2 (buggy compiler). Use gcc-2.6.3 or gcc-2.5.8 instead.


On NeXT running NeXTstep 3.3:

NeXT's cc has problem with the inline assembler commands. Either add
-DNO_ASM to the CFLAGS in the Makefile, or use gcc-2.7.2 or newer.

If you get an error in the header file "ip.h" because the type `n_long' is
undefined, add -Dn_long='unsigned long' to the CFLAGS in the Makefile.


On AIX:

You can't use "cc" as compiler since it wants more than 64 MB RAM to compile
eval.d. You will use GNU gcc without regrets.
You can't use "xlc" as compiler on AIX 4 since it miscompiled certain casts
between integer types.
Choose gcc as compiler, as described in paragraph 2 of the INSTALL file.

The /bin/sh which is used during configuration may complain about
the config.cache which is generated.  If this happens, start over
with the variable CONFIG_SHELL exported as a reliable shell, like bash.

You would have to add -DNO_SINGLEMAP -DNO_TRIVIALMAP to the CFLAGS in the
makefile. But lispbibl.d now already takes care of this.


On Sequent PTX 2, PTX 4:

Add -linet -lnsl to the LIBS in the makefile.

On Sequent PTX V4 (sysv4), will find many features during autoconfig,
but during compilation will have trouble with mismatched declarations.
Avoid all this by running `configure' with "CC=gcc -D__STDC__=0".  
Also be sure that "_SEQUENT_" is being defined by your gcc install.


On SCO:

I used gcc and added -DNO_ASM to the CFLAGS in the makefile.


On Convex C2 running ConvexOS 10.1:

Add -Dunix to the CFLAGS in the makefile.
Modify the definitions belonging to CL_MMAP in unixconf.h appropriately.

If you are using gcc and have not -DSAFETY=2 or -DSAFETY=3 set, add
-ffixed-a4 -ffixed-a5 -ffixed-s5 -ffixed-s6 -ffixed-s7
to the CFLAGS in the makefile. This is needed because eval.d and lispbibl.d
use the registers a4, a5 and s5, s6, s7 in a special way.

If using gcc-2.6, compile eval.d without optimization flags (otherwise
eval.d gets miscompiled) and compile io.d without optimization flags
(otherwise gcc crashes).


On Atari ST/TT running MiNT:

Use "gcc -Dunix -U__TOS__" as compiler. The "-Dunix -U__TOS__" flags make
CLISP forget that it will be running on an Atari. MiNT is treated like any
other Unix operating system.

If you are on an Atari TT, add -DATARITT to the CFLAGS in the makefile.
This is because ST and TT have different address space layout.


On DEC Alpha AXP running OSF/1 1.3 or OSF/1 2.0 or OSF/1 3.0:

If cc had no bugs:
  Add  -Olimit 1500  to the CFLAGS in the makefile. This ensures that the
  bytecode interpreter will get optimized, which is crucial for performance.
Alas, I didn't succeed in building a working lisp.run with cc. cc cannot
compile package.d correctly.

So get and install GNU gcc (version 2.5.5 or newer).

On OSF/1 1.3, add -DNO_SINGLEMAP to the CFLAGS in the makefile. The reason is
this that mmap() is not usable: it returns errno=ENOMEM. (The shared memory
facility is not usable either: shmget() works only for segsize < 4112 KB,
shmat() returns errno=EINVAL. But this is automatically detected at
configuration time.)
On OSF/1 3.0, mmap() works.


On DEC Alpha AXP running OSF/1 3.2:

The build process crashes during bootstrap, right after loading backquot.lsp.
You'd better try with gcc.


On DEC Alpha AXP running OSF/1 4.0b:

cc has a preprocessor bug which occurs in spvw.d and eval.d. So get and
install GNU gcc (version 2.5.5 or newer).
The bug should be gone in OSF/1 4.0c. But on OSF/1 4.0d, the preprocessor
has another bug which occurs in pathname.d. So get and install GNU gcc
for real.


Hints for porting to new platforms:
-----------------------------------

Choose a reliable C compiler. GNU gcc is a good bet.

Has your machine a weird address space layout?
CLISP assumes that the code and data area as well as the area of malloc'ed
memory have addresses in the lower 16 MB, that is, addresses occupying
only the lower 24 (out of 32) address bits. This allows CLISP to use the
upper 8 bits as tags, for encoding the run time type of Lisp objects.
In case this assumption does not hold, either
* find a way to store 6 tag bits and an address in a 32 bit word, and
  modify lispbibl.d appropriately - not a trivial task -, or
* add -DWIDE to the CFLAGS. This will cause 64 bits (instead of 32) to be
  allocated for every pointer to a Lisp object: 32 for the address, the
  remaining for the tags. This will severely degrade CLISP's efficiency: memory
  consumption will grow by 60% or more, speed will be lowered by 30% or more.
  You will need a C compiler that provides 64 bit integer types; one such
  compiler is GNU gcc (version 2.3.3 or later).
No assumptions about the stack area are made.

If you get an error message mentioning "handle_fault", then generational GC
is not working. Add -DNO_GENERATIONAL_GC to the CFLAGS and recompile.

Has your operating system shared memory or memory mapping facilities?
CLISP tries to use them to save the time for stripping off the tag bits (see
above) before memory accesses. If you get an error message concerning shared
memory, you should add -DNO_MULTIMAP_SHM to the CFLAGS and recompile. If
you get an error message concerning mapped memory, you should add
-DNO_MULTIMAP_FILE -DNO_SINGLEMAP to the CFLAGS and recompile. Doing so
introduces a speed penalty of about 6%. If you still get an error message
concerning mapped memory, you should add -DNO_TRIVIALMAP to the CFLAGS and
recompile.

If interpreted.mem was successfully generated, but lisp.run dumps core when
loading .fas files, you should add -DSAFETY=3 to the CFLAGS and recompile.
Find out which is the least SAFETY level that produces a working lisp.run and
lispinit.mem, and tell me about it.

You can check which symbols get defined in lispbibl.d by looking into
lispbibl.h, assuming you are using gcc. For example:
    make lispbibl.h
    grep TYPECODES lispbibl.h

