<?xml version="1.0" encoding="UTF-8"?>

<section id="berkeley-db"><title>Berkeley DB access.</title>

<para>This interface to &sleepycat-berkeley-db; exports almost all
 functions in the official &c-lang; API.</para>

<section id="bdb-objects"><title>Berkeley-DB Objects</title>

<para>Thie module exports the following object types:
 <variablelist>
 <varlistentry><term><literal role="type">BDB:DBE</literal></term>
  <listitem><simpara>environment handle</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="type">BDB:DB</literal></term>
  <listitem><simpara>database handle</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="type">BDB:DBC</literal></term>
  <listitem><simpara>cursor handle</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="type">BDB:TXN</literal></term>
  <listitem><simpara>transaction handle</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="type">BDB:LOGC</literal></term>
  <listitem><simpara>log cursor handle</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="type">BDB:MPOOLFILE</literal></term>
  <listitem><simpara>memory pool file handle</simpara></listitem></varlistentry>
</variablelist></para></section>

<section id="bdb-close"><title>Closing handles</title>

<para>&close; will close (or commit, in the case of a transaction) the
 DB handle objects.  &gc;or will also call &close;.
 Closing an object will first close all its dependents.</para>
</section>

<section id="bdb-db-environment"><title>Database Environment</title>

<variablelist>
 <varlistentry><term><literal role="sexp">(BDB:DB-VERSION)</literal></term>
  <listitem><simpara>Return version information as 4 values: descriptive
    &string-t; and 3 &fixnum-t;s: major, minor and patch number (&db_version;).
 </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBE-CREATE &key-amp;
    PASSWORD ENCRYPT HOST CLIENT_TIMEOUT SERVER_TIMEOUT)</literal></term>
  <listitem><simpara>Create an environment handle (&dbe_create;),
    possibly connecting to a remote host (&DBE_set_rpc_server;) and
    possibly using encryption with password (&DBE_set_encrypt;).
 </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBE-CLOSE dbe)</literal></term>
  <listitem><simpara>Close an environment (&DBE_close;).
    You can also call &close;.</simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBREMOVE dbe file
    database &key-amp; TRANSACTION AUTO_COMMIT)</literal></term>
  <listitem><simpara>Remove a database (&DBE_dbremove;).
 </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBREMOVE dbe file
    database newname &key-amp; TRANSACTION AUTO_COMMIT)</literal></term>
  <listitem><simpara>Rename a database (&DBE_dbrename;).
 </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBE-OPEN dbe &key-amp;
    HOME JOIN INIT_CDB INIT_LOCK INIT_LOG INIT_MPOOL INIT_TXN
    RECOVER RECOVER_FATAL USE_ENVIRON USE_ENVIRON_ROOT CREATE
    LOCKDOWN PRIVATE SYSTEM_MEM THREAD MODE)</literal></term>
  <listitem><simpara>Open an environment (&DBE_open;).
 </simpara></listitem></varlistentry>
 <varlistentry><term><literal role="sexp">(BDB:DBE-REMOVE dbe &key-amp;
    HOME FORCE USE_ENVIRON USE_ENVIRON_ROOT)</literal></term>
  <listitem><simpara>Destroy an environment (&DBE_remove;).
 </simpara></listitem></varlistentry>
</variablelist>
</section>

<section id="bdb-environment-config"><title>Environment Configuration</title>

<variablelist>
<varlistentry><term><literal role="sexp">(BDB:DBE-SET-OPTIONS dbe
   &key-amp; ERRFILE PASSWORD ENCRYPT LOCK_TIMEOUT TXN_TIMEOUT SHM_KEY
   TAS_SPINS TX_TIMESTAMP TX_MAX DATA_DIR TMP_DIR AUTO_COMMIT CDB_ALLDB
   DIRECT_DB DIRECT_LOG NOLOCKING NOMMAP NOPANIC OVERWRITE
   PANIC_ENVIRONMENT REGION_INIT TXN_NOSYNC TXN_WRITE_NOSYNC YIELDCPU
   VERB_CHKPOINT VERB_DEADLOCK VERB_RECOVERY VERB_REPLICATION
   VERB_WAITSFOR VERBOSE)</literal></term>
 <listitem><para>Set some environment options using <simplelist columns="4">
    <member>&DBE_set_flags;</member>
    <member>&DBE_set_verbose;</member>
    <member>&DBE_set_tmp_dir;</member>
    <member>&DBE_set_data_dir;</member>
    <member>&DBE_set_tx_max;</member>
    <member>&DBE_set_tx_timestamp;</member>
    <member>&DBE_set_tas_spins;</member>
    <member>&DBE_set_shm_key;</member>
    <member>&DBE_set_timeout;</member>
    <member>&DBE_set_encrypt;</member>
    <member>&DBE_set_errfile;</member>
   </simplelist></para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBE-GET-OPTIONS dbe
   &optional-amp; what)</literal></term>
 <listitem><para>Retrieve some environment options.
   <variablelist><title>Values of <replaceable>what</replaceable></title>
    <varlistentry><term>missing</term><term>&nil;</term>
     <listitem><simpara>all options as a &list-t;
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:TX_TIMESTAMP</constant></term>
     <listitem><simpara>Recover to the time specified by timestamp
       rather than to the most current possible date
       (&DBE_get_tx_timestamp;)</simpara></listitem></varlistentry>
    <varlistentry><term><constant>:TX_MAX</constant></term>
     <listitem><simpara>the number of active transactions
       (&DBE_set_tx_max;)</simpara></listitem></varlistentry>
    <varlistentry><term><constant>:DATA_DIR</constant></term>
     <listitem><simpara>list of data directories (&DBE_get_data_dir;)
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:TMP_DIR</constant></term>
     <listitem><simpara>temporary directory (&DBE_get_tmp_dir;).
       May be &nil;.</simpara></listitem></varlistentry>
    <varlistentry><term>&verbose-k;</term>
     <listitem><simpara>the &list-t; of verbosity settings
       (&DBE_get_verbose;).</simpara></listitem></varlistentry>
    <varlistentry><term><constant>:AUTO_COMMIT</constant></term>
     <term><constant>:CDB_ALLDB</constant></term>
     <term><constant>:DIRECT_DB</constant></term>
     <term><constant>:DIRECT_LOG</constant></term>
     <term><constant>:NOLOCKING</constant></term>
     <term><constant>:NOMMAP</constant></term>
     <term><constant>:NOPANIC</constant></term>
     <term><constant>:OVERWRITE</constant></term>
     <term><constant>:PANIC_ENVIRONMENT</constant></term>
     <term><constant>:REGION_INIT</constant></term>
     <term><constant>:TXN_NOSYNC</constant></term>
     <term><constant>:TXN_WRITE_NOSYNC</constant></term>
     <term><constant>:YIELDCPU</constant></term>
     <term><constant>:VERB_CHKPOINT</constant></term>
     <term><constant>:VERB_DEADLOCK</constant></term>
     <term><constant>:VERB_RECOVERY</constant></term>
     <term><constant>:VERB_REPLICATION</constant></term>
     <term><constant>:VERB_WAITSFOR</constant></term>
     <listitem><simpara>a &boolean-t; indicator of whether this
       option is set or not (&DBE_get_verbose; and &DBE_get_flags;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:TAS_SPINS</constant></term>
     <listitem><simpara>the number of test-and-set spins
       (&DBE_get_tas_spins;).</simpara></listitem></varlistentry>
    <varlistentry><term><constant>:SHM_KEY</constant></term>
     <listitem><simpara>base segment ID for shared memory regions
       (&DBE_get_shm_key;).</simpara></listitem></varlistentry>
    <varlistentry><term><constant>:LOCK_TIMEOUT</constant></term>
     <term><constant>:TXN_TIMEOUT</constant></term>
     <listitem><simpara>timeout values for locks or transactions in the
       database environment (&DBE_get_timeout;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:ENCRYPT</constant></term>
     <listitem><simpara>encryption flags (&DBE_get_encrypt_flags;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:ERRFILE</constant></term>
     <listitem><simpara>&file-des; or &nil; (&DBE_get_errfile;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:DB_XIDDATASIZE</constant></term>
     <listitem><simpara>the &length; of the globally unique
       &unsigned-byte-vec; which must be passed to &TXN_prepare;.
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:HOME</constant></term>
     <listitem><simpara>the home directory (when open) or &t;.
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:OPEN</constant></term>
     <listitem><simpara>the &list-t; of open flags (when open) or &t;.
    </simpara></listitem></varlistentry>
</variablelist></para></listitem></varlistentry>
</variablelist></section>

<section id="bdb-operations"><title>Database Operations</title>
<!--
 DB->associate	Associate a secondary index
 DB->err	Error message with error string
 DB->errx	Error message
 DB->join	Perform a database join on cursors
 DB->key_range	Return estimate of key location
 DB->verify	Verify/salvage a database
 -->
<variablelist>
<varlistentry><term><literal role="sexp">(BDB:DB-CREATE dbe &key-amp;
   XA)</literal></term>
 <listitem><simpara>Create a database handle (&db_create;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-CLOSE db &key-amp;
   NOSYNC)</literal></term>
 <listitem><simpara>Close a database (&DB_close;).
   You can also call &close;.</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-DEL dbe key &key-amp;
   TRANSACTION AUTO_COMMIT)</literal></term>
 <listitem><simpara>Delete items from a database (&DB_del;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-FD db)</literal></term>
 <listitem><simpara>Return a file descriptor from a database (&DB_fd;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-GET db key &key-amp;
   ACTION AUTO_COMMIT DIRTY_READ MULTIPLE RMW TRANSACTION (ERROR &t;))
 </literal></term>
 <listitem><para>Get items from a database (&DB_get;).
   If &error-k; is &nil; and the record is not found, no &err-sig;,
   instead <constant>:NOTFOUND</constant> is returned.
   <constant>:ACTION</constant> should be one of
   <simplelist columns="2"><member><constant>:DB_CONSUME</constant></member>
    <member><constant>:DB_CONSUME_WAIT</constant></member>
    <member><constant>:DB_GET_BOTH</constant></member>
    <member><constant>:DB_SET_RECNO</constant></member></simplelist>
</para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-PUT db key val
   &key-amp; AUTO_COMMIT ACTION TRANSACTION)</literal></term>
<listitem><para>Store items into a database (&DB_put;).
  <constant>:ACTION</constant> should be one of
  <simplelist columns="3"><member><constant>:DB_APPEND</constant></member>
   <member><constant>:DB_NODUPDATA</constant></member>
   <member><constant>:DB_NOOVERWRITE</constant></member></simplelist>
</para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-STAT db &key-amp;
   FAST_STAT)</literal></term>
 <listitem><simpara>Return database statistics (&DB_get_byteswapped;,
   &DB_get_type;, &DB_stat;).</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-OPEN db file &key-amp;
   DATABASE TYPE MODE CREATE DIRTY_READ EXCL NOMMAP RDONLY
   THREAD TRUNCATE AUTO_COMMIT TRANSACTION)</literal></term>
 <listitem><para>Open a database (&DB_open;).
   <constant>:TYPE</constant> should be one of
   <simplelist columns="2"><member><constant>:BTREE</constant></member>
    <member><constant>:HASH</constant></member>
    <member><constant>:QUEUE</constant></member>
    <member><constant>:RECNO</constant></member>
    <member><constant>:UNKNOWN</constant> (default)</member></simplelist>
</para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-SYNC db)</literal></term>
 <listitem><simpara>Flush a database to stable storage (&DB_sync;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-TRUNCATE db &key-amp;
   TRANSACTION AUTO_COMMIT)</literal></term>
 <listitem><simpara>Empty a database (&DB_truncate;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-UPGRADE db file
   &key-amp; DUPSORT)</literal></term>
 <listitem><simpara>Upgrade a database (&DB_upgrade;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-RENAME db file database
   newname)</literal></term>
 <listitem><simpara>Rename a database (&DB_rename;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-REMOVE db file
   database)</literal></term>
 <listitem><simpara>Remove a database (&DB_remove;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-JOIN db cursor-sequence
   &key-amp; JOIN_NOSORT)</literal></term>
 <listitem><simpara>create a specialized join cursor for use in
   performing equality or natural joins on secondary indices (&DB_join;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-KEY-RANGE db key
   &key-amp; TRANSACTION)</literal></term>
 <listitem><simpara>return an estimate of the proportion of keys that
   are less than, equal to, and greater than the specified key
   (&DB_key_range;).  The underlying database must be of type Btree.
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-VERIFY db file &key-amp;
   DATABASE SALVAGE AGGRESSIVE PRINTABLE NOORDERCHK)</literal></term>
 <listitem><simpara>Verify/salvage a database (&DB_verify;).
   <constant>:SALVAGE</constant>, if supplied, should be the output
   file name.  <constant>:DATABASE</constant>, if supplied,
   will force <constant>DB_ORDERCHKONLY</constant>.
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:WITH-DB (var dbe file
   &rest-amp; options &key-amp; xa &allow-other-keys)
   &body-amp; body)</literal></term>
 <listitem><simpara>Open the database, execute &body-r;, close it.
</variablelist></section>


<section id="bdb-db-config"><title>Database Configuration</title>
<!--
 DB->set_alloc	Set local space allocation functions
 DB->set_cache_priority	Set the database cache priority
 DB->set_cachesize	Set the database cache size
 DB->set_dup_compare	Set a duplicate comparison function
 DB->set_errcall	Set error message callback
 DB->set_errfile	Set error message FILE
 DB->set_errpfx	Set error message prefix
 DB->set_feedback	Set feedback callback
 DB->set_lorder	Set the database byte order
 DB->set_pagesize	Set the underlying database page size
 DB->set_paniccall	Set panic callback
 -->
<variablelist>
<varlistentry><term><literal role="sexp">(BDB:DB-SET-OPTIONS db
   &key-amp; ERRFILE PASSWORD ENCRYPTION NCACHE CACHESIZE CACHE
   LORDER PAGESIZE BT_MINKEY H_FFACTOR H_NELEM Q_EXTENTSIZE
   RE_DELIM RE_LEN RE_PAD RE_SOURCE
   CHKSUM ENCRYPT TXN_NOT_DURABLE DUP DUPSORT RECNUM REVSPLITOFF
   RENUMBER SNAPSHOT)</literal></term>
 <listitem><para>Set some database options using <simplelist columns="4">
    <member>&DB_set_errfile;</member>
    <member>&DB_set_encrypt;</member>
    <member>&DB_set_cachesize;</member>
    <member>&DB_set_lorder;</member>
    <member>&DB_set_pagesize;</member>
    <member>&DB_set_bt_minkey;</member>
    <member>&DB_set_h_ffactor;</member>
    <member>&DB_set_h_nelem;</member>
    <member>&DB_set_q_extentsize;</member>
    <member>&DB_set_re_delim;</member>
    <member>&DB_set_re_len;</member>
    <member>&DB_set_re_pad;</member>
    <member>&DB_set_re_source;</member>
    <member>&DB_set_flags;</member>
   </simplelist></para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DB-GET-OPTIONS db
   &optional-amp; what)</literal></term>
 <listitem><para>Retrieve some database options.
   <variablelist><title>Values of <replaceable>what</replaceable></title>
    <varlistentry><term>missing</term><term>&nil;</term>
     <listitem><simpara>all options as a &list-t;
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:FLAGS</constant></term>
     <listitem><simpara>all flags (&DBE_get_flags;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:CHKSUM</constant></term>
     <term><constant>:ENCRYPT</constant></term>
     <term><constant>:TXN_NOT_DURABLE</constant></term>
     <term><constant>:DUP</constant></term>
     <term><constant>:DUPSORT</constant></term>
     <term><constant>:RECNUM</constant></term>
     <term><constant>:REVSPLITOFF</constant></term>
     <term><constant>:RENUMBER</constant></term>
     <term><constant>:SNAPSHOT</constant></term>
     <listitem><simpara>a &boolean-t; indicator of whether this
       option is set or not (&DBE_get_verbose; and &DBE_get_flags;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:CACHE</constant></term>
     <listitem><simpara>database cache information (&DB_get_cachesize;).
    </simpara></listitem></varlistentry>
   <varlistentry><term><constant>:ENCRYPTION</constant></term>
     <listitem><simpara>encryption flags (&DBE_get_encrypt_flags;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:ERRFILE</constant></term>
     <listitem><simpara>&file-des; or &nil; (&DB_get_errfile;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:PAGESIZE</constant></term>
     <listitem><simpara>database page size (&DB_get_pagesize;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:BT_MINKEY</constant></term>
     <listitem><simpara>the minimum number of key/data pairs intended to
       be stored on any single <constant>:BTREE</constant> leaf page
       underlying source file (&DB_get_bt_minkey;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:H_FFACTOR</constant></term>
     <listitem><simpara>the desired density within
       the <constant>:HASH</constant> table (&DB_get_h_ffactor;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:H_NELEM</constant></term>
     <listitem><simpara>an estimate of the final size of
       the <constant>:HASH</constant> table (&DB_get_h_nelem;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:Q_EXTENTSIZE</constant></term>
     <listitem><simpara>the size of the extents used to hold pages in
       a <constant>:QUEUE</constant> database (&DB_get_q_extentsize;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:RE_DELIM</constant></term>
     <listitem><simpara>the record delimiter
       for <constant>:RECNO</constant> databases (&DB_get_re_delim;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:RE_LEN</constant></term>
     <listitem><simpara>database record length (&DB_get_re_len;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:RE_PAD</constant></term>
     <listitem><simpara>database record pad byte (&DB_get_re_pad;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:RE_SOURCE</constant></term>
     <listitem><simpara>the underlying source file
       for <constant>:RECNO</constant> databases (&DB_get_re_source;).
    </simpara></listitem></varlistentry>
    <varlistentry><term><constant>:LORDER</constant></term>
     <listitem><simpara>database byte order (&DB_get_lorder;).
    </simpara></listitem></varlistentry>
  </variablelist></para>
  <warning><para>Once you call a method for one type of access method,
    the handle can only be used for that type.
    The methods &DB_get_re_delim; and &DB_get_re_source; are for
    a <constant>:RECNO</constant> database so
    you <emphasis>cannot</emphasis> call them
    (by passing <constant>:RE_DELIM</constant>
    or <constant>:RE_SOURCE</constant> to this function)
    and then use the database handle to open a database of different type
    (e.g., <constant>:QUEUE</constant>).</para></warning>
</listitem></varlistentry>
</variablelist>

<section id="bdb-bt-rn-config"><title>Btree/Recno Configuration</title>

<!--
 DB->set_append_recno	Set record append callback
 DB->set_bt_compare	Set a Btree comparison function
 DB->set_bt_minkey	Set the minimum number of keys per Btree page
 DB->set_bt_prefix	Set a Btree prefix comparison function
 DB->set_re_delim	Set the variable-length record delimiter
 DB->set_re_len	Set the fixed-length record length
 DB->set_re_pad	Set the fixed-length record pad byte
 DB->set_re_source	Set the backing Recno text file
 -->

<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>


<section id="bdb-hash-q-config"><title>Hash/Queue Configuration</title>
 <!--
 DB->set_h_ffactor	Set the Hash table density
 DB->set_h_hash	Set a hashing function
 DB->set_h_nelem	Set the Hash table size
 DB->set_q_extentsize	Set Queue database extent size
 -->
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>
</section>

<section id="bdb-cursor"><title>Database Cursor Operations</title>
<!--
 DB->cursor	Create a cursor handle
 DBcursor->c_close	Close a cursor
 DBcursor->c_count	Return count of duplicates
 DBcursor->c_del	Delete by cursor
 DBcursor->c_dup	Duplicate a cursor
 DBcursor->c_get, DBcursor->c_pget	Retrieve by cursor
 DBcursor->c_put	Store by cursor
-->
<variablelist>
<varlistentry><term><literal role="sexp">(BDB:MAKE-DBC db &key-amp;
   DIRTY_READ WRITECURSOR TRANSACTION)</literal></term>
 <listitem><simpara>Create a cursor handle (&DB_cursor;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-CLOSE
   cursor)</literal></term>
 <listitem><simpara>Close the cursor handle (&DBC_close;).
   You can also call &close;.</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-COUNT
   cursor)</literal></term>
 <listitem><simpara>Return count of duplicates (&DBC_count;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-DEL
   cursor)</literal></term>
 <listitem><simpara>Delete by cursor (&DBC_del;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-DUP
   cursor &key-amp; POSITION)</literal></term>
 <listitem><simpara>Duplicate a cursor (&DBC_dup;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-GET cursor key data
   action &key-amp; DIRTY_READ MULTIPLE (ERROR &t;))</literal></term>
 <listitem><para>Retrieve by cursor (&DBC_get;).
   If &error-k; is &nil; and the record is not found, no &err-sig;,
   <constant>:NOTFOUND</constant> or <constant>:KEYEMPTY</constant>
   is returned instead, as appropriate.
   <replaceable>action</replaceable> should be one of
   <simplelist columns="4"><member><constant>:DB_CURRENT</constant></member>
    <member><constant>:DB_FIRST</constant></member>
    <member><constant>:DB_GET_BOTH</constant></member>
    <member><constant>:DB_GET_BOTH_RANGE</constant></member>
    <member><constant>:DB_GET_RECNO</constant></member>
    <member><constant>:DB_JOIN_ITEM</constant></member>
    <member><constant>:DB_LAST</constant></member>
    <member><constant>:DB_NEXT</constant></member>
    <member><constant>:DB_NEXT_DUP</constant></member>
    <member><constant>:DB_NEXT_NODUP</constant></member>
    <member><constant>:DB_PREV</constant></member>
    <member><constant>:DB_PREV_NODUP</constant></member>
    <member><constant>:DB_SET</constant></member>
    <member><constant>:DB_SET_RANGE</constant></member>
    <member><constant>:DB_SET_RECNO</constant></member></simplelist>
</para></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:DBC-PUT
   cursor key data flag)</literal></term>
 <listitem><simpara>Store by cursor (&DBC_put;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:WITH-DBC (var &rest-amp;
   options) &body-amp; &body-r;))</literal></term>
 <listitem><simpara>Open a cursor, execute &body-r;, close it.
</simpara></listitem></varlistentry></variablelist></section>


<section id="bdb-lock"><title>Lock Subsystem</title>
<!--
 DB_ENV->set_lk_conflicts	Set lock conflicts matrix
 DB_ENV->set_lk_detect	Set automatic deadlock detection
 DB_ENV->set_lk_max_lockers	Set maximum number of lockers
 DB_ENV->set_lk_max_locks	Set maximum number of locks
 DB_ENV->set_lk_max_objects	Set maximum number of lock objects
 DB_ENV->lock_detect	Perform deadlock detection
 DB_ENV->lock_get	Acquire a lock
 DB_ENV->lock_id	Acquire a locker ID
 DB_ENV->lock_id_free	Release a locker ID
 DB_ENV->lock_put	Release a lock
 DB_ENV->lock_stat	Return lock subsystem statistics
 DB_ENV->lock_vec	Acquire/release locks
 -->
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>


<section id="bdb-log"><title>Log Subsystem</title>
<!--
 DB_ENV->set_lg_bsize	Set log buffer size
 DB_ENV->set_lg_dir	Set the environment logging directory
 DB_ENV->set_lg_max	Set log file size
 DB_ENV->set_lg_regionmax	Set logging region size
 DB_ENV->log_archive	List log and database files
 DB_ENV->log_file	Map Log Sequence Numbers to log files
 DB_ENV->log_flush	Flush log records
 DB_ENV->log_put	Write a log record
 DB_ENV->log_stat	Return log subsystem statistics
 -->
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>


<section id="bdb-log-cursor"><title>Log Cursor Operations</title>
<!--
 DB_ENV->log_cursor	Create a log cursor handle
 DB_LOGC->close	Close a log cursor
 DB_LOGC->get	Retrieve a log record
 -->
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>


<section id="bdb-log-seq"><title>Log Sequence Numbers</title>

<para>Use &equalp; to compare <type>BDB::LSN</type> objects.</para>

<!-- log_compare	Compare two Log Sequence Numbers
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist> -->

</section>

<section id="bdb-mem-pool"><title>Memory Pool Subsystem</title>
<!--
 DB_ENV->set_cachesize	Set the environment cache size
 DB_ENV->set_mp_mmapsize	Set maximum mapped-in database file size
 DB_ENV->memp_register	Register input/output functions for a file in a memory pool
 DB_ENV->memp_stat	Return memory pool statistics
 DB_ENV->memp_sync	Flush pages from a memory pool
 DB_ENV->memp_trickle	Trickle flush pages from a memory pool

Memory Pool Files
 DB_ENV->memp_fcreate	Open a file in a memory pool
 DB_MPOOLFILE->close	Close a file in a memory pool
 DB_MPOOLFILE->get	Get page from a file in a memory pool
 DB_MPOOLFILE->open	Open a file in a memory pool
 DB_MPOOLFILE->put	Return a page to a memory pool
 DB_MPOOLFILE->set	Set memory pool page status
 DB_MPOOLFILE->sync	Flush pages from a file in a memory pool
 DB_MPOOLFILE->set_clear_len	Set file page bytes to be cleared
 DB_MPOOLFILE->set_fileid	Set file unique identifier
 DB_MPOOLFILE->set_ftype	Set file type
 DB_MPOOLFILE->set_lsn_offset	Set file log-sequence-number offset
 DB_MPOOLFILE->set_pgcookie	Set file cookie for pgin/pgout
 -->
<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>



<section id="bdb-transaction"><title>Transaction Subsystem</title>
<!--
 DB_ENV->set_tx_max	Set maximum number of transactions
 DB_ENV->set_tx_timestamp	Set recovery timestamp
 DB_ENV->txn_checkpoint	Checkpoint the transaction subsystem
 DB_ENV->txn_recover	Distributed transaction recovery
 DB_ENV->txn_stat	Return transaction subsystem statistics
 DB_TXN->abort	Abort a transaction
 DB_TXN->commit	Commit a transaction
 DB_TXN->discard	Discard a prepared but not resolved transaction handle
 DB_TXN->id	Return a transaction's ID
 DB_TXN->prepare	Prepare a transaction for commit
 DB_TXN->set_timeout	Set transaction timeout
 -->
<variablelist>
<varlistentry><term><literal role="sexp">(BDB:TXN-BEGIN dbe &key-amp;
   PARENT DIRTY_READ NOSYNC NOWAIT SYNC)</literal></term>
 <listitem><simpara>Begin a transaction (&DBE_txn_begin;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-ABORT txn)</literal></term>
 <listitem><simpara>Abort a transaction (&TXN_abort;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-COMMIT txn &key-amp;
   NOSYNC SYNC)</literal></term>
 <listitem><simpara>Commit a transaction (&TXN_commit;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-DISCARD txn)</literal></term>
 <listitem><simpara>Discard a transaction (&TXN_discard;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-ID txn)</literal></term>
 <listitem><simpara>Return the transaction's ID (&TXN_id;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-CHECKPOINT dbe
   &key-amp; KBYTE MIN FORCE)</literal></term>
 <listitem><simpara>Checkpoint the transaction subsystem
   (&DBE_txn_checkpoint;).</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-PREPARE txn
   id)</literal></term>
 <listitem><simpara>Initiate the beginning of a two-phase commit
   (&TXN_prepare;).</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-RECOVER dbe &key-amp;
   FIRST NEXT)</literal></term>
 <listitem><simpara>Return a list of prepared but not yet resolved
   transactions (&DBE_txn_recover;).</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-SET-TIMEOUT txn
   timeout which)</literal></term>
 <listitem><simpara>Set timeout values for locks or transactions for the
   specified transaction (&TXN_set_timeout;).
</simpara></listitem></varlistentry>
<varlistentry><term><literal role="sexp">(BDB:TXN-STAT dbe &key-amp;
   STAT_CLEAR)</literal></term>
 <listitem><simpara>Transaction subsystem statistics (&DBE_txn_stat;).
</simpara></listitem></varlistentry>
</variablelist></section>


<section id="bdb-replication"><title>Replication</title>
<!--
 DB_ENV->set_rep_transport	Configure replication transport
 DB_ENV->rep_elect	Hold a replication election
 DB_ENV->set_rep_limit	Limit data sent in response to a single message
 DB_ENV->rep_process_message	Process a replication message
 DB_ENV->rep_start	Configure an environment for replication
 DB_ENV->rep_stat	Replication statistics
  -->

<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>


<!--
<section id="bdb-"><title></title>

<variablelist>
<varlistentry><term><literal role="sexp">()</literal></term>
 <listitem><simpara></simpara></listitem></varlistentry>
</variablelist>
</section>

-->




</section>
