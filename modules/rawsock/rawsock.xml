<?xml version="1.0" encoding="UTF-8"?>

<section id="rawsock"><title>Raw Socket Access.</title>

<section id="rawsock-intro"><title>Introduction</title>

<para>This is the raw socket interface, as described in
 <filename role="unix">sys/socket.h</filename>.
Sockets are represented by their &fixnum-t; &file-des;s.</para>

<simpara>When this module is present, &features-var; contains the
 symbol <constant>:RAWSOCK</constant>.</simpara>

<warning id="rawsock-use-sockets"><title>Use &socket-stream; instead!</title>
 <simpara>This interface is very low-level, and you probably do not need
 it - unless you are doing something <emphasis>very</emphasis> unusual.
 If you are interested in TCP/IP (Internet) stream sockets, you should use
 &socket-stream;s, &not-e; this package.</simpara></warning>

<warning id="rawsock-not-streams"><title>Do &not-e; use &make-stream;!</title>
 <simpara>You can turn such a raw socket into a usual lisp &stream-t;
  using &make-stream;, but you should be <emphasis>extremely</emphasis>
  careful with such dubious actions!  See the &clisp-devel;
  <ulink url="http://sourceforge.net/mailarchive/message.php?msg_id=7203955"
         >mailing list archives</ulink> for more details.
  Note that &make-stream; will duplicate the &file-des;
  (using <function role="unix">dup</function>),
  so you <emphasis>still</emphasis> have to &close; the original raw socket.
</simpara></warning>
</section>

<section id="rawsock-func"><title>Functions</title>

<para>We implement access to
 <simplelist columns="1">
  <member><code>(<function role="unix">accept</function>
    &sock-r; &addr-r;)</code></member>
  <member><code>(<function role="unix">bind</function>
    &sock-r; &addr-r;)</code></member>
  <member><code>(<function role="unix">connect</function>
    &sock-r; &addr-r;)</code></member>
  <member><code>(<function role="unix">getpeername</function>
    &sock-r; &addr-r;)</code></member>
  <member><code>(<function role="unix">getsockname</function>
    &sock-r; &addr-r;)</code></member>
  <member><code>(<function role="unix">htonl</function> &n-r;)</code></member>
  <member><code>(<function role="unix">htons</function> &n-r;)</code></member>
  <member><code>(<function role="unix">listen</function>
    &sock-r; <replaceable>backlog</replaceable>)</code></member>
  <member><code>(<function role="unix">ntohl</function> &n-r;)</code></member>
  <member><code>(<function role="unix">ntohs</function> &n-r;)</code></member>
  <member><code>(<function role="unix">recv</function>
    &sock-r; &buf-r; &key-amp; peek oob waitall)</code></member>
  <member><code>(<function role="unix">recvfrom</function>
    &sock-r; &buf-r; &addr-r; &key-amp; peek oob waitall)</code></member>
  <member><code>(<function role="unix">recvmsg</function>
    &sock-r; &mesg-r; &key-amp; peek oob waitall)</code></member>
  <member><code>(<function role="unix">send</function>
    &sock-r; &buf-r; &key-amp; oob eor)</code></member>
  <member><code>(<function role="unix">sendmsg</function>
    &sock-r; &mesg-r; &key-amp; oob eor)</code></member>
  <member><code>(<function role="unix">sendto</function>
    &sock-r; &buf-r; &addr-r; &key-amp; oob eor)</code></member>
  <member><code>(<function role="unix">sockatmark</function>
    &sock-r;)</code></member>
  <member><code>(<function role="unix">socket</function>
    <replaceable>domain</replaceable> &type-r;
    <replaceable>protocol</replaceable>)</code></member>
  <member><code>(<function role="unix">socketpair</function>
    <replaceable>domain</replaceable> &type-r;
    <replaceable>protocol</replaceable>)</code></member></simplelist>
 using same-named lisp functions in package
 <quote role="package">RAWSOCK</quote>.
 Additionally,<simplelist columns="1">
  <member><code>(<function>RAWSOCK:SOCK-READ</function> &sock-r;
    &buf-r;)</code> calls <function role="unix">read</function>;</member>
  <member><code>(<function>RAWSOCK:SOCK-WRITE</function> &sock-r;
    &buf-r;)</code> calls <function role="unix">write</function>;</member>
  <member><code>(<function>RAWSOCK:SOCK-CLOSE</function> &sock-r;)</code>
   calls <function role="unix">close</function>.</member>
</simplelist></para>
</section>

<section id="rawsock-args"><title>Common arguments</title>
<variablelist id="rawsock-args-list">
<varlistentry><term><type>void*</type> &buf-r;</term>
 <listitem><simpara>A &unsigned-byte-vec;.  You do not need to supply its
   length because Lisp can determine it itself.  The vector may be
   adjustable and have a fill pointer.</simpara></listitem></varlistentry>
<varlistentry><term><type>int</type> &sock-r;</term>
 <listitem><simpara>An &integer-t; (returned by
   <function role="unix">socketpair</function> or
   <function role="unix">socket</function>).</simpara></listitem></varlistentry>
<varlistentry><term><type>int</type> <replaceable>family</replaceable></term>
 <term><type>int</type> <replaceable>domain</replaceable></term>
 <listitem><simpara>A &nil; (stands for <constant>AF_UNSPEC</constant>),
   &integer-t;, or a platform-specific keyword, e.g.,
   <constant>:INET</constant> stands for <constant>AF_INET</constant>.
</simpara></listitem></varlistentry>
<varlistentry><term><type>int</type> &type-r;</term>
 <listitem><simpara>A &nil; (stands for <constant>SOCK_STREAM</constant>),
   &integer-t;, or a platform-specific keyword, e.g.,
   <constant>:DGRAM</constant> stands for <constant>SOCK_DGRAM</constant>.
</simpara></listitem></varlistentry>
<varlistentry><term><type>int</type> <replaceable>protocol</replaceable></term>
 <listitem><simpara>A &nil; (stands for 0), &integer-t;, or a
   platform-specific keyword, e.g., <constant>:ARP</constant> stands
   for <constant>ETH_P_ARP</constant>.</simpara></listitem></varlistentry>
<varlistentry><term><type>int</type> <replaceable>flags</replaceable></term>
 <listitem><simpara>This &c-lang; argument corresponds to keyword
   arguments to the Lisp functions.  E.g., <function>rawsock:send</function>
   accepts <constant>:OOB</constant> and <constant>EOR</constant> arguments,
   while <function>rawsock:recv</function> accepts <constant>PEEK</constant>,
   <constant>OOB</constant> and <constant>WAITALL</constant>.
</simpara></listitem></varlistentry>
<varlistentry><term><type>struct sockaddr</type> &addr-r;</term>
 <listitem><simpara>An object returned by
   <link linkend="make-sockaddr"><function>MAKE-SOCKADDR</function></link>.
   You do not need to supply its length because Lisp can determine it itself.
</simpara></listitem></varlistentry>
</variablelist>

<section id="rawsock-plat-dep-constants">
 <title>Platform-dependent Keywords</title>
<para>One can extract the list of acceptable platform-dependent
 keywords for, e.g., socket domain using the following code:
<programlisting language="lisp">
 (&block; &nil;
   (&handler-bind; ((&type-error-t;
                    (&lambda-m; (c)
                      (&format; &t; "~&amp;error: ~A~%" c)
                      (&return; (&cddr; (&third; (&type-error-expected-type; c)))))))
     (rawsock:socket "bad" &nil; &nil;)))
</programlisting></para></section>
</section>

<section id="rawsock-not-implemented"><title>Not Implemented</title>

<para>We do not interface to <function role="unix">select</function>
 or <function role="unix">poll</function>,
 they are available through &so-status;.</para>

<para>We do not interface to <function role="unix">shutdown</function>,
 it is available through &sost-shut;.</para>

<para>We do not interface to <function role="unix">gethostbyname</function>
 or <function role="unix">gethostbyaddr</function>,
 they are available through &resolve-host;.</para>

</section>

<section id="rawsock-high-level"><title>High-Level Functions</title>
<variablelist id="rawsock-high-level-list">
<varlistentry><term><code>(RAWSOCK:SOCKET-OPTION &sock-r; &name-r;
   &key-amp; :LEVEL)</code></term>
 <term><code>(&setf; (RAWSOCK:SOCKET-OPTION &sock-r; &name-r;
   &key-amp; :LEVEL) &value-r;)</code></term>
 <listitem><simpara>Call <function role="unix">getsockopt</function>
   and <function role="unix">setsockopt</function>, returns and sets
   individual (for specific option &name-r; and
   <replaceable>level</replaceable>) and multiple (when &name-r; is
   &nil; and/or <replaceable>level</replaceable> is &all-k;) options.
   (See also &so-opt;.)</simpara></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:CONVERT-ADDRESS
   <replaceable>family</replaceable> &addr-r;)</code></term>
 <listitem><simpara>Convert between &string-t; and &integer-t; IP
   &addr-r; representations using <function role="unix">inet_addr</function>,
   <function role="unix">inet_ntoa</function>,
   <function role="unix">inet_ntop</function>,
   or <function role="unix">inet_pton</function>.
</simpara></listitem></varlistentry>
<varlistentry id="make-sockaddr"><term><code>(RAWSOCK:MAKE-SOCKADDR
   <replaceable>family</replaceable> &optional-amp; &data-r;)</code></term>
 <listitem><simpara>Create a <type>sockaddr</type> object.
   &data-r; should be a sequence of &unsigned-byte-8; or an &integer-t;
   (meaning <code>(&make-list; &data-r; :initial-element 0)</code>).
   When omitted, the standard platform-specific size is used.
</simpara></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:SOCKADDR-FAMILY &addr-r;)</code></term>
 <listitem><simpara>Return the numeric family of the
   <type>sockaddr</type> object.</simpara></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:SOCKADDR-DATA &addr-r;)</code></term>
 <listitem><simpara>Return a &fresh; &vector-t; displaced to the
   <structfield>data</structfield> field of the
   &c-lang; <type>struct sockaddr</type> object.</simpara>
  <warning><simpara>Modifying this &vector-t;'s content will modify the
    &addr-r; argument data!</simpara></warning></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:OPEN-UNIX-SOCKET
   &path-r; &optional-amp; &type-r;)</code></term>
 <listitem><simpara>Open a &unix; socket special file.
</simpara></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:MAKE-MSGHDR &data-r;)</code></term>
 <listitem><simpara>Create a <type>RAWSOCK:MSGHDR</type> object for
   <function role="unix">sendmsg</function> and
   <function role="unix">recvmsg</function>.
</simpara></listitem></varlistentry>
<varlistentry>
 <term><code>(RAWSOCK:IPCSUM &buf-r;)</code></term>
 <term><code>(RAWSOCK:ICMPCSUM &buf-r;)</code></term>
 <term><code>(RAWSOCK:TCPCSUM &buf-r;)</code></term>
 <term><code>(RAWSOCK:UDPCSUM &buf-r;)</code></term>
 <listitem><simpara>Compute the appropriate protocol checksum.
</simpara></listitem></varlistentry>
<varlistentry><term><code>(RAWSOCK:CONFIGDEV &sock-r; &name-r; &addr-r;
   &key-amp; <replaceable>promisc</replaceable>
   <replaceable>noarp</replaceable>)</code></term>
 <listitem><simpara>Set some socket options and IP &addr-r;
   with <function role="unix">ioctl</function>.
</simpara></listitem></varlistentry>
</variablelist>
</section>

</section>
